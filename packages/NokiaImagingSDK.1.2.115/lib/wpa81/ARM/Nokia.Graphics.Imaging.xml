<?xml version="1.0"?>
<doc>
    <assembly>
        "Nokia.Graphics.Imaging"
    </assembly>
    <members>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.AutoResizeAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.AutoResizeConfiguration)">
            <summary>
JPEG squeeze of an image into a new smaller JPEG 
using configured auto resize parameters.
</summary>
            <param name="jpegSource">
Source JPEG buffer to be squeezed.
</param>
            <param name="autoConfiguration">
Resize configuration parameters.
</param>
            <returns> Asynchronously returns buffer with squeezed JPEG</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.SqueezeAsync(Windows.Storage.Streams.IBuffer,System.UInt32)">
            <summary>
JPEG squeeze of an image into a new smaller JPEG  
with a desired maximum buffer size in bytes.
</summary>
            <param name="jpegSource">
Source JPEG buffer to be squeezed.
</param>
            <param name="toSize">
Desired maximum output JPEG size.
</param>
            <returns> Asynchronously returns buffer with squeezed JPEG</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.BlendAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.IReadableBitmap,Windows.Foundation.Point)">
            <summary>
Blends a JPEG image with another bitmap image into a new JPEG.
The source JPEG image dimensions cannot be smaller than 
the dimensions of the bitmap image to blend. 
</summary>
            <param name="jpegSource">
Source JPEG to be blended.
</param>
            <param name="bitmapSource">
Bitmap image to be blended with JPEG image. Image must be in ARGB8888 or AYUV4444 color mode.
</param>
            <param name="blendPosition">
Blend start position in the JPEG image (upper left corner).
</param>
            <returns> Asynchroniously returns buffer with blended JPEG</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegTools.FlipAndRotateAsync(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.FlipMode,Nokia.Graphics.Imaging.Rotation,Nokia.Graphics.Imaging.JpegOperation)">
            <summary>
Performs a lossless flip followed by a rotation of a JPEG image into a new JPEG. Optionally falls back on a lossy operation if lossless cannot be performed.
</summary>
            <remarks>
                <para>
An exception is thrown if the combination of rotation and flip does not result in any change in the image, i.e. the combinations
(Flip None, Rotate 0) and (Flip Both, Rotate 180).
</para>
                <para>
The lossless flip and rotate functions have limitations depending on image
dimensions and MCU (Minimum Coded Unit) size. See the constraints below
for the different directions. If the constraints aren't fullfilled,
an exception will be thrown. To rotate images with unsupported image dimensions, 
specify JpegOperation.AllowLossy. 
</para>
                <para>The combinations of rotation and flip mode that give rise to the constraint that the image width and/or height 
must be a multiple of the MCU width or height is as follows:
<code>
+------------+-----+-----+-----+-----+
|            | 0   | 90  | 180 | 270 |
+------------+-----+-----+-----+-----+
| None       | n/a | H   | W,H |     |
+------------+-----+-----+-----+-----+
| Horizontal | W   | W,H | H   | W   |
+------------+-----+-----+-----+-----+
| Vertical   | H   | W   | W   | W,H |
+------------+-----+-----+-----+-----+
| Both       | W,H |     | n/a | H   |
+------------+-----+-----+-----+-----+
</code></para>
                <para>
If JpegOperation.Lossless is specified and the above criteria are not met, an exception will be thrown.
</para>
            </remarks>
            <param name="jpegSource">
Source JPEG to be rotated.
</param>
            <param name="flipMode">
Specifies if and how the image should be flipped.
</param>
            <param name="rotation">
Specifies if and how the image should be rotated.
</param>
            <param name="jpegOperation">
Specifies if only lossless operations are permitted, or if a fallback on lossy operations should be used when needed.
</param>
            <returns>Asynchroniously returns buffer with rotated JPEG</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.JpegTools">
            <summary>
Operations on JPEG images. The operations are done on the JPEG compressed data directly, which is efficient and can avoid quality reduction.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.JpegOperation">
            <summary>
The types of operation supported by JpegTools::FlipAndRotateAsync.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.JpegOperation.AllowLossy">
            <summary>
Allow falling back on lossy operations when lossless is not available.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.JpegOperation.Lossless">
            <summary>
Only lossless operations allowed.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CurvesFilter.Blue">
            <summary>
Color curve for the blue channel. 
</summary>
            <remarks>
                <para>If this channel is not used, set to null.</para>
                <para>Default is null.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CurvesFilter.Green">
            <summary>
Color curve for the green channel. 
</summary>
            <remarks>
                <para>If this channel is not used, set to null.</para>
                <para>Default is null.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CurvesFilter.Red">
            <summary>
Color curve for the red channel. 
</summary>
            <remarks>
                <para>If this channel is not used, set to null.</para>
                <para>Default is null.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurvesFilter.#ctor(Nokia.Graphics.Imaging.Curve,Nokia.Graphics.Imaging.Curve,Nokia.Graphics.Imaging.Curve)">
            <summary>
Creates and initializes a new CurvesFilter with a set of color curves.
</summary>
            <param name="red">
Color curve for the red channel. 
</param>
            <param name="green">
Color curve for the green channel. 
</param>
            <param name="blue">
Color curve for the blue channel. 
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CurvesFilter.#ctor">
            <summary>
Creates and initializes a new CurvesFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CurvesFilter">
            <summary>
Transforms colors in the image using color curves.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FogFilter.#ctor">
            <summary>
Creates and initializes a new FogFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FogFilter">
            <summary>
Applies a fog effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LevelsFilter.Black">
            <summary>
                <para>The position of the black saturating point.</para>
                <para>Range [0.0, 1.0]. The value of black should be smaller 
than, or equal to the value of white.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LevelsFilter.Gray">
            <summary>
                <para>The relative position of the middle gray point. </para>
                <para>Range [0.0, 1.0], where 0.0 is at the white saturating 
point and 1.0 is at the black saturating point.</para>
            </summary>
            <remarks>
                <para>Default is 0.5.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LevelsFilter.White">
            <summary>
                <para>The position of the white saturating point. The value of white should be larger 
than, or equal to the value of black.</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 1.0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LevelsFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Creates and initializes a new LevelsFilter with specified settings.
</summary>
            <param name="white">
The position of the white saturating point. 
<para>
Range [0.0, 1.0].
</para></param>
            <param name="gray">
The relative position of the middle gray point. 
<para>
Range [0.0, 1.0], where 0.0 is at the bright saturating 
point and 1.0 is at the dark saturating point.
</para></param>
            <param name="black">
The position of the black saturating point.
<para>
Range [0.0, 1.0]. The value of black should be smaller 
than, or equal to the value of white.
</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LevelsFilter.#ctor">
            <summary>
Creates and initializes a new LevelsFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LevelsFilter">
            <summary>
Adjusts levels in the current image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.PosterizeFilter.ColorComponentValueCount">
            <summary>
                <para>The number of allowed values for each color component.</para>
                <para>Range [2, 16]</para>
            </summary>
            <remarks>
                <para>Default is 8</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.PosterizeFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new PosterizeFilter with a specified color component count.
</summary>
            <param name="colorComponentValueCount">
The number of allowed values for each color component.
<para>Range [2, 16]</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.PosterizeFilter.#ctor">
            <summary>
Creates and initializes a new PosterizeFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.PosterizeFilter">
            <summary>
Applies a posterize effect, reducing the number of colors in the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GradientImageSource.Gradient">
            <summary>
The gradient to use when generating the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GradientImageSource.#ctor(Windows.Foundation.Size,Nokia.Graphics.Imaging.IGradient)">
            <summary>
Creates an image source from a gradient.
</summary>
            <param name="size">The inherent size of the image.</param>
            <param name="gradient">The gradient to use when generating the image.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GradientImageSource">
            <summary>
An image source that generates pixels based on a gradient.
</summary>
            <remarks>
When rendering the GradientImageSource keep in mind that some renderers (like WriteableBitmapRenderer) use the alpha information. 
Unless this alpha information is desired, e.g. for transparency and compositing, set the alpha of each <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> to 255.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorModeDescriptor.PlaneDescriptors">
            <summary>
Descriptors for the planes used.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorModeDescriptor.BytesPerPixel">
            <summary>
The number of bytes needed for storing a pixel.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorModeDescriptor.BitsPerPixel">
            <summary>
The number of bits needed for storing a pixel.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorModeDescriptor.#ctor(Nokia.Graphics.Imaging.ColorMode)">
            <summary>
Creates a new descriptor for a colormode.
</summary>
            <param name="colorMode">
The color mode to create a descriptor for.
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorModeDescriptor">
            <summary>
Provides information about a color mode.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.AlignAsync">
            <summary>
Aligns the images in <see cref="P:Nokia.Graphics.Imaging.ImageAligner.Sources" />.
</summary>
            <returns>An operation representing the resulting aligned image sources. 
If alignment failed for a source, a null reference will be inserted in that position in the list.</returns>
            <remarks>
If images with differing sizes have been provided, or if the image height or width is uneven, the operation will throw an exception.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageAligner.BitmapCacheSize">
            <summary>
The maximum number of bitmaps that are cached internally during processing.
<para>If set to 0, the number of cached bitmaps will not be limited.</para><para>Default is 2.</para></summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageAligner.ReferenceSource">
            <summary>
                <para>
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Nokia.Graphics.Imaging.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</para>
                <para>
If set to null, will default to the middle element in the <see cref="P:Nokia.Graphics.Imaging.ImageAligner.Sources" /> list.
</para>
                <para>
Default is null.
</para>
            </summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageAligner.Sources">
            <summary>
                <para>A list of images to align.</para>
                <para>At least two image and a maximum of 40 sources must be provided.</para>
                <para>All image sources must have the same size.</para>
            </summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.Dispose">
            <summary>
Destructor for the image aligner.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^},Nokia.Graphics.Imaging.IImageProvider,System.Int32)">
            <summary>
Creates a new image aligner with the specified sources, reference source, and bitmap cache size.
</summary>
            <param name="sources">
                <para>A list of images to align.</para>
                <para>At least two image and a maximum of 40 sources must be provided.</para>
                <para>All image sources must have the same size.</para>
            </param>
            <param name="referenceSource">
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Nokia.Graphics.Imaging.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</param>
            <param name="bitmapCacheSize">
The maximum number of bitmaps that are cached internally during processing.
<para>If set to 0, the number of cached bitmaps will not be limited.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^},Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates a new image aligner with the specified sources and reference source.
</summary>
            <param name="sources">
                <para>A list of images to align.</para>
                <para>At least two image and a maximum of 40 sources must be provided.</para>
                <para>All image sources must have the same size.</para>
            </param>
            <param name="referenceSource">
Reference image that will be used as a starting point for aligning the images.
Must be one of the image sources in <see cref="P:Nokia.Graphics.Imaging.ImageAligner.Sources" />, or the alignment will fail with an InvalidOperationException.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^})">
            <summary>
Creates a new image aligner with the specified sources.
</summary>
            <param name="sources">
                <para>A list of images to align.</para>
                <para>At least two image and a maximum of 40 sources must be provided.</para>
                <para>All image sources must have the same size.</para>
            </param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageAligner.#ctor">
            <summary>
Creates a new image aligner with default settings.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ImageAligner">
            <summary>
Aligns a series of images that differ by small movements.
</summary>
            <remarks>
The alignment works for quite small movements only, for example such movements that occur when the
user tries to hold the camera still, and quickly degenerates if the images are
moved too much. It also works only on constant or near constant exposure settings.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CartoonFilter.DistinctEdges">
            <summary>
Specifies if detected edges in the image should be rendered distinctively.
</summary>
            <remarks>
Default is false.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CartoonFilter.#ctor(System.Boolean)">
            <summary>
Creates and initializes a new CartoonFilter with distinctEdges settings.
</summary>
            <param name="distinctEdges">
Specifies if detected edges in the image should be rendered distinctively.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CartoonFilter.#ctor">
            <summary>
Creates and initializes a new CartoonFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CartoonFilter">
            <summary>
Transforms the image into a cartoon graphic style.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HueSaturationFilter.Saturation">
            <summary>
                <para>Saturation adjustment level.</para>
                <para>Range [-1.0, 1.0] where 0 implies no adjustment.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HueSaturationFilter.Hue">
            <summary>
                <para>Hue adjustment level. </para>
                <para>Range [-1.0, 1.0] where 0 implies no adjustment.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.HueSaturationFilter.#ctor(System.Double,System.Double)">
            <summary>
Creates and initializes a new HueSaturationFilter with specified hue and saturation.
</summary>
            <param name="hue">
Hue adjustment level. 
<para>Range [-1.0, 1.0] where 0 implies no adjustment.</para></param>
            <param name="saturation">
Saturation adjustment level. 
<para>Range [-1.0, 1.0] where 0 implies no adjustment.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.HueSaturationFilter.#ctor">
            <summary>
Creates and initializes a new HueSaturationFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.HueSaturationFilter">
            <summary>
Adjusts the hue and saturation of the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoResizeConfiguration.ToString">
            <summary>
Returns a string that represents the current object.
</summary>
            <returns>
A string that represents the current object.
</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.ColorSpacing">
            <summary>
One of the supported color spaces.
</summary>
            <value name="colorSpace" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MinEncodingQuality">
            <summary>
                <para>The lowest desired encoding quality.</para>
                <para>Range [0.0, 1.0]</para>
            </summary>
            <value name="minEncodingQuality" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.ResizeMode">
            <summary>
One of the AutoResizeModes.
</summary>
            <value name="resizeMode" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MinImageSize">
            <summary>
Minimum image size to achieve. 
</summary>
            <remarks>
                <para>
The rendered image will be at least as large as this size in at least
one dimension.
The size must be smaller than maxImageSize.
A minImageSize of {160, 120} will, for the following different source
image sizes, give this minimum size:
</para>
                <para>{1024, 1024} will be at least {120, 120}</para>
                <para>{1280, 640}  will be at least {160, 80}</para>
                <para>{640, 1280}  will be at least {80, 160}</para>
            </remarks>
            <value name="minImageSize" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MaxImageSize">
            <summary>
Maximum image size to achieve. 
</summary>
            <remarks>
                <para>
The rendered image will fit within this outer bounding box when
allowing for rotation. The size must be larger than minImageSize.
A maxImageSize of {640, 480} will, for the following different source
image sizes, give this maximum size:
</para>
                <para>{1024, 1024} will be at most {480, 480}</para>
                <para>{1280, 640}  will be at most {640, 320}</para>
                <para>{640, 1280}  will be at most {320, 640}</para>
            </remarks>
            <value name="maxImageSize" />
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoResizeConfiguration.MaxBufferSize">
            <summary>
Maximum output buffer size in bytes.
</summary>
            <value name="maxBufferSize" />
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoResizeConfiguration.#ctor(System.UInt32,Windows.Foundation.Size,Windows.Foundation.Size,Nokia.Graphics.Imaging.AutoResizeMode,System.Double,Nokia.Graphics.Imaging.ColorSpace)">
            <summary>
Creates a new resize configuration object for the JpegTools.
</summary>
            <param name="maxBufferSize">
Maximum output buffer size in bytes.
</param>
            <param name="maxImageSize">
                <para>
Maximum image size to achieve. The rendered image will fit within this outer bounding box when
allowing for rotation. The size must be larger than minImageSize.
A maxImageSize of {640, 480} will, for the following different source
image sizes, give this maximum size:
</para>
                <para>{1024, 1024} will be at most {480, 480}</para>
                <para>{1280, 640}  will be at most {640, 320}</para>
                <para>{640, 1280}  will be at most {320, 640}</para>
            </param>
            <param name="minImageSize">
                <para>
Minimum image size to achieve. The rendered image will be at least as large as this size in at least
one dimension. The size must be smaller than maxImageSize.
A minImageSize of {160, 120} will, for the following different source
image sizes, give this minimum size:
</para>
                <para>{1024, 1024} will be at least {120, 120}</para>
                <para>{1280, 640}  will be at least {160, 80}</para>
                <para>{640, 1280}  will be at least {80, 160}</para>
            </param>
            <param name="resizeMode">
One of the AutoResizeModes.
</param>
            <param name="minEncodingQuality">
The lowest desired encoding quality. Must be in the range [0.0, 1.0]
</param>
            <param name="colorSpacing">
Color spacing will affect how the color channels are sub-sampled when encoding the
JPEG file. Sub-sampling of the color channels will reduce the resulting file size.
YUV 4:2:0 color spacing is recommended for achieving the lowest file size.
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoResizeConfiguration">
            <summary>
Configuration settings for the JpegTools resize.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoResizeMode">
            <summary>
Resize modes used with JpegTools::AutoResizeAsync.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PrioritizeHighEncodingQuality">
            <summary>Auto resize will try to preserve the highest possible encoding quality
while shrinking the width and height of the image. This might be
useful if you substantially reduce the size of the image.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PrioritizeLargeImageSize">
            <summary>Auto resize will try to preserve the maxImageSize while lowering
the encoding quality.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.PreserveSourceEncodingQuality">
            <summary>Auto resize will try to preserve the source encoding quality while
shrinking the width and height of the image.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.AutoResizeMode.Automatic">
            <summary>Auto resize will simultaneously lower the encoding quality and shrink
the width and height of the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorSpace">
            <summary>
Color spacing modes for YUV component data.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Yuv400">
            <summary>YUV400 (Grayscale)</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Yuv444">
            <summary>YUV444</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Yuv422ROT">
            <summary>YUV422 Rotated</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Yuv422">
            <summary>YUV422</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Yuv420">
            <summary>YUV420</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorSpace.Undefined">
            <summary>Unknown or undefined colorspacing.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBlurLevel_Convert(System.Int32,CAPS_BLUR_LEVEL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Conversion functions for integer range describing the blur levels for the blur filter.
Creates two functions:
    CAPS_BLUR_LEVEL toCapsBlurLevel(int value);
    int fromCapsBlurLevel(CAPS_BLUR_LEVEL  value);
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlurFilter.BlurRegionShape">
            <summary>
The region shape of the blur effect.
</summary>
            <remarks>
A region must be set in order for this property to have any effect.
<para>Default is BlurRegionShape::Rectangular</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlurFilter.Region">
            <summary>
The region to blur within the image.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
            <remarks>
The blur is applied to the entire image if the width and/or height value is zero
(independent of the position).
<para>The coordinates are relative to the upper-left corner of the blur region.</para><para>Default is a region corresponding to the entire image</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlurFilter.KernelSize">
            <summary>
                <para>The kernel size in pixels. Larger kernel size results in more blur.</para>
                <para>Range [1, 256]. Default is 1.</para>
            </summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlurFilter.#ctor(System.Int32,Windows.Foundation.Rect,Nokia.Graphics.Imaging.BlurRegionShape)">
            <summary>
Creates and initializes a new BlurFilter with a specific level and region.
</summary>
            <param name="kernelSize">
The kernel size in pixels.
<para>Range [1, 256]. Larger kernel size results in more blur.</para></param>
            <param name="region">
The region to blur within the image. 
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></param>
            <param name="regionShape">
The region shape of the blur effect.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlurFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new BlurFilter with a specific level and default region.
</summary>
            <param name="kernelSize">
The kernel size in pixels.
<para>Range [1, 256]. Larger kernel size results in more blur.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlurFilter.#ctor">
            <summary>
Creates and initializes a new BlurFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlurFilter">
            <summary>
Applies a blur effect to the image.
</summary>
        </member>
        <member name="T:Concurrency.diagnostic.span">
            <summary>
span is a RAII class that starts the span object in the constructor and leaves it in the destructor
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_message(Concurrency.diagnostic.marker_importance,System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a message marker using given importance and given category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_message(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a message marker using default importance and given category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_message(Concurrency.diagnostic.marker_importance,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a message marker using give importance and default category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_message(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a message marker using default importance and default category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_alert(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a alert marker which is a flag with critical importance and alert category.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_flag(Concurrency.diagnostic.marker_importance,System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a flag marker using given importance and category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_flag(System.Int32,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a flag marker using default importance and given category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_flag(Concurrency.diagnostic.marker_importance,System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a flag marker using given importance and default category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.write_flag(System.Char!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
            <summary>
Emit a flag marker using default importance and default category
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.is_enabled(Concurrency.diagnostic.marker_importance,System.Int32)">
            <summary>
Determines if any session has enabled the provider with specified level and category.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.is_enabled">
            <summary>
Determines if any session has enabled the provider.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.Dispose">
            <summary>
Destroys marker_series object and releases all allocated resources.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.#ctor(_GUID!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Creates an instance of marker_series with specified provider.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.#ctor(_GUID!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Creates a default instance of marker_series with specified provider.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.#ctor(System.Char!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Creates an instance of marker_series with default provider and series objects.
</summary>
        </member>
        <member name="M:Concurrency.diagnostic.marker_series.#ctor">
            <summary>
Creates a default instance of marker_series with default provider and series objects.
</summary>
        </member>
        <member name="T:Concurrency.diagnostic.marker_series">
            <summary>
marker_series represents PPA marker series and exposes functionality for emitting spans, flags and messages
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorPlaneDescriptor.GetSize(Windows.Foundation.Size)">
            <summary>
Returns the size of this plane given an image size, taking subsampling into account.
</summary>
            <param name="imageSize">The size of the image, in pixels.</param>
            <returns>The size of the plane, in elements.</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorPlaneDescriptor.BytesPerSample">
            <summary>
The number of bytes needed for storing a plane element.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorPlaneDescriptor.BitsPerSample">
            <summary>
The number of bits needed for storing a plane element.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorPlaneDescriptor.ColorMode">
            <summary>
The color mode of the plane.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorPlaneDescriptor.Dispose">
            <summary>
Destructor for the color plane.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorPlaneDescriptor">
            <summary>
Provides details about a color mode plane.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GrayscaleFilter.#ctor">
            <summary>
Creates and initializes a new GrayscaleFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GrayscaleFilter">
            <summary>
Converts the image to grayscale.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ChromaKeyFilter.InvertAlpha">
            <summary>
Controls how the alpha channel is generated.
</summary>
            <remarks>
If false, full transparency in the resulting alpha channel is the value 0.
If true, full transparency in the resulting alpha channel is the value 255.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ChromaKeyFilter.NoiseSuppression">
            <summary>
                <para>Specifies the noise suppression level</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>If the noise suppression level is low, only a small amount of noise will be suppressed.</para>
                <para>Default is 0.0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ChromaKeyFilter.ColorDistance">
            <summary>
                <para>Specifies how much variation around the chroma key color will be considered for transparency.</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para>
                <para>Default is 0.0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ChromaKeyFilter.Color">
            <summary>
The chroma key color that will be made transparent.
</summary>
            <remarks>
                <para>The alpha component will be ignored.</para>
Default is (0,0,0)
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double,System.Double,System.Boolean)">
            <summary>
Creates and initializes a new ChromaKeyFilter with specified settings.
</summary>
            <param name="color">
The chroma key color that will be made transparent. 
<para>The alpha component will be ignored.</para></param>
            <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para><para>Range [0.0, 1.0].</para></param>
            <param name="noiseSuppression">
Specifies the noise suppression level.
<para>If the noise suppression level is low, only a small amount of noise will be suppressed.</para><para>Range [0.0, 1.0].</para></param>
            <param name="invertAlpha">
Controls how the alpha channel is generated.
<para>If false, full transparency in the resulting alpha channel is the value 0.</para><para>If true, full transparency in the resulting alpha channel is the value 255.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double,System.Double)">
            <summary>
Creates and initializes a new ChromaKeyFilter with specified specified color, distance and noiseSuppression values.
</summary>
            <param name="color">
The chroma key color that will be made transparent. 
<para>The alpha component will be ignored.</para></param>
            <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para><para>Range [0.0, 1.0].</para></param>
            <param name="noiseSuppression">
Specifies the noise suppression level.
<para>If the noise suppression level is low, only a small amount of noise will be suppressed.</para><para>Range [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ChromaKeyFilter.#ctor(Windows.UI.Color,System.Double)">
            <summary>
Creates and initializes a new ChromaKeyFilter with specified color and distance values.
</summary>
            <param name="color">
The chroma key color that will be made transparent.
<para>The alpha component will be ignored.</para></param>
            <param name="colorDistance">
Specifies how much variation around the chroma key color will be considered for transparency.
<para>Range [0.0, 1.0].</para><para>If the color distance is small, only a small variation around the chroma key color will be considered for transparency.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ChromaKeyFilter.#ctor(Windows.UI.Color)">
            <summary>
Creates and initializes a new ChromaKeyFilter with specified color.
</summary>
            <param name="color">
The chroma key color that will be made transparent.
<para>The alpha component will be ignored.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ChromaKeyFilter.#ctor">
            <summary>
Creates and initializes a new ChromaKeyFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ChromaKeyFilter">
            <summary>
Adds transparency to the pixels of a specific color.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AlphaToGrayscaleFilter.#ctor">
            <summary>
Creates a new AlphaToGrayscaleFilter with the default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AlphaToGrayscaleFilter">
            <summary>
                <para>Copies the alpha channel in the image to the color channels, resulting in a grayscale representation of the alpha channel.</para>
            </summary>
            <remarks>
                <para>The alpha information is no longer present in the output.</para>
                <para>This filter is primarily intended for conversion of an alpha based mask to a grayscale mask suitable for use with ImageFusionFilter or BlendFilter.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.VignettingFilter.Region">
            <summary>
A rectangle defining where the vignetting should be applied. 
</summary>
            <remarks>
                <para>The transition area will start outside the ellipse that can be inscribed inside this region.</para>
                <para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para>
                <para>A vignetting region with width and/or height set to 0 will be applied to the entire image.</para>
                <para>Default is a 0-size region that will be applied to the entire image.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.VignettingFilter.Color">
            <summary>
The color to use for the vignetting effect.
</summary>
            <remarks>
                <para>Default is black</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.VignettingFilter.TransitionSize">
            <summary>
                <para>The size of the transition region as a fraction of the radius.</para>
                <para>Range [0.0, 15.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.VignettingFilter.#ctor(System.Double,Windows.UI.Color,Windows.Foundation.Rect)">
            <summary>
Creates and initializes a new VignettingFilter with specified transition size, vignetting color, and region of application.
</summary>
            <param name="transitionSize">
The size of the transition region as a fraction of the radius.
<para>Range [0.0, 15.0].</para></param>
            <param name="color">
The color to use for the vignetting effect.
</param>
            <param name="region">
A rectangle defining where the vignetting should be applied. 
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.VignettingFilter.#ctor(System.Double,Windows.UI.Color)">
            <summary>
Creates and initializes a new VignettingFilter with specified transition size and vignetting color.
</summary>
            <param name="transitionSize">
The size of the transition region as a fraction of the radius.
<para>Range [0.0, 15.0].</para></param>
            <param name="color">
The color to use for the vignetting effect.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.VignettingFilter.#ctor">
            <summary>
Creates and initializes a new VignettingFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.VignettingFilter">
            <summary>
Applies vignetting effect to the image.
</summary>
        </member>
        <member name="M:exif_getTagGPSDestLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x16.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x16.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x14.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x14.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTimeStamp(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x7.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTimeStamp(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x7.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Sets tag 0x4.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLongitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x4.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to get.

    @param denominator1
    The denominator of the data value to get

    @param numerator2
    The numerator of the data value to get.

    @param denominator2
    The denominator of the data value to get

    @param numerator3
    The numerator of the data value to get.

    @param denominator3
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLatitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param numerator1
    The numerator of the data value to set.

    @param denominator1
    The denominator of the data value to set

    @param numerator2
    The numerator of the data value to set.

    @param denominator2
    The denominator of the data value to set

    @param numerator3
    The numerator of the data value to set.

    @param denominator3
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestDistance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x1a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestDistance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x1a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestBearing(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x18.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestBearing(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x18.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSImgDirection(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSImgDirection(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTrack(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xf.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTrack(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xf.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSpeed(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xd.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSpeed(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xd.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDOP(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xb.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDOP(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xb.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSAltitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x6.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSAltitude(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x6.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSMapDatum(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x12.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSMapDatum(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x12.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. Must be null terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSatellites(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x8.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSatellites(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x8.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. Must be null terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestDistanceRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x19.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestDistanceRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x19.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestBearingRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x17.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestBearingRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x17.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLongitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x15.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLongitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x15.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSDestLatitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x13.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSDestLatitudeRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x13.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSImgDirectionRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x10.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSImgDirectionRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x10.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSTrackRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xe.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSTrackRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xe.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSSpeedRef(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xc.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSSpeedRef(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xc.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSMeasureMode(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSMeasureMode(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xa.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSStatus(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSStatus(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLongitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa3.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLongitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x3.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSLatitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSLatitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSAltitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa5.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSAltitudeReference(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x5.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagMakerNote(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x927C.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGPSVersion(ctExifSession*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x0.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

    @param paramSize
    The size of the data to get.
    If parameter is NULL, the function sets paramSize 
    to the amount of bytes needed for parameter.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGPSVersion(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_gpstags
@{

    @brief
    Sets tag 0x0.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFocalLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x920a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFNumber(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x829d.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagApertureValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9202.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExposureTime(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x829a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagShutterSpeedValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9201.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagGainControl(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa407.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDigitalZoomRatio(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa404.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11b. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11a. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11b.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x11a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to set.

    @param denominator
    The denominator of the data value to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFlash(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9209.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagLightSource(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x9208.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagISOSpeedRatings(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x8827.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagSceneCaptureType(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa406.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagWhiteBalance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa403.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExposureMode(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa402.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagCustomRendered(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa401.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagJpegInterchangeFormatLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x202.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagThumbCompression(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x103.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagJpegInterchangeFormat(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x201.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagPixelYDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagPixelXDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa002.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagColorSpace(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0xa001.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExifIdPointer(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x8769.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagYCbCrPositioning(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x213.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagComponentsConfiguration(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9101.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagFlashPixVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0xa000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagExifVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagInteroperabilityVersion(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagInteroperabilityIndex(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagArtist(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x13B.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:exif_setTagDateTimeDigitized(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9004.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDateTimeOriginal(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x9003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagDateTime(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x132.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagModel(ctExifSession*,System.Byte*)">
    @brief
    Sets tag 0x110.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setTagMake(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_settag
@{

    @brief
    sets tag 0x10f.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to set. This ascii string must be NULL terminated.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFocalLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x920a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFNumber(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x829d.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagApertureValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9202.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExposureTime(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x829a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagShutterSpeedValue(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9201.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagGainControl(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa407.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDigitalZoomRatio(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa404.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11b. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11a. (IFD 1)

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagYResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11b.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagXResolution(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x11a.

    @param exifSession
    The session that holds the exif data.

    @param numerator
    The numerator of the data value to get.

    @param denominator
    The denominator of the data value to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFlash(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9209.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagLightSource(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x9208.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagISOSpeedRatings(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x8827.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagSceneCaptureType(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa406.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagWhiteBalance(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa403.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExposureMode(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa402.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagCustomRendered(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa401.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagJpegInterchangeFormatLength(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x202.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagThumbCompression(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x103.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagJpegInterchangeFormat(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x201.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagPixelYDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagPixelXDimension(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa002.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagColorSpace(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0xa001.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagOrientation(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x112.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExifIdPointer(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x8769.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagYCbCrPositioning(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x213.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagResolutionUnit(ctExifSession*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets tag 0x128.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagComponentsConfiguration(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9101.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagFlashPixVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0xa000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagExifVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9000.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagInteroperabilityVersion(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x2.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagInteroperabilityIndex(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x1.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTimeDigitized(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9004.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTimeOriginal(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x9003.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagDateTime(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x132.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagModel(ctExifSession*,System.Byte*)">
    @brief
    Gets tag 0x110.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_getTagMake(ctExifSession*,System.Byte*)">
@} 
@addtogroup fm_exif_gettag
@{

    @brief
    Gets tag 0x10f.

    @param exifSession
    The session that holds the exif data.

    @param parameter
    The data to get.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_checkExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Checks if a specified tag exists and get information associated with the 
    tag.

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information. 
    The user must allocate and deallocate this structure.

	@return 
    @c CERR_OK if successful or CERR_EXIF_TAG_NOT_FOUND if the tag don't exists.

    @since 3.2

</member>
        <member name="M:exif_deleteExifsubIFD(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong,EXIF_SUB_IFD)">
    @brief
    Deletes all data within a specific sub-IFD tag.

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that holds the sub-IFD that should be deleted.

    @param subIFD
    The sub-IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7

</member>
        <member name="M:exif_deleteExifIFD(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Deletes all data within a specific IFD tag

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7


    @brief
    Deletes all data within a specific IFD tag

    @param exifSession
    The session that holds the exif data.

    @param IFD
    The id of the IFD tag that should be deleted from the exif session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7 R7

</member>
        <member name="M:exif_deleteExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Deletes a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information. 
    The user must allocate and deallocate this structure.
    The struct members IFD and tagId must be set by the caller, 
    other members are ignored.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_setExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Sets information assosiated with a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information.    
    The user must allocate and deallocate this structure.
    All members of this struct must be set by the caller.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_setexifdata_example

    @since 3.2

</member>
        <member name="M:exif_getExifData(ctExifSession*,CTTagInfo*)">
    @brief
    Gets the information assosiated with a specified tag        

    @param exifSession
    The session that holds the exif data.

    @param tagInfo
    A CTTaginfo structure that contains tag information.
    The user must allocate and deallocate this structure.
    Struct members, IFD, subIFD and tagId must be specified when calling.
    Members nofRecords, tagType and tagData will be set by the function.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_getexifdata_example

    @since 3.2

</member>
        <member name="M:exif_insertExifIntoJfifFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header.
    Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.
    Also, the buffer containing the JFIF file must be large enough to 
    accommodate both the original jpeg file plus the exif data.

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param srcJpegSize 
    Size of original JFIF file if known, otherwise
    set to zero.
    
    @param newJpegSize 
    The resulting size of the jpeg after insertion of the
    exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_writeExifAndJfifToFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header and writes
	it to file. Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.        

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param filename 
    Filename of the resulting exif jpeg file.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6


</member>
        <member name="M:exif_addExifToJfifFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*)">
    @brief
    Replaces the jfif header in a jpeg file with an exif header.
    Note that the exif header is independant of the image i.e
    tags like image dimensions will not be modified in this function.        

    @param jpegFile
    Buffer containg the jfif jpeg file.
	If not JFIF compliant, CERR_UNSUPPORTED_IMAGE will be returned.

    @param exifData
    Buffer containing the exif data to add.

    @param exifFile 
    Buffer with the resulting exif jpeg file. The buffer must be large enough
	to accomodate both the original image and the exif header.
	
	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newemptysession_example

    @since 3.2

</member>
        <member name="M:exif_getImageOrientation(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt16*)">
    @brief
    Gets the orientation of an image 

    @param pBuffer
    A buffer containing the image. The image must have exif data. 

    @param orientation
    The orientation of the image.

    1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_getTagOrientation()\n

    @since 3.2

</member>
        <member name="M:exif_streamGetScreenNail(CTStream*,CTBuffer*)">
    @brief Get a flashpix (jpeg) screennail from a jpeg image.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point
    to the start of a jpeg image.
    @param[out] pBuffer Buffer where the screen nail is copied to.
    The buffer must be allocated with the size of the screennail, as given from
    exif_streamGetScreenNailSize().

    @return CERR_OK or an error code.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.
    @li This function does not guarantee that the jpeg data written to
    pBuffer is complete and correct.

    @since 3.8.2 R03

</member>
        <member name="M:exif_streamGetScreenNailSize(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief Get the size of a flashpix (jpeg) screennail from a jpeg image.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point
    to the start of a jpeg image.
    @param[out] pSize Size of the flashpix screennail jpeg data in bytes. If the stream contains
    no flashpix screennail, it is set to 0.
    @return @c CERR_OK or an error code.
    @c CERR_OK is returned also if the stream does not contain a flashpix screennail or if the
    stream is of unknown format.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.

    @since 3.8.2 R03

</member>
        <member name="M:exif_streamHasExif(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@} 
@addtogroup fm_exif_general
@{

    @brief Check if the stream contains a jpeg image with an exif (APP1) block.
    Get offset and size of that block.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @param pStream Stream that must have seek feature (canSeek). Stream must point to
    the start of a jpeg image.
    @param pHasExif will be set to false upon error or if no exif block was found,
    true if a block has been found.
    @param pOffset (Optional) Stream offset of the FF in the FF E1 marker (Only valid if *pHasExif is set to true)
    @param pLength (Optional) Length of app1 including FF E1 marker. (Only valid if *pHasExif is set to true)

    @return CERR_OK or an error code only if the stream reports an error.

    @remarks
    @li If CERR_OK is returned from this function, the stream offset has not
    been changed.
    @li If end of data is found, CERR_OK will be returned.

    @since 3.8.2 R02

</member>
        <member name="M:exif_getThumbnailFromFile(System.Char!System.Runtime.CompilerServices.IsConst*,CTBuffer**,System.UInt16*)">
    @brief
    Gets the exif thumbnail from an image from file. Note that this function 
    only supports jpeg format thumbnails. This is a faster way than getting the
    thumbnail from the CTExifSession.

    @param filename
    Filename of the imagee. The image must have exif data.

    @param thumbBuffer
    A buffer that will recieve the thumbnail. The user must de-allocate this 
    buffer. i.e. call caps_desrtoyBuffer().

    @param orientation
    The orientation of the thumbnail.

	1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
        or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromSession()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="M:exif_getThumbnailFromBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**,System.UInt16*)">
    @brief
    Gets the exif thumbnail from an image. Note that this function only
    supports jpeg format thumbnails. This is a faster way than getting the 
    thumbnail from the CTExifSession.

    @param imageBuffer
    A buffer containing the image. The image must have exif data.

    @param thumbBuffer
    A buffer that will recieve the thumbnail. The user must de-allocate this 
    buffer.

    @param orientation
    The orientation of the thumbnail.

    1 - 0th row at visual top of image. 0th column at visual left-hand side\n
    2 - 0th row at visual top of image. 0th column at visual right-hand side\n
    3 - 0th row at visual bottom of image. 0th column at visual right-hand side\n
    4 - 0th row at visual bottom of image. 0th column at visual left-hand side\n
    5 - 0th row at visual left-hand side of image. 0th column at visual top\n
    6 - 0th row at visual right-hand side of image. 0th column at visual top\n
	(Camera is rotated 90 degrees clockwise)\n
    7 - 0th row at visual right-hand side of image. 0th column at visual bottom\n
    8 - 0th row at visual left-hand side of image. 0th column at visual bottom\n
	(Camera is rotated 90 degrees counter-clockwise)\n
    
	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
        or a specific error code upon failure.
    
    @sa
    exif_getThumbnailFromFile()\n
    exif_getThumbnailFromSession()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="M:exif_getJpegThumbnailInfo(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTJpegThumbnailInfo*)">
    @brief Parse out thumbnail and its orientation from an exif APP1 block

    @param pBuffer Buffer pointing to an FF E1 marker
    @param[out] pThumbnail Jpeg thumbnail information,
    i.e. if there is a jpeg thumbnail, its offset and orientation.

    @return CERR_OK or an error code on invalid parameters or corrupt exif data.

    @sa exif_getThumbnailFromBuffer()

    @since 3.8.2 R02

</member>
        <member name="M:exif_addThumbnailToSession(ctExifSession*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTRawThumbnailInfo*)">
    @brief
    Adds a thumbnail to the Exif session        

    @param exifSession
    The session that holds the exif data.

    @param buffer
    A CTBuffer that contains the thumbnail image data.

    @param rawInfo
    [optional] A structure describing the thumbnail if it is of raw rgb format.
    Must be NULL if the thumbnail is jpeg format

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromSession()\n
    exif_getThumbnailFromSession()

    @since 3.2

</member>
        <member name="M:exif_getThumbnailFromSession(ctExifSession*,CTBuffer**,CTRawThumbnailInfo*)">
    @brief
    Gets a copy of the thumbnail from the Exif block if present.

    @remarks
    If the user only wants a read-only reference to the thumbnail, then it is
    more memory efficient to use exif_getExifData() to extract the information
    needed, such as:

    Offsets and length of thumbnail,

    and if RAW:

    Width and height in pixels,
    Bits per sample,
    Photometric interpretation and
    Samples per pixel.

    @param exifSession
    The session that holds the exif data.

    @param buffer
    A buffer that will recieve a copy of the thumbnail. The user must 
    de-allocate this buffer, I.e call caps_destroyBuffer().

    @param rawInfo
    [optional] A structure describing the thumbnail if it is of raw rgb format.
    The member of this structure will be 0 if the thumbnail is jpeg.

	@return 
    @c CERR_OK if successful, CERR_ITEM_NOT_FOUND if no thumbnail was found
    or a specific error code upon failure.

    @sa
    exif_getThumbnailFromBuffer()\n
    exif_getThumbnailFromFile()\n
    exif_addThumbnailToSession()

    @since 3.2

</member>
        <member name="F:CTJpegThumbnailInfo.IFD1Orientation">
        @brief
        The orientation tag of the thumbnail. 0 if no orientation flag is found.

        @note 0 is not a valid exif orientation. For valid orientation values,
        see, for example: exif_getThumbnailFromBuffer()

</member>
        <member name="F:CTJpegThumbnailInfo.offset">
@brief
Offset to jpeg data from the FF in the FF E1 marker.

</member>
        <member name="F:CTJpegThumbnailInfo.size">
@brief
Size of jpeg thumbnail in bytes. 0 if no thumbnail is found.

</member>
        <member name="T:CTJpegThumbnailInfo">
    @brief
    This structure holds the information for jpeg thumbnails.

    @since 3.8.2 R02

</member>
        <member name="T:CTRawThumbnailInfo">
@}

@addtogroup fm_exif_thumbnail
    @{

    @brief
    This structure holds the information for raw rgb thumbnails.
    Note that this structure may be used as both input and output argument.

    @since 3.2

</member>
        <member name="M:exif_copySession(ctExifSession**,ctExifSession*)">
    @brief
    Copies all the data associated with an exif session.    

    @param copiedSession
    The new session to be created.

    @param exifSession
    The session that holds the exif data to be copied.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_renderSession(ctExifSession*,CTBuffer*)">
    @brief
    Renders the exif data in the session to a buffer.

    The exif header will be written in the endian format specified by
    exif_setEndian(). Default for all sessions are little endian.

    @param exifSession
    The session to hold the exif data

    @param pBuffer
    The buffer to write the exif data to. This buffer must be provided by the
    caller. The struct member CTBuffer::size of the provided buffer will be
    updated to reflect the actual number of bytes written to the buffer.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa exif_getExifBlockSize() for querying the required buffer size.
    
    @since 3.2

</member>
        <member name="M:exif_getEndian(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets the endian to use when rendering the session   

    @param exifSession
    The session to hold the exif data

    @param endian
    SCB_LITTLE_ENDIAN or SCB_BIG_ENDIAN

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_renderSession()

    @since 3.2

</member>
        <member name="M:exif_setEndian(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets the endian to use when rendering the session.

    @param exifSession
    The session to hold the exif data

    @param endian
    SCB_LITTLE_ENDIAN or SCB_BIG_ENDIAN

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_renderSession()

    @since 3.2

</member>
        <member name="M:exif_getExifBlockSize(ctExifSession*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Gets the size in bytes of the exif block    

    @param exifSession
    The session to hold the exif data

    @param size
    The current size of the exif block.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_destroySession(ctExifSession*)">
    @brief
    Destroys an exif session    

    @param exifSession
    The session that holds the exif data

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:exif_addExifHeaderFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Adds an exif header to be rendered in a CAPS session.    

    @param session
    A valid CAPS CTSession

    @param exifData
    A buffer containing the exif header. Pass this
    argument as NULL in order to remove current exif data from the session

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_addExifHeaderFromSession()

    @since 3.2

</member>
        <member name="M:exif_addExifHeaderFromSession(cips*,ctExifSession*)">
    @brief
    Adds an exif header to be rendered in a CAPS session.    

    @param session
    A valid CAPS CTSession

    @param exifSession
    The session that holds the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_addExifHeaderFromBuffer()

    @since 3.2

</member>
        <member name="M:exif_newSessionWithBlank(ctExifSession**)">
    @brief
    Starts a new empty exif session    
    Default endian is SCB_LITTLE_ENDIAN.

    @param pExifSession
    The session to hold the exif data. This argument is set to NULL
	if the function fails.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newemptysession_example

    @sa
    exif_newSessionWithBuffer()\n
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n

    @since 3.2

</member>
        <member name="M:exif_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from a file handle.
    Endian format is set to the same as the existing data.

    @param srcHandle
    File handle to a jpeg image

    @param pExifSession
    The session to hold the exif data. This argument is set to NULL
	if the function fails.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithBuffer()\n
    exif_newSessionWithBlank()\n

    @since 3.4

</member>
        <member name="M:exif_newSessionWithStream(CTStream*,ctExifSession**)">
    @brief
    Starts a new exif editing session from stream.
    Endian format is set to the same as the existing data.

    @param pStream
    Jpeg stream. 

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
	exif_newSessionWithBuffer()\n
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 5.3

</member>
        <member name="M:exif_newSessionWithNonJpegBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from a buffer with EXIF data.
	I.e. a buffer thats starts with Exif, but it does not need to contain
    a complete JPEG image.
    Endian format is set to the same as the existing data.

    @param pExifBuffer
    Buffer containing the exif header only, shall start with EXIF.

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newsessionwithbuffer_example

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 5.5

</member>
        <member name="M:exif_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,ctExifSession**)">
    @brief
    Starts a new exif editing session from buffer.
    Endian format is set to the same as the existing data.

    @param pBuffer
    Buffer containing the exif header.

    @param pExifSession
    The session to hold the exif data.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @copydoc exif_newsessionwithbuffer_example

    @sa
    exif_newSessionWithFile()\n
	exif_newSessionWithFileHandle()\n
    exif_newSessionWithBlank()\n

    @since 3.2

</member>
        <member name="M:exif_isExifFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param handle
    Filehandle to the image.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifBuffer()\n 
	exif_isExifFile()\n

    @since 3.4

</member>
        <member name="M:exif_isExifFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param filename
    Filename of the image.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifBuffer()\n 
	exif_isExifFileHandle()\n

    @since 3.2

</member>
        <member name="M:exif_isExifBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Checks if an image contains exif data.

    @param pBuffer
    Buffer containing the data.

    @param isExif
    True, if exif data exists, False otherwise.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    exif_isExifFile()\n  
	exif_isExifFileHandle()\n

    @since 3.2

</member>
        <member name="T:CTTagInfo">
@} 
@addtogroup fm_exif_general
@{

    @brief
    This structure holds the information for the exif tags.

    Note that this structure may be used as both input and output argument.
    For more information about exif tags, see the specification:
    "Digital Still Camera Image File Format Standard" v2.1, JEIDA.

    @since 3.2

</member>
        <member name="T:ctExifSession">
@file fm_exif.h
@brief Defines the interface of the Caps Feature Module: @a Exif
@ingroup fm_exif

@addtogroup fm_exif
@brief Utility functions for setting/getting Exif tags/content
@{
    @defgroup fm_exif_general General functions
    @defgroup fm_exif_thumbnail Thumbnail functions
    @defgroup fm_exif_gettag getTag functions
    @defgroup fm_exif_settag setTag functions
    @defgroup fm_exif_gpstags GPSTags functions
    @defgroup fm_exif_examples Examples
    @brief Example code for some typical use cases.

    @brief
    The session used to store the exif information.

    This is necessary for all editing of exif data, such as tags and 
    thumbnails.

    @since 3.2

</member>
        <member name="M:Nokia.Graphics.Imaging.AntiqueFilter.#ctor">
            <summary>
Creates a new AntiqueFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AntiqueFilter">
            <summary>
Produces the look of an old color photo.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RotationFilter.RotationAngle">
            <summary>
Rotation angle in degrees.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RotationFilter.#ctor(System.Double)">
            <summary>
Creates and initializes a new RotationFilter with a specified angle.
</summary>
            <param name="rotationAngle">
The rotation angle in degrees.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RotationFilter.#ctor">
            <summary>
Creates and initializes a new RotationFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RotationFilter">
            <summary>
Rotates the image around its center in a clock-wise direction. 
</summary>
            <remarks>
Dimensions of the resulting image are such that the rotated image fits snuggly inside it. 
<para>Areas outside the original image are rendered in black.</para><para>The resulting image dimensions may never exceed (16383, 16383). An exception will be thrown during rendering if this is the case.</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.MoonlightFilter.Clock">
            <summary>
Time of night in clock time [0, 23].
</summary>
            <remarks>
                <para>The filter has effect only at night time, between 17 and 7. </para>
                <para>Default is 0. </para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MoonlightFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new MoonlightFilter specifying the time of day.
</summary>
            <param name="clock">
Time of night in clock time [0, 23].
<para>The filter has effect only at night time, between 17 and 7. </para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MoonlightFilter.#ctor">
            <summary>
Creates and initializes a new MoonlightFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.MoonlightFilter">
            <summary>
Applies a moonlight effect to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.StorageFileImageSource.ImageFormat">
            <summary>
The format of the compressed image data.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.StorageFileImageSource.StorageFile">
            <summary>
The storage file containing compressed image data.
</summary>
            <remarks>
Setting this to a <see cref="T:Windows.Storage.IStorageFile" /> different from the one passed into the constructor means the image format will be auto-detected.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.StorageFileImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.StorageFileImageSource.#ctor(Windows.Storage.IStorageFile,Nokia.Graphics.Imaging.ImageFormat)">
            <summary>
Creates and initializes a new image source with a storage file with a known image format.
</summary>
            <param name="storageFile">The storage file that will provide the image data.</param>
            <param name="imageFormat">The image format of the image in the provided storage file.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.StorageFileImageSource.#ctor(Windows.Storage.IStorageFile)">
            <summary>
Creates and initializes a new image source with a storage file.
</summary>
            <param name="storageFile">The storage file that will provide the image data.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.StorageFileImageSource">
            <summary>
An image source created with a windows storage file.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ExposureFilter.Gain">
            <summary>
The desired exposure level. 
</summary>
            <remarks>
                <para>Positive values will make the image
brighter, negative values will make it darker.</para>
                <para>Range is [-1.0, 1.5], but for gamma mode the effect saturates 
at 1.0, which means that everything between [1.0, 1.5]
will be interpreted as 1.0. </para>
                <para>Recommended range for both gamma and natural mode for normal 
usage is [-1.0, 1.0]. 0.0 equals no change of exposure.</para>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ExposureFilter.ExposureMode">
            <summary>
The exposure mode.
</summary>
            <remarks>
Default is Natural.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ExposureFilter.#ctor(Nokia.Graphics.Imaging.ExposureMode,System.Double)">
            <summary>
Creates and initializes a new ExposureFilter with specified mode and gain.
</summary>
            <param name="exposureMode">
The exposure mode.
</param>
            <param name="gain">
The desired exposure level. 
<para>Positive values will make the image
brighter, negative values will make it darker.</para><para>Range is [-1.0, 1.5], but for gamma mode the effect saturates 
at 1.0, which means that everything between [1.0, 1.5]
will be interpreted as 1.0. </para><para>Recommended range for both gamma and natural mode for normal 
usage is [-1.0, 1.0]. 0.0 equals no change of exposure.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ExposureFilter.#ctor">
            <summary>
Creates and initializes a new ExposureFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ExposureFilter">
            <summary>
Adjust the brightness of an image using one of the modes in ExposureMode.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ExposureMode">
            <summary>
Exposure modes to use with the exposure filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ExposureMode.Gamma">
            <summary>Adjust the brightness of an image using a gamma correction curve.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ExposureMode.Natural">
            <summary>
Adjust the brightness of an image using a "natural" curve inspired
by a film characteristic curve. This mode preserves
the blacks in an image much better than the gamma mode.
</summary>
        </member>
        <member name="M:Nokia.Utility.BufferPolicyBase.GetCapacity">
            <summary>Called by Buffer. Get the maximum capacity in bytes of this buffer.</summary>
            <returns>Byte count that this buffer holds at most.</returns>
        </member>
        <member name="M:Nokia.Utility.BufferPolicyBase.GetLength">
            <summary>Called by Buffer. Get the used number of bytes of data in the buffer.</summary>
            <returns>Byte count being in use.</returns>
        </member>
        <member name="M:Nokia.Utility.BufferPolicyBase.SetLength(System.UInt32)">
            <summary>Called by Buffer. Set the used number of bytes of data in the buffer.</summary>
        </member>
        <member name="M:Nokia.Utility.BufferPolicyBase.OpenData">
            <summary>Called by Buffer. Open the underlying data for direct pointer access. The data remains open for pointer access for as long as the returned object lives.</summary>
            <returns>Object derived from BufferDataPolicyBase.</returns>
        </member>
        <member name="T:Nokia.Utility.BufferPolicyBase">
            <summary>Base class for IBuffer implementation policies.</summary>
            <remarks>
This class should be derived from in order to create an IBuffer implementation. It can then
be used by the Buffer class which handles all the WinRT/COM specifics.
<para>Make sure the OpenData method returns your custom BufferDataPolicyBase-derived object.</para></remarks>
        </member>
        <member name="M:Nokia.Utility.BufferDataPolicyBase.GetPointer">
            <summary>Returns a pointer to the data. The pointer is valid at least until this object is destroyed.</summary>
            <returns>A pointer to the data.</returns>
        </member>
        <member name="T:Nokia.Utility.BufferDataPolicyBase">
            <summary>Base class for IBufferByteAccess implementation policies.</summary>
            <remarks>
This class should be derived from and wraps logic "during" buffer data access.
An object of the class will be created when the data is starting to be accessed, and destroyed when
the data is no longer used. NOTE: This differs from normal WinRT semantics! But holds true for the SDK.
</remarks>
        </member>
        <member name="M:scbmatte_estimateMatte(CTBitmap*,CTBitmap*,CTBitmap*)">
@brief
Pixel value for foreground in trimap.

@brief
Pixel value for unknown area in trimap.

@brief
Pixel value for background area in trimap.

    @brief
    Seperates the foreground object from the background by estimating a matte.

    @param Image with foreground and background (CM_BGRA).
    @param Trimap specifying background, foreground and unknown (optionally invalid) area (CM_GRAY8).
    @param[out] Estimated matte, alpha mask where absolute foreground is 255 and absolute 
                background 0 (CM_GRAY8)

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_copyObjectTo(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,CTRect*,CTBitmap*)">
    @brief
    Copys an object in one source bitmap to another target bitmap using an alpha mask. The number of the object is gotten by using scbmask_createObjectRectangles.
    
    @param pImageSource
    The source image. Must be CM_BGRA8888.

    @param pMask
    The mask describing the objects in the source image. Values larger than zero are treated as objects. When the object is copied, the values are treated as alpha values. Must be CM_GRAY8.

    @param objectNumber
    The number on the object to be copied. This number match the index of the object in pRectangles (which is gottem from scbmask_CreateObjectRectangles)

    @param offset
    A point describing the offset of the object in the target image.

    @param pRectangles
    A vector of rectangles surrounding the objects in the image. Can be gotten with scbmask_createObjectRectangles.

    @param pImageTarget
    The target image. Must be CM_BGRA8888.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_createObjectRectangles(CTBitmap*,CTRect**,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Finds marked objects in a mask and returns rectangles surrounding the objects and the number of objects found.

    @param pMask The mask to analyze. Must be CM_GRAY8.

    @param [out] ppRectangles
    A pointer to a vector with rectangles, one for each object.

    @param [out] pNumObjects
    The number of objects found, and also the number of rectangles returned.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_regionLabeling(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Enumerates the regions in pMask and sets the values in pMask to a number assigned to each region (1, 2, ...). The values in pMask are overwritten.
    Zeroes are treated as not marked, and values greater than zero are considered beloning to a region.
    http://en.wikipedia.org/wiki/Connected-component_labeling
    
    @param pMask
    The mask to enumerate objects in. Must be CM_GRAY8.

    @param [out] pNumRegions
    The number of regions found.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_scaledSkeleton(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Zhang-Suen thinning process in downscaled mask.

    @param pMask
    Mask to apply thinning to, supported color format is CM_GRAY8.
    The image must be greater than the kernel size in both dimensions.

    
    @param scaleShift
    2_log of scale that mask should be downscaled before thinning is applied.

    @param iter
    Number of iterations. If INT_MAX complete thinning will be applied.

    @param mark
    The pixel value that should be considered as set, all other is zero.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_simpleSkeleton(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Zhang-Suen thinning process. 

    @param pMask
    Mask to apply thinning to, supported color format is CM_GRAY8.
    The image must be greater than the kernel size in both dimensions.

    @param iter
    Number of iterations. If INT_MAX complete thinning will be applied.

    @param mark
    The pixel value that should be considered as set, all other is zero.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_addUnknownRegion(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Given a black and white mask create a trimask by adding an unknown region at the border
    with size regionSize.

    TODO:

</member>
        <member name="M:scbmask_blurBorder(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,SCBMASK_KERNELSIZE)">
    @brief
    Applies a gaussian blur in a band across the mask border.
    Size of kernel is 7.

    @param pBitmap
    Image to blur, supported color format is CM_BGRA8888.
    The image must be greater than the kernel size in both dimensions.

    @param pMask
    Mask that defines the area to blur, pixel value of 255 is considered to be
    within the object and pixel value not 255 are considered to be outside. 
    Supported color format is CM_GRAY8.

    @param numPixelsToBlur
    The witth of the band in pixels across the border that should be blurred. The 
    band is centered in the border thuse half of the pixels are blured just inside the
    object and half just outside the object.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_grassFire(CTBitmap*)">

    @brief
    Applies the grass fire transform to a mask.

    @param pMask 
    The mask to modify. Must be CM_GRAY8
  
    @return CERR_OK on success.

</member>
        <member name="M:scbmask_floodFillInPlace(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*,CTVector,System.Byte,System.Byte,CTBuffer*)">
    @brief
    Flood fills all pixels of source color with destination color in the image beginning at the supplied point.
    Image must be CM_GRAY8.

    @param [out]
    pBitmap The bitmap to flood fill. Must be CM_GRAY8.
    @param [out]
    pCount The number of pixels filled.
    @param
    point Starting point for the flood fill.
    @param
    srcColor The color to replace.
    @param
    dstColor The color to replace with.

    @param pWorkBuffer 
    May be used if many calls are performed inorder to same sized bitmaps to increase performance. 
    This parameter is optional.
    The pWorkBuffer-&gt;pData will be freed with oslmem_free and allocated again with oslmem_alloc
    if it is too small to fit the required data,
    pWorkBuffer-&gt;size will be updated accordingly.

    @return CERR_OK on success.

</member>
        <member name="M:scbmask_floodFillForeground(CTBitmap*,CTVector,System.Byte,System.Byte,CTFloodFillStack*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
@brief
Flood fills a mask starting at the specified point.
Fills the output mask where the input mask has the foreground color.

</member>
        <member name="M:scbmask_floodFillNotBackground(CTBitmap*,CTVector,System.Byte,System.Byte,CTFloodFillStack*,CTBitmap*)">
    @brief
    Flood fills a mask starting at the specified point.
    Fills the output mask where the input mask does not have the background color.
 
    @param pMask 
    Input mask
    
    @param start 
    Starting point of the filling
    
    @param foreground 
    The foreground color
    
    @param background 
    The background color
    
    @param pFloodFillStack 
    May be used if many calls are performed inorder to same sized bitmaps to increase performance. 
    This parameter is optional. 
       
 @param pFilledMask Output mask. Should be filled with background color.

</member>
        <member name="M:scbmask_destroyFloodFillStack(CTFloodFillStack*)">
    @brief
    Destroys a flood fill stack.

    @param pFloodFillStack
    Stack to destroy.

</member>
        <member name="M:scbmask_createFloodFillStack(CTSize,CTFloodFillStack**)">
    @brief
    Creates a virtual stack for the flood fill operation

    @brief maskDims
    The dimensions of the mask to fill.

    @brief
    Created stack.

    @return CERR_OK on success.

</member>
        <member name="T:CTFloodFillStack">
@ingroup scbmask
@file scbmask.h
@brief Collection of internal functions for mask handling.

    @addtogroup scbmask
    @brief Collection of functions related to mask handling.

    @{

@brief
Virtual stack for flood fill algorithm inorder to implement a non-recursive
flood fill efficieantly.

</member>
        <member name="M:scbjpeg_progressiveTranscode(CTStream*,scanConfig!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTStream**)">
    @brief
    Converts a baseline jpeg to a progressive jpeg using the provided scan configuration.
    The output image use the same sub-sampling as the input.
    
    If the input is monochrome (YUV400) and the scan configuration is not, the resulting
    output will contain fewer scans than the scan configuration (since U and V scans
    have not been included).

    @param[in] pInput         The input image.
    @param[in] pConfig        The scan configuration.
    @param[in] nrScans        As input, the number of scans in the scan configuration.
                              As output, the number of buffers / scans in ppOutputs.
    @param[out] ppOutput      Array of output streams.
 
    @return
    CERR_OK or an error code.

</member>
        <member name="M:ctpyramidbordered_getClippedPlane(CTPyramidBordered*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Get a clipped level as a CTPlane

 @param pPyramid The pyramid
 @param level Level to get as a CTPlane
 @return A CTPlane pointing to a level in the pyramid.

</member>
        <member name="M:ctpyramidbordered_getDims(CTPyramidBordered*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Get dimensions (without borders) of a level in a CTPyramidBordered

 @param pPyramid The pyramid
 @param level The level to get dimensions for
 @return Clipped size of level.

</member>
        <member name="M:ctpyramidbordered_destroy(CTPyramidBordered*)">
Destroy a CTPyramidBordered.
@param pPyramid Object to destroy.

</member>
        <member name="M:ctpyramidbordered_createGaussian(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong,CTPyramidBordered**)">
 Create a gaussian pyramid, with the extra feature that an additional border is created along the edges of each
 bitmap in each pyramid level.

 @param pBitmap Input bitmap. Only the first plane is used. The first plane's color mode must be one of CM_Y, CM_U, CM_V, CM_GRAY8
 @param pBorders Array of border size in pixels for each level
 @param numLevels Number of levels in the pyramid
 @param ppPyramid Created pyramid

 @remark Borders are extended using pixel replication (as opposed to mirroring or wrap around)

 @return @c CERR_OK or an error code

</member>
        <member name="M:ctfieldaligngrid_resample(CTFieldAlignGrid*,CTFieldAlignGrid*,System.Single)">
 Initialize one CTFieldAlignGrid from another, using bilinear interpolation as a resampling method.

 @param[out] pGOut output grid
 @param[in] pGIn input grid
 @param[in] scale Coordinates in pGOut will be scaled this factor, relative to coordinates in pGIn

</member>
        <member name="M:scbopticalflow_generateGrid(CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector**,CTSize*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
 Generate a grid of pPtRef suitable for use with scbopticalflow_pyrLK

 @param[in] imageDims Dimensions of the input image
 @param[in] minPointsLargestAxis The minimum number of elements along the largest image axis
 @param[out] Optional. ppPtRef Out grid
 @param[out] Optional. pGridDims out grid dimensions
 @param[out] Optional. pGridDelta out grid delta between grid points.

 The grid is such that:
 - Grid origo is in 0,0.
 - 0 + (pGridDims-&gt;w-1) * *pGridDelta &gt;= imageDims.w
 - 0 + (pGridDims-&gt;h-1) * *pGridDelta &gt;= imageDims.h
 - if imageDims.w &gt; imageDims.h then pGridDims-&gt;w &gt;= minPointsLargestAxis
 - pGridDims-&gt;w &gt;= 2
 - pGridDims-&gt;h &gt;= 2
 .

 @return @c CERR_OK or an error code

</member>
        <member name="M:scbopticalflow_setAlignmentField(CTWarpGrid*,System.Single*,CTPointf*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single*,CTPointf*)">
 Set a warp given a base model (homography) and an array of points.

 @param[in/out] pWarpGrid pointer to a CTWarpGrid. Warp grid point algorithm: Use the homography as the stable truth. Use the
 input points that are close to the homography for adding a small residual displacement to the homography in the output warp grid.
 @param[in] pH pointer to a 3x3 row-major homography matrix defining the homography H.
 @param[in] pPtSrc Pointer to an array of points, that roughly obeys the homography H.
 @param[in] pResult Pointer to an array set to one of the OF_RES_ - defines, OF_RES_OK meaning that the point should be regarded,
 OF_RES_ERROR meaning that the point should be disregarded.
 @param[in] pInliers Pointer to an array set to true if the corresponding point is an inlier in the homography model estimation.
 @param[out] pStatus Optional. Pointer to an array that will be set to true if the point is used directly or false if it is interpolated.
 @param numPt Number of elements in pPtSrc and pInliers.
 @param[out] pMaxResidual. Optional. The maximum difference used between homography and displacement.
 @param[out] pPtDelta. Optional. The difference between homography and warp grid at each point. If != 0, must contain numPt elements.

 @return @c CERR_OK or an error code

 @remarks The following conditions apply:
  - pWarpGrid-&gt;pPt must be allocated.
  - pWarpGrid-&gt;nX * pWarpGrid-&gt;nY == numPt

</member>
        <member name="M:scbopticalflow_computeProjectionMatrix(CTVector*,CTPointf*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Single*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
 Estimate a projection matrix (homography) given arrays of corresponding points

 @sa scbopticalflow_pyrLKEx(), scbopticalflow_pyrLK()

 @par[in] pPtRef Coordinates in reference image.
 @par[in] pPtSrc Coordinates in source image corresponding to the points in pPtRef
 @par[in] pResult Array of statuses for correspondence between pPtSrc and pPtRef.
 @par numPt Number of points
 @par[out] pSuccess Optional. Set to true if projection estimation succeeded, false if it failed.
 @par[out] pProjection. Projection, given as a 3x3 row-major matrix.
 @par[out] pInliers. Set to true if the corresponding points are inliers in the projection estimation, otherwise false.

 @return @CERR_OK, also if projection matrix could not be computed. An error if for example memory could not be allocated.

</member>
        <member name="M:scbopticalflow_pyrLKRefEx2(CTBitmap*,CTBitmap*,CTVector*,CTPointf*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 Calculate optical flow using pyramid version of Lucas Kanade algorithm
 This function calculates optical flow on
 a user defined set of points, as opposed to for example scbopticalflow_pyrLK.

 @par[in] pReference "reference" image
 @par[in] pSource "source" image
 @par[in] pPtRef Coordinates in reference image.
 @par[in/out] pPtSrc Main result of this function. Coordinates in source image
 corresponding to the points in pPtRef. If srcContainsInitialPos is true,
 these coordinates are also used as initial position.
 @par numPt Number of points, i.e. number of elements in pPtRef, pPtSrc, pResult
 @par numLevels Number of pyramid levels. minimum 1.
 @par pWindowSize Array of numLevels items. Width of window at level k is: 2 * pWindowSize[k] + 1
 @par numIterations Number of newton rapson iterations performed for a point at each level.
 @par srcContainsInitialPos. See pPtSrc. false for scbopticalflow_pyrLKRef and scbopticalflow_pyrLKRefEx.
 @return @CERR_OK or an error code

</member>
        <member name="M:scbopticalflow_pyrLKEx(CTBitmap*,CTBitmap*,CTWarpGrid*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Void*,=FUNC:System.Void(System.Void*,CTFieldAlignGrid*,CTPlane,CTPlane))">
 Calculate optical flow using pyramid version of Lucas Kanade algorithm

 @par[in] pReference "reference" image
 @par[in] pSource "source" image
 @par[in] pPtRef Coordinates in reference image.
 @par[out] pPtSrc Main result of this function. Coordinates in source image
 corresponding to the points in pPtRef
 @par[out] pResult Status code per point. One of OF_RES_-defines
 @par numPt Number of points, i.e. number of elements in pPtRef, pPtSrc, pResult
 @par numLevels Number of pyramid levels. minimum 1.
 @par pWindowSize Array of numLevels items. Width of window at level k is: 2 * pWindowSize[k] + 1
 @par numIterations Number of newton rapson iterations performed for a point at each level.

 @return @CERR_OK or an error code

</member>
        <member name="M:scbopticalflow_registerGrid(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,CTWarpGrid**,CTWarpGrid**,System.Single*)">
    Register a bitmap to align with a reference bitmap using pyramid Lucas-Kanade method.

     @param[in] pSrc Source image
     @param[in] pRef Reference image
     @param[out] pNumPoints Optional. Number of image points that optical flow was calculated for. Guaranteed to be &gt; 0.
     @param[out] pNumInliers Optional. Number of image points for which the calculated optical flow was consistent with the internal motion model.
                 Output of 0 means that the registration failed. A low ratio, i.e. 10%, for numInliers/numPoints indicate an uncertain match.
     @param[out] ppWarp Optional. Resulting warp grid.
     @param[out] ppDelta Optional. Correction term for the homography. The It can have arbitrary delta and dimensions.
     @param[out] pH Optional. Homography

    @return @c CERR_OK or an error code

</member>
        <member name="M:scbopticalflow_registerImageEx2(CTBitmap*,CTBitmap*,CTBitmap*,CTRect*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Register and transform a bitmap to align with a reference bitmap using pyramid Lucas-Kanade method.

    All bitmaps are given in CM_YUV420P

     @param[out] pDst Output image. Same size as pRef
     @param[in] pSrc Source image. Will be rendered to pDst so that it is aligned with pRef.
     @param[in] pRef Reference image
     @param[out] pCropArea Optional. Rectangle within pDst that contains only valid pixels.
     @param[out] pNumPoints Optional. Number of image points that optical flow was calculated for. Guaranteed to be &gt; 0.
     @param[out] pNumInliers Optional. Number of image points for which the calculated optical flow was consistent with the internal motion model.
                 Output of 0 means that the registration failed. A low ratio, i.e. 10%, for numInliers/numPoints indicate an uncertain match.
     @param[in] applyColorCorrection. If true color correction is applied to the final result. In scbopticalflow_registerImage, scbopticalflow_registerImageEx set to false.

     @return @c CERR_OK or an error code

</member>
        <member name="M:scbgradientfield_registerPyramids(CTImagePyramid*,CTImagePyramid*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTVector*)">
 Registers images using dominant gradient directionalities.

 This method is insensitive to exposure changes as well as lighting changes (such as flash/no-flash) and inversions.

 Input pyramids must be of equal size, be gaussian pyramids, and have color format CM_GRAY8.
 The number of levels of the pyramids must be &gt;= scbmath_ilog2(maxTranslation);

 @param pPyr1 Input image 1
 @param pPyr2 Input image 2
 @param maxTranslation Largest translation to search for.
 @param pTranslation The translation of image 2 with respect to image 1. I.e. the top left point of image 2 should be
        placed at the point described by pTranslation in image 1 to achieve a match.

</member>
        <member name="M:scbgradientfield_registerBitmaps(CTBitmap*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTVector*)">
 Registers images using dominant gradient directionalities.

 This method is insensitive to exposure changes as well as lighting changes (such as flash/no-flash) and inversions.

 Input images must be of equal size and have color format CM_GRAY8.

 @param pImage1 Input image 1
 @param pImage2 Input image 2
 @param maxTranslation Largest translation to search for.
 @param pTranslation The translation of image 2 with respect to image 1. I.e. the top left point of image 2 should be
        placed at the point described by pTranslation in image 1 to achieve a match.

</member>
        <member name="M:scbgradientfield_registerImages(CTImage*,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTVector*)">
 Registers images using dominant gradient directionalities.

 This method is insensitive to exposure changes as well as lighting changes (such as flash/no-flash) and inversions.

 Input images must be of equal size and have color format CM_GRAY8.

 @param pImage1 Input image 1
 @param pImage2 Input image 2
 @param maxTranslation Largest translation to search for.
 @param pTranslation The translation of image 2 with respect to image 1. I.e. the top left point of image 2 should be
        placed at the point described by pTranslation in image 1 to achieve a match.

</member>
        <member name="M:scbgradientfield_registerImagesEx(CTImage*,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTVector*,System.Single*)">
 Registers images using dominant gradient directionalities.

 This method is insensitive to exposure changes as well as lighting changes (such as flash/no-flash) and inversions.

 Input images must be of equal size and have color format CM_GRAY8.

 @param pImage1 Input image 1
 @param pImage2 Input image 2
 @param maxTranslation Largest translation to search for.
 @param pTranslation The translation of image 2 with respect to image 1. I.e. the top left point of image 2 should be
        placed at the point described by pTranslation in image 1 to achieve a match.
 @param pLikeness the likeness between the two images as a value between 0 and 1 where 1 means perfect similarity.

</member>
        <member name="M:scbmedianthreshold(CTImage*,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTVector*)">
Calculates the shift between the image with median threshold.
The method is insensitive to exposure changes and should be
used when large exposure changes occur between images
@param pImage1st Input image
@param pImage2nd Input image
@param maxTranslation Largest possible translation between images
@param pPos [out] Translation in pixels.

@return CERR_OK if successful, or CERR_MEMALLOC_FAILED if memory 
allocation failed and CERR_OPERATION_FAILED if method failed


</member>
        <member name="M:scbimageregistration_cumSum(CTImage*,CTBuffer32*,CTRect*)">
@brief
Cumulative sum of image

@param pImage
the image to sum. Must be CM_GRAY8.

@param pCumSum
The output. Allocated by caller. Size must be pRects's (width+1)*(height+1)*4

@param pRect
Area to sum in pImage. Must fit within image.

</member>
        <member name="M:GETSUM(System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
@brief
Calculates the sum of an area from a cumulative sum buffer.
The function will calculate the sum of an area defined by
the corners A, B, C and D in the following configuration.

    D B
    C A

This will translate to:
(A-B)-(C-D)

@param pData32  Pointer to the cumulative sum buffer.
@param rRow     The row coordinate of the upper left hand corner.
@param rCol     The column coordinate of the upper left hand corner.
@param tW       The width of the area.
@param tH       The height of the area.
@param imW      The width of the cumulative sum image.

@return The sum of the area in the cumulative sum buffer

</member>
        <member name="M:imageregistration_computeAbsoluteMotion(CTImage*,CTImage*,System.Single*,System.Single*)">
Calculates the absolute movement between two overlapping blocks dividing
the source block into sub blocks that resides on the sides and the center
of the image and calling the imageregistration_calculateLargeShift() on each
sub block adding the absolute value of each and calculate the mean.

@param origBlock
@param fragBlock
@param _dx
@param _dy
@param blockDims

@return CERR_OK if successful, or CERR_MEMALLOC_FAILED if memory
allocation failed and CERR_OPERATION_FAILED if displacement is too uncertain
or too grand


</member>
        <member name="M:imageregistration_computeTranslationOnTheSides(CTImage*,CTImage*,System.Single*,System.Single*)">
Calculates the displacement shift between two overlapping blocks dividing
the source block into sub blocks that resides on the sides of the image
are and calling the imageregistration_calculateLargeShift() on each sub block.

@param origBlock
@param fragBlock
@param _dx
@param _dy
@param blockDims

@return CERR_OK if successful, or CERR_MEMALLOC_FAILED if memory 
allocation failed and CERR_OPERATION_FAILED if displacement is too uncertain
or too grand


</member>
        <member name="M:imageregistration_computeTranslation(CTImage*,CTImage*,System.Single*,System.Single*)">
    Calculates the displacement shift between two overlapping blocks dividing
    the source block into several sub blocks and calling the 
    imageregistration_calculateLargeShift() on each sub block.

    @param origBlock
    @param fragBlock
    @param _dx
    @param _dy
    @param blockDims

    @return CERR_OK if successful, or CERR_MEMALLOC_FAILED if memory 
    allocation failed and CERR_OPERATION_FAILED if displacement is too uncertain
    or too grand


</member>
        <member name="M:imageregistration_calculateLargeShift(CTImage*,CTImage*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,CTRect)">
    Calculates the displacement shift between two overlapping blocks.
    
    @param origBlock    
    @param fragBlock
    @param _dx
    @param _dy
    @param width
    @param height
    
    @return CERR_OK if successful, or CERR_MEMALLOC_FAILED if memory 
    allocation failed.


</member>
        <member name="M:scbimagefilter_scaledZoom(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Zoom like blur

 @param pInBitmap Source bitmap from which to load data
 @param invLength Defines length of zoom. 1 longest 8 shortest
 @param n         The number of half down scales in which zoom should 
                  be performed.
 @rem Supported color formats for input and output: CM_BGRA8888
 @return CERR_OK or an error code

</member>
        <member name="M:scbimagefilter_zoom(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
 Zoom like blur

 @param pInBitmap Source bitmap from which to load data
 @param pOutPlane Destination bitmap in which to store data
 @param invLength Defines length of zoom. 1 longest 8 shortest
 @rem Supported color formats for input and output: CM_YUV420P CM_BGRP, CM_BGRA8888 and CM_GRAY8
      Input and output must have same color formats.
 @return CERR_OK or an error code

</member>
        <member name="M:scbimagefilter_laplacian(CTPlane,CTPlane)">
    Absolute value of filtering with a
            1     4     1
    1/6 *   4   -20     4
            1     4     1
    kernel. Borders are replicated.

    Input and output in GRAY8 or equivalent.

</member>
        <member name="M:scbimagefilter_var5(CTPlane,CTPlane)">
 * Calculate variance over a 5x5 block sliding across the image. The variance is clamped to the range 0..255.
 *
 * @par pIn inPlane Source plane from which to load data. CM_GRAY8 or equivalent
 * @par pOut outPlane Output plane, must same dimensions as input. CM_GRAY8 or equivalent

 * @return CERR_OK or an error code

</member>
        <member name="M:scbimagefilter_derivShar(CTPlane*,CTPlane*,CTPlane*)">
 Derivate with respect to x and y, using the Shar operators
 [-3 0 3; -10 0 10; -3 0 3] and [-3 -10 -3; 0 0 0; 3 10 3].
 The result is _not_ divided by 32.

 @param pInPlane Source plane from which to load data. CM_GRAY8 or equivalent
 @param pOutHorz Destination plane for derivation with respect to x. CM_GRAY16. Treated as a CTint16.
 @param pOutVert  Destination plane for derivation with respect to y. CM_GRAY16. Treated as a CTint16.
 The dimensions of pOutPlane must match those of pInPlane. pOutPlane will set to zero in the 1px wide border pixels area.

 @return CERR_OK or an error code

</member>
        <member name="M:scbimagefilter_gauss7(CTPlane*,CTPlane*,System.Byte*)">
 Perform a 7x7 tap gaussian convolution with stddev 2

 @param pInPlane Source plane from which to load data
 @param pOutPlane Destination plane in which to store data
 @param pWorkBuf Pointer to a valid temporary buffer of size
                 3 * SCBIMAGEFILTER_BLOCK_DIM * SCBIMAGEFILTER_BLOCK_DIM

 @rem Supported color formats for input and output: CM_Y, CM_U, CM_V and CM_GRAY8

 @return CERR_OK or an error code

</member>
        <member name="M:scbimagefilter_meanOpenClose(CTPlane*,CTPlane*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@} 
 Average of morphological operations open and close

 @param pInPlane Source plane from which to load data
 @param pOutPlane Destination plane in which to store data
 @param pWorkBuf Pointer to a valid temporary buffer of size
                 3 * SCBIMAGEFILTER_BLOCK_DIM * SCBIMAGEFILTER_BLOCK_DIM
 @param halfKernelSize the current kernel parameter. Must be 2 or 8.

 @rem Supported color formats for input and output: CM_Y, CM_U, CM_V and CM_GRAY8

 @return CERR_OK or an error code

</member>
        <member name="M:util_isValidColorModeDesc(CTColorModeDesc*)">
    @brief Checks if a color mode descriptor describes a valid color mode and is
    internally consistent (ie. planar color modes have multiple planes
    defined).
 
    @param pDesc    Color mode descriptor to check
 
    @return Boolean indicating whether the descriptor is valid.

</member>
        <member name="M:util_getColorModeDesc(CTColormode,CTColorModeDesc*)">
    @brief Returns the entire color mode descriptor for a specific color mode.
 
    @param colorMode Color mode to retrieve descriptor for.
    @param pDesc     Pointer to a color mode descriptor.
 
    @return 
    @li CERR_OK if successful
    @li CERR_INVALID_COLORMODE if the supplied color mode was invalid
    @li CERR_INVALID_PARAMETER if parameters to the function were otherwise
    invalid.

</member>
        <member name="M:util_getSimpleScanline(CTColormode,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Calculates a scanline according to the scanline definition.
 
    This means that the scanline is defined by the needed buffer size divided
    by the number of rows. This is true for interleaved formats, but for planar
    formats, each plane has its own scanline, and this function does not help
    to evaluate those planes.
 
    @param colorMode 
    Color mode from which to generate a scanline. Note that the color mode may
    pose requirements on the scanline in form of alignment and so on, as well as
    the number of bits per pixel required.
 
    @param width
    Width of the bitmap
 
    @return Width in bytes of a buffer large enough to hold all of the pixel
    data, or zero if an error occured.
 
    @note This function can be used to get an appropriate scanline for
    interleaved color modes. Knowing the "global" scanline is generally not
    useful for planar modes.

</member>
        <member name="M:util_getColorModeAlias(CTColormode)">
    @brief Returns an alias to the specified color mode.
 
    An alias is defined as the color mode without otherwise describing features.
 
    Most color modes do not have aliases.
 
    @param colorMode    Color mode to retrieve alias for.
 
    @return
    Alias of the color mode, or CM_UNDEFINED if color mode is not valid.

</member>
        <member name="M:util_getSubSamplingFactor(CTSubSampling,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns the sub sampling factor in horizontal and vertical direction for a given image plane

    @param CTColor
    @param plane index of plane

    @return Vector with x as horizontal and y as vertical subsampling factor.

    @remark For unknown subsampling factor or undefined subsampling factor and plane combination,
    1 is returned for both x and y.

</member>
        <member name="M:util_getSubSampling(CTColormode)">
    @brief Returns the sub sampling associated with a color mode.
 
    @param colorMode    Color mode to check
 
    @return Sub sampling mode of the specified color mode or 
    SCB_SUBSAMPLING_UNKNOWN if an error occured.

</member>
        <member name="M:util_getPlanes(CTColormode,CTColorModePlane*)">
    @brief Returns information about the number of planes defined by a
    specific color mode, as well as the layout of each plane.
 
    @param colorMode    Color mode to check
    @param pPlane       Array of color mode planes
 
    @return Number of defined planes, or zero if an error occured.
 
    @note The array of color mode planes must be at least MAX_PLANE_COUNT
    long.

</member>
        <member name="M:util_isValidColorMode(CTColormode)">
    @brief Checks if a color mode is correctly defined. This is mostly used as
    an internal consistency check to verify that the supplied color mode is ok
    to use.
 
    @param colorMode Color mode to check
 
    @return True if the specified color mode is ok to use.

</member>
        <member name="M:util_isAlphaColormode(CTColormode)">
    @brief
    Check if color mode has alpha information
 
    @param colormode Colormode of image
 
    @return true if color mode has alpha information otherwise false.

</member>
        <member name="M:util_getPixelBitSize(CTColormode)">
    @brief Number of bits per pixel
 
    Bits per pixel is the number of bits needed to represent a single pixel.
    For many color modes, in particular interleaved (only one plane) this
    is straight forward to define.
 
    For planar color modes, the bits per pixel is most easily defined as the
    average number of bits per each pixel in an infinitely large bitmap.
 
    This rather complex definition comes from the fact that the number of bits
    needed for a sub sampled bitmap of odd dimensions divided by the number of
    pixels is not (necessarily) an integer.
 
    An example (sizes as cols x rows):
    YUV422 1x1 pixels, takes 24 bits --&gt; 24 bpp.
    YUV422 1x2 pixels, takes 32 bits --&gt; 16 bpp (what the function returns).
    YUV422 1x3 pixels, takes 56 bits --&gt; 18.67 bpp.

    @param colormode Colormode to check for bpp
 
    @return Number of bits per pixel.
 
    @note Bits per pixel is normally only useful for simple color modes. 
    Although it is defined for planar formats as an average over the separate
    image planes, subsampling effects may lead to situations where the bit size
    is not suitable for scanline calculations. Use ::util_calcMinimumByteSize
    for size calculations.

</member>
        <member name="M:util_calcMinimumByteSize(CTSize,CTColormode)">
    @brief Calculates minimum image size in bytes
 
    Bitmap size is calculated by splitting each bitmap into the necessary
    planes and calculating the minimum size for each, then summing those
    partial sizes.
 
    @param dims Size of image
    @param colormode Color mode of the image
 
    @return Number of bytes necessary to store image or zero if an error
    occured due to, for instance, invalid input.


</member>
        <member name="M:util_isValidImage(CTImage!System.Runtime.CompilerServices.IsConst*)">
    @brief Checks if image is valid.
 
    A valid image means that the image:
    @li Has a valid (as defined by util_isValidBuffer) buffer.
    @li Has a valid color mode (as defined by util_isValidColorMode), or has 
    color mode set to CM_UNDEFINED.
    @li Both dimensions are larger than zero.
    @li Both dimensions are smaller than 16384 current max image size.
    @li The scanline is at least wide enough so that the number of bits per
    pixel times width, rounded up to a byte, is contained. This check is omitted
    if color mode is set to CM_UNDEFINED.
    @li Total buffer size must be at least scanline times height bytes.
 
    @param pImage
    Pointer to an image.
 
    @return true if image is valid

</member>
        <member name="M:util_strcmp(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Compare two char strings. Use scbstr_compare() for comparison of DCHAR strings.

    @param pString1
    Pointer to an initialized char string.

    @param pString2
    Pointer to an initialized char string.

    @return     
    - less than 0:	pString1 is less than pString2
    - equal to 0:	pString1 is the same as pString2
    - larger than 0:	pString1 is greater than pString2

    @sa
    scbstr_compare();

</member>
        <member name="M:util_binarySearch(System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void!System.Runtime.CompilerServices.IsConst*,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*),System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get the position of @c pElement in @c pElementArray.

    @param pElementArray
    Pointer to an initialized array.

    @param arrayLength
    The number of elements in @c pElementArray.

    @param elementSize
    The size in bytes of the element type in the array.

    @param pElement
    Pointer to an initialized element, holding the value of the element to get the position for.

    @param compareFunc
    Pointer to callback function used for the compare. See @c typedef compareFunc for more info.

    @param[out] pPosition
    Pointer to an initialized @c ::CTint. On return it contains the position that matched @c pElement. If no match was found the logical insert position will be returned.

    @return
    @c CERR_OK if successful. 
    @c CERR_ITEM_NOT_FOUND if there is no element matching @c pElement

</member>
        <member name="D:compareFunc">
    @brief
    Comparison function callback definition, for use with util_binarySearch function.

    @param pElement1
    Pointer to the key for the search.

    @param pElement2
    Pointer to the array element to be compared with the key.

    @return
    Must return:
    - less than 0:	pElement1 is less than pElement2
    - equal to 0:	pElement1 is the same as pElement2
    - larger than 0:	pElement1 is greater than pElement2

</member>
        <member name="M:util_quickselect(System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong)">
	Compute median value using Hoares selection algorithm, also known as Quickselect.
    If there is an even number of values, this algorithm returns the lower of the two middle values.

    @param array 
    The array of values to get the median from. Note that the array is not const, ie 
    the order of the elements in the array may change.
    @param count Number of values in the array.  

    @return The median if an odd number of values or the largest value in the array below the median 
    if an even number of values or 0 if count is 0. 

</member>
        <member name="M:util_quickSort32(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*))">
Implements standard quick sort with 32bits parameters.

@param base
Start of target array.

@param num
Array size in elements.

@param width
Element size in bytes.

@param comp
Comparison function callback. The first parameter to this function is a 
pointer to the key for the search and the second parameter is a pointer 
to the array element to be compared with the key.

</member>
        <member name="M:util_quickSort(System.Void*,System.UInt16,System.UInt16,=FUNC:System.Int32!System.Runtime.CompilerServices.IsLong(System.Void!System.Runtime.CompilerServices.IsConst*,System.Void!System.Runtime.CompilerServices.IsConst*))">
Implements standard quick sort.

@param base
Start of target array.

@param num
Array size in elements.

@param width
Element size in bytes.

@param comp
Comparison function callback. The first parameter to this function is a 
pointer to the key for the search and the second parameter is a pointer 
to the array element to be compared with the key.

</member>
        <member name="M:util_rectFitVertical(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
	Computes the widest rectangle that can be fitted within the union of two rectangles
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_rectFitHorizontal(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
	Computes the highest rectangle that can be fitted within the union of two rectangles
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_rectUnion(CTRect!System.Runtime.CompilerServices.IsConst*,CTRect!System.Runtime.CompilerServices.IsConst*,CTRect*)">
@brief Number of items in an array

	Computes the union between two rectangles.
	
	@param r1	A Rectangle
	@param r2	Another Rectangle
    @param rectOut A pointer to the output rectangle
	
    @return a RectIntersect


</member>
        <member name="M:util_shrinkToAspect(CTSize,CTSize,CTSize*)">
    @brief
    Computes the largest CTSize that is smaller than the specified original
    size, but has the same aspect ratio as the aspect parameter.

    @param original     Original size
    @param aspect       Target aspect ratio
    @param pRetracted   Pointer to a CTSize where the result is stored.

    @return An error code, or CERR_OK if successful.

    @note
    This function can only operate on sizes where both dimensions are larger 
    than zero.

</member>
        <member name="M:util_expandToAspect(CTSize,CTSize,CTSize*)">
    @brief
    Returns the smallest CTSize that is larger than the original, but has the
    same aspect ratio as the aspect parameter.

    @param original     Original size
    @param aspect       Target aspect ratio
    @param pExpanded    Pointer to a CTSize where the result is stored.

    @return An error code, or CERR_OK if successful.

    @note
    This function can only operate on sizes where both dimensions are larger 
    than zero.

</member>
        <member name="M:util_isValidImageDims(CTSize)">
    @brief Checks if a set of dimensions is valid to use as image/bitmap size.
 
    @param dims CTSize variable to check
 
    @return Boolean which indicates if the dims can be used.

</member>
        <member name="M:util_destroyImage(CTImage*)">
    @brief 
    Destroys a previously created @c CTImage object.

    @param pImage
    The @c CTImage object to destroy. This pointer is invalid when the function
    returns.

    @since 3.7

</member>
        <member name="M:util_createImage(CTBuffer*,CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,CTColormode,CTImage**)">
    @brief 
    Creates a @c CTImage object.

    @param pPixels
    Optional argument, a @c CTBuffer pointer which will be set as the pixel buffer 
    of the image. Ownership of the buffer is taken over by the image and will
    be deallocated when the image is destroyed. If this argument is set to @c NULL
    a buffer will be allocated internally for the image.

    @param dims
    The dimensions in pixels of the image.

    @param scanline
    The width in bytes of one scanline within the image.
 
    For a planar pixel format, the scanline specifies the number of bytes needed
    for the pixel buffer for a single row of pixels. That is, the total needed
    size for the image is scanline * height bytes.
 
    For an interleaved image the above holds true, but in this special case, the
    scanline also means the number of bytes for each row of pixels.
 
    If set to zero, an appropriate scanline will be assigned to the image. Note
    that if pixel data is provided with the pPixels parameter, this may not match
    the intended scanline, and the image will appear corrupted. If color mode is
    set to CM_UNDEFINED, the scanline must be set to a non-zero value.

    @param format
    The color mode format of the image. See @c CTColormode enumeration. If this 
    parameter is CM_UNDEFINED an image with a size of scanline * height bytes is
    created.

    @param ppImage
    (OUT) The created @c CTImage object returned as an output argument. If the
    function fails this argument is NULL.

    @remarks

    The arguments passed to this function are precisely corresponding with
    the members of @c CTImage. See documentation of this type for more info.
 
    Note that it may be very hard to correctly specify the scanline parameter 
    for an image when the color mode is subsampled. Due to this, it is strongly
    recommended to set the scanline to zero.
    \n
   
    @return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.0

</member>
        <member name="M:util_getLegacyBitmapLayout(CTSize,CTColormode,System.Int32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Calculate ctbitmap properties that are maximally compatible with
    ctimage.

    @param dims
    The dimensions in pixels of the image.

    @param format
    The color mode format

    @param[in/out] scanlines
    Array of scanlines.
    If set to 0, suitable scanlines will be calculated.

    @param[out] offsets
    Array of offsets for each plane of the color format.
    offsets[0] is always 0.

    @param[out] pNumScanlines
    Number of planes for this CTColormode.

    @param[out] pTotalSize
    Total size in bytes of the bitmap if it is in one contigous buffer.

    @return CERR_OK or an error code.

    @remark This function does not guarantee that a CTImage can be created from a
    CTBitmap (or other container) using its output. The function guarantees that if
    a compatible layout is possible, given the input parameters, it is the output of
    this function.

</member>
        <member name="M:util_isValidBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief Verifies if a CTBuffer object is valid.
 
    Specifically, a valid buffer must satisfy:
    @li The pBuffer pointer itself must not be null.
    @li Size must be larger than zero.
    @li The data field must not be null.
     
    @param pBuffer      The CTBuffer to validate.
 
    @return true if the CTBuffer is valid.
 
    @note In debug builds, additional checks are performed with asserts, which 
    make sure that the data points to a continuous block of allocated memory 
    which is at least size bytes long.

</member>
        <member name="M:util_destroyBuffer(CTBuffer*)">
    Destroys a CTBuffer object.

    @param buffer  The CTBuffer to destroy.

</member>
        <member name="M:util_createBufferCopy(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**)">
    Allocates a CTBuffer object identical to the input buffer in size and
    contents.

    @param original  The CTBuffer object to copy.
    @param copy      Address of a CTBuffer pointer which will receive
                     the copied buffer.
    @remarks
    
    The resulting buffer should be destroyed using util_destroyBuffer() 
    when no longer needed.

    @return CERR_OK if successful, or an error code on failure.

</member>
        <member name="M:util_createBuffer(System.UInt32!System.Runtime.CompilerServices.IsLong,CTBuffer**)">
	Allocates a CTBuffer object with the given size.
	
	@param size         The size in bytes to allocate for the buffer.
    @param out_buffer   Address of a CTBuffer pointer which will receive
                        the new object.

    @remarks
    
    The created buffer should be destroyed using util_destroyBuffer() when
    no longer needed.

    @return CERR_OK if successful, or an error code on failure.

</member>
        <member name="M:util_stackSetAt(CTStack*,System.Void!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
Overwrite item at index with a new node

This operation DBC_REQUIRES that the index is valid for the current stack size.


</member>
        <member name="T:CTStack">
@defgroup util_apiref scbutil API Reference
@{

    @file scbutil.h

    TODO: $PublicHeaderFileDescription$

</member>
        <member name="M:scbimagemath_sobel(CTBitmap*,CTPlane*)">
    Sobel derivative of image.

    @param pImage Image that should be differentiated Supported color CM_BGRA8888.
    @param sobel Sobel derivatives (B_x B_y G_x B_y R_x R_y).

    @return
    - CERR_OK on success.

</member>
        <member name="M:scbimagemath_drawLineEx(CTPlane,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTColor)">
    Draw a line. Coordinates are allowed to be outside the plane.

    @param plane Only supports 4Bpp formats, such as CM_ARGB8888, CM_AYUV444 etc.
    @param x1 coordinate
    @param y1 coordinate
    @param x2 coordinate
    @param y2 coordinate
    @param c color of line. Color is not transformed to the plane color, but is used as is.

    @note Implementation not suitable for performance-limited tasks.

</member>
        <member name="M:scbimagemath_drawLine(CTPlane,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Draw a line. Coordinates are allowed to be outside the plane.

    @param plane Only supports CM_GRAY8, CM_Y, CM_U, CM_V.
    @param x1 coordinate
    @param y1 coordinate
    @param x2 coordinate
    @param y2 coordinate
    @param v color of line

    @note Implementation not suitable for performance-limited tasks.

</member>
        <member name="M:ctpolygonalpath_destroy(CTPolygonalPath*)">
    Destroys a path created by ctpolygonalpath_createFromMask

    @param pPath path to be destroyed

</member>
        <member name="M:ctpolygonalpath_createFromMask(CTBitmap*,CTPolygonalPath**)">
    @brief
    Create a path of line segments to encircle the object in the supplied bitmap.

    @param
    pMask A mask bitmap in CM_GRAY8 with one solid object. 0 is considered background. != 0 is considered foreground.
    @param [out]
    ppPath The path that encircles the object in the supplied bitmap.

    @return
    - CERR_OK on success.
    - CERR_OPERATION_FAILED if no object was found. Note that CERR_OPERATION_FAILED can also be returned in other situations than "no object found".
    - Other error codes.
    .

</member>
        <member name="M:scbimagemath_gradient(CTBitmap*,CTBuffer*,CTBuffer*,CTBuffer*,CTBitmap*)">
  @brief
 Applies a gradient map to an image

 @param pImageIn input image

 @param pR look-up table for the red values of the gradient color to be applied.
           Must have 256 items since the index is the luminance.    

 @param pG look-up table for the green values of the gradient color to be applied.
           Must have 256 items since the index is the luminance.    

 @param pB look-up table for the blue values of the gradient color to be applied.
           Must have 256 items since the index is the luminance.    

 @param pImageOut Output image

  Supported color modes: CM_ARGB8888, CM_YUV420P.


</member>
        <member name="M:scbimagemath_overlay(CTBitmap*,CTBitmap*,System.Byte,CTBitmap*)">
  @brief
 Overlays two images

 @param pImageInA First input image

 @param pImageInB Second input image

 @param opacity blend value for result image, inside [0-255]

 @param pImageOut Output image

  Supported color modes: CM_ARGB8888, CM_YUV420P.


</member>
        <member name="M:scbimagemath_multiply(CTBitmap*,CTBitmap*,System.Byte,CTBitmap*)">
  @brief
 Multiplies two images

 @param pImageInA First input image

 @param pImageInB Second input image

 @param opacity blend value for result image, inside [0-255]

 @param pImageOut Output image

  Supported color modes: CM_ARGB8888, CM_BGRA8888, CM_RGBA8888, CM_RGB888, CM_BGR888, CM_YUV420P.
  If the config is YUV420P, only the luminance is multiplied, and the chrominance is the one of imageA.


</member>
        <member name="M:scbimagemath_alphaBlend(CTBitmap*,CTBitmap*,System.Byte,CTBitmap*)">
  @brief
 Blends to images bitewise

 @param pImageInA First input image

 @param pImageInB Second input image

 @param alpha_in alpha blend value for first image

 @param pImageOut Output image


</member>
        <member name="M:scbimagemath_warpBitmap(CTBitmap*,CTBitmap*,CTWarpGrid!System.Runtime.CompilerServices.IsConst*)">
 Warp image using bilinear interpolation from a warp grid

 Supported color modes
 - CM_AYUV4444
 - CM_YUV420P
 .

 @param pDst output image
 @param pSrc input image
 @param pWarpGrid warp grid. Only delta == 16 supported.

 The dimensions of the bitmap and the warp grid must satisfy:
   pWarpGrid-&gt;nX &gt;= ((ctbitmap_getDims(pDst).w - 1) / pWarpGrid-&gt;delta) + 2
   pWarpGrid-&gt;nY &gt;= ((ctbitmap_getDims(pDst).h - 1) / pWarpGrid-&gt;delta) + 2

 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_setHomographyInv(CTWarpGrid*,System.Single*)">
 Set warp grid given a 3x3 homography matrix

 Sets values on the pWarpGrid-&gt;pPt. Roughly speaking, the warp grid is set to
 inv(H) * not-warped-pPt. The projected points must not be behind camera or at infinity.

 @param pWarpGrid Pointer to a CTWarpGrid with allocated pWarpGrid-&gt;pPt.
 @param pH Pointer to a 3x3 row-major homography.

 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_setHomography(CTWarpGrid*,System.Single*)">
 Set warp grid given a 3x3 homography matrix

 Sets values on the pWarpGrid-&gt;pPt. Roughly speaking, the warp grid is set to
 H * not-warped-pPt. The projected points must not be behind camera or at infinity.

 @param pWarpGrid Pointer to a CTWarpGrid with allocated pWarpGrid-&gt;pPt.
 @param pH Pointer to a 3x3 row-major homography.

 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_setHomographyDelta(CTWarpGrid*,System.Single*,CTWarpGrid*)">
Set an (absolute) warp grid given a homography and delta transform
@param pWarpGrid[out] Warp grid that will contain the result
@param pH Homography of the input transform
@param pDelta Delta of the input transform
@return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_getCropRect(CTSize,CTWarpGrid*,System.Single*,CTRect*)">
 Given a "homography and delta" transformation and input image dimensions, get area that contains only valid pixels

 @param imDims Image dimensions of source and destination images that will be transformed by the transform.
 @param pDelta Delta of the transformation
 @param pH Homography of the transformation
 @param[out] pRect Area that contains only valid pixels.
 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_combineHomographyDelta(CTWarpGrid*,System.Single*,CTWarpGrid*,System.Single*,CTWarpGrid*,System.Single*)">
 Combine two "homography and delta" transforms into one.

 The transforms are defined on the form
 pointsSourceImage = T(pointsReferenceImage) = H_inv(pointsReferenceImage) + Delta(pointsReferenceImage)

 Tc(pt) = Tb(Ta(pt))

 @param pDA Delta of transform A
 @param pHA Homography of transform A, must be invertible.
 @param pDB Delta of transform B
 @param pHB Homography of transform B, must be invertible.
 @param[out] pDC Delta of (output) transform C
 @param[out] pHC Homographyt of (output) transform C
 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_getExtremes(CTWarpGrid*,System.Single*,System.Single*,System.Single*,System.Single*)">
 Get extreme values of a warp grid's displacements.

 @param pWarp A warp grid
 @param[out] pMinY Minimum (nearest to -inf) y
 @param[out] pMaxY Maximum y
 @param[out] pMinX Minimum (nearest to -inf) x
 @param[out] pMaxX Maximum x

</member>
        <member name="M:ctwarpgrid_transformTranslateScale(CTWarpGrid*,CTWarpGrid*,System.Single*)">
 Generate a warp table using another warp table and a combination of scale and translations in source and destination coordinates
 
 The following transform is applied defining the mapping between (xDstIn,yDstIn) and (xDstOut,yDstOut) in the pDst warp table
          ptSrcIn.x = xDstIn * pK[0] + pK[1];
          ptSrcIn.y = yDstIn * pK[2] + pK[3];
          ptSrcOut = warpPoint(ptSrcIn, pWrpSrc);
          xDstOut = ptSrcOut.x * pK[4] + pK[5];
          yDstOut = ptSrcOut.y * pK[6] + pK[7];

 @param pWrpDst The destination warp grid
 @param pWrpSrc The source warp grid
 @param pK Array of 8 coefficients
 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_resample(CTWarpGrid*,CTWarpGrid*)">
 Resample a warp grid (from one delta to another)

 @param pDst The destination warp grid
 @param pSrc The source warp grid
 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_isValid(CTWarpGrid*)">
Basic consistency checks on a CTWarpGrid.
@return true if the checks succeed, otherwise false.

</member>
        <member name="M:ctwarpgrid_destroy(CTWarpGrid*)">
Free warp grid (and its owned resources)
@param pWarpGrid warp.

</member>
        <member name="M:ctwarpgrid_createFromImageDims(CTSize,CTWarpGrid**)">
 Create a CTWarpGrid

 @param imageDims Image dimensions for the image that will be warped
 @param[out] ppWarpGrid Created CTWarpGrid. The grid points are allocated but not initialized.

 @return @c CERR_OK or an error code

</member>
        <member name="M:ctwarpgrid_create(System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTWarpGrid**)">
 Create a CTWarpGrid

 @param delta Number of pixels between points in the warp grid.
 @param nX Number of grid points in x direction
 @param nY Number of grid points in y direction
 @param[out] ppWarpGrid Created CTWarpGrid. The grid points are allocated but not initialized.

 @return @c CERR_OK or an error code

</member>
        <member name="M:scbmatrixmath_gaussianSolve3x3(System.Single(*)[N4])">
    Gaussian elimination

    The matrix will be modified in place and will be in
    row echelon form as described on http://en.wikipedia.org/wiki/Gaussian_elimination.

    @param A    A matrix with three rows and four columns

    @return @c CERR_OK or CERR_OPERATION_FAILED

</member>
        <member name="M:scbmatrixmath_matmul_transp(System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single*)">
C = A' * B

A should first be transposed i.e. C = A' * B
Size (rows x cols)
A is mxn
B is mxnb
C is nxnb

</member>
        <member name="M:scbmatrixmath_matmul(System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single*)">
Multiply A (m x n) with B (n x nb) put result in C (m x nb)
(rows x cols)

</member>
        <member name="M:scbmatrixmath_multiply3x3_transp(System.Single!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single*)">
    R = A' * B
    (A' is A transposed)

    @param pA pointer to array of 9 CTfloat's representing 3x3 matrix in row order
    @param pB pointer to array of 9 CTfloat's representing 3x3 matrix in row order
    @param[out] pR result. pR is allowed to be same as pB and/or pA.

</member>
        <member name="M:scbmatrixmath_multiply3x3(System.Single!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single*)">
    Multipy two 3x3 matrices

    @param pA pointer to array of 9 CTfloat's representing 3x3 matrix in row order
    @param pB pointer to array of 9 CTfloat's representing 3x3 matrix in row order
    @param[out] pR result. pR is allowed to be same as pB and/or pA.

</member>
        <member name="M:scbmatrixmath_inverse3x3(System.Single!System.Runtime.CompilerServices.IsConst*,System.Single*)">
Invert 3x3 matrix

</member>
        <member name="M:scbimagemath_stereographicProjection(CTBitmap*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single,CTBitmap*)">
Apply stereographic (little planet) projection on a spherical projection image

@param pIn spherical projection image.
scbimagemath_stereographicProjection: 3 plane image with 1Bpp planes.
scbimagemath_stereographicProjectionGrayTrilinear: 1Bpp (CM_GRAY8, CM_Y, CM_U, CM_V)

@param pK_inv Inverse of the OpenGL projection matrix, given in column-major order.
@param pTR_inv Inverse of T(ranslation) * R(otation), given in column-major order.
@param radius Radius of sphere.
@param pOut Output bitmap of same format as pIn

@remarks
- The camera position (as given by T), MUST be at a distance of radius from the origo.
- Note that pK_inv defines an aspect ratio which should be matched by pOut, otherwise output will be stretched in x and y.
.

</member>
        <member name="M:scbimagemath_projectCoordinate(System.Single!System.Runtime.CompilerServices.IsConst*,CTPointf!System.Runtime.CompilerServices.IsConst*,CTPointf*)">
    @brief
    Calculate projection of a point using a projection matrix.

    @param pH 3x3 projection matrix (homography) from input to output, values aligned as [first row, second row, third row]
    @param pPoint Point to project.
    @param [out] pProjectedPoint Projected point.

    @return CERR_OK on success.

</member>
        <member name="M:scbimagemath_panoramaProjection(CTBitmap*,System.Single!System.Runtime.CompilerServices.IsConst*,CTInterpolation,CTPanoramaProjection,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*,CTBitmap*,CTRect*)">
 Apply panoramic projection to an image.


 Projection from output image coordinates to input image coordinates:
 The x any y coordinates of the output image are mapped to 3D coordinates in space.
 The 3D coordinates are mapped to the input image by the projection matrix H
 [xIn,yIn,1) ~ H * [x;y;z]

 Spherical (equirectangular) projection:
 pOut y-coordinates is the angle theta in range [pi/2, -pi/2]
 pOut x-coordinates is the angle phi in range [pi, -pi]
 It is common, but not required to have the aspect ratio 2:1 of w:h

 Map angles to 3D coordinates on unit sphere
 [x;y;z] ~ [cos(theta) * -sin(phi); -sin(theta); cos(theta) * cos(phi)]


 Cylindrical projection:
 pOut y-coordinates are the y coordinates of a cylinder with radius 1 centered on the y axis
 pOut x-coordinates is the angle phi in range [horizontalFOV/2, -horizontalFOV/2]
 [x;y;z] ~ [-sin(phi); ys; cos(phi)]


 Rectilinear projection:
 The output image is a plane whos center is at (0,0,1) and  scaled to preserve the horizontalFOV.
 [x;y;z] ~ [xs; ys; 1]
 

 @param pIn image to project.
 @param pH a 3 by 3 homography matrix describing the projection from input image to output image.
 @param interpolation
 @param projection Type of projection
 @param Horizontal field of view of the output image (ignored for spherical projection)
 @param pOut the image in which to write the projected image.
 @param pMask a mask describing if points in the output image are inside or outside the input image.
 @param pMaskBoundingBox Optional. Bounding box of the projection in pOut coordinates.

 @return CERR_OK or an error code

</member>
        <member name="M:scbimagemath_applyColorCorrection(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong(*)[N3])">
    Apply color correction on a bitmap

    @param pBm Input and output image
    @param pColorCorrection color correction values for Y, U and V.
    @return CERR_OK or an error code

</member>
        <member name="M:scbimagemath_pyrBlur(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Blur an image

    @par pImage Grayscale (CM_GRAY8) image
    @par blurside Blurring side in power of two

    @return @c CERR_OK or an error code

</member>
        <member name="M:scbimagemath_blendImages(CTImage*,CTImage*,CTImage*,CTImage*)">
    @brief
    Alpha blend CM_GRAY8 images

    @param pImage0 Image used fully where mask is 0
    @param pImage255 Image used fully where mask is 255
    @param pImageMask Mask
    @param pImageOut Result

    All images must be CM_GRAY8 and have same dimensions.

</member>
        <member name="M:scbimagemath_downScaleBitmapYUV420_to_AYUV(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap**)">
    @brief
    Create and render a scaled down bitmap that is low pass filtered by a gaussian kernel.

    @param pSrc Source bitmap. Must be YUV420P. Dimensions must be even.
    @param divisor Downscaling power. Must be &gt;= 1.
    @param ppDstBitmap Destination bitmap. Will be created and ownership transferred to caller.
    Is always AYUV4444 and has dimensions as floor(source divided by 2^divisor).

    @return CRESULT indicating result of operation

</member>
        <member name="M:scbimagemath_upScaleImage_GRAY8(CTImage*,CTImage*)">
    @brief
    Scale up a CM_GRAY8 image a factor of two

    @param pInputImage image to be upscaled
    @param pOutputImage result

    The following requirements must hold:
    DBC_REQUIRE(pInputImage-&gt;dims.w == pOutputImage-&gt;dims.w / 2 + 1);
    DBC_REQUIRE(pInputImage-&gt;dims.h == pOutputImage-&gt;dims.h / 2 + 1);

    The format of the images must be CM_GRAY8.

</member>
        <member name="T:CTPolygonalPath">
CTPolygonalPath is used to describe a path in the image. Every step in the path is described by a CTPoint

</member>
        <member name="T:CTWarpGrid">
Warp grid

Origo of the grid is in 0,0
The distance between grid points is delta pixels in both x and y direction
The total number of grid points is nX * nY
The grid defines a mapping from the points in the destination image defined by (delta*xx,delta*yy),
to the source image points in (pPt[2 * (nX * yy + xx)],pPt[2 * (nX * yy + xx) + 1])
for xx between 0 and nX-1 and yy between 0 and nY-1.

</member>
        <member name="M:ctpanoramastitcher_destroy(CTPanoramaStitcher*)">
    @brief
    Destroys the stitching session.

    @param pStitcher The stitching session

</member>
        <member name="M:ctpanoramastitcher_getPreview(CTPanoramaStitcher*,CTBitmap*)">
    @brief
    As ctpanoramastitcher_getResult() but allows partial collapse of pyramid.
    This can only be done on high quality stich sessions.

    @param pStitcher The stitching session
    @param pBitmap The finished panorama image. The dimensions d of this image
    must satisfy 2^n * d = pStitcher outputSize.

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramastitcher_getMask(CTPanoramaStitcher*)">
    @brief
    Get mask.

    @param pStitcher The stitching session
    @return Pointer to internal mask. CM_GRAY8. 0 - not covered. != 0, covered.

</member>
        <member name="M:ctpanoramastitcher_getResult(CTPanoramaStitcher*,CTBitmap*)">
    @brief
    Retrieves or creates the resulting panorama and writes it into an existing
    bitmap.

    @param pStitcher The stitching session
    @param pBitmap The finished panorama image.

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramastitcher_addImage(CTPanoramaStitcher*,CTBitmap*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single)">
    @brief
    Adds an image to the stitching session and adds it to the panorama

    @param pStitcher The stitching session
    @param pIm The image to be added
    @param R The estimated rotation matrix
    @param f The estimated focal length of the camera

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramastitcher_createRectilinearHQ(CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTPanoramaStitcher**)">
    @brief
    Creates a high quality panorama stitching session with rectilinear warp.

    @param outputSize The size of the panorama. Aspect ratio must be 2:1
    @param horizontalFov Horizontal field of view in degrees inside ]0, 360]..
    @param[out] ppStitcher The created stitching session.

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramastitcher_createSphericalHQ(CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,CTPanoramaStitcher**)">
    @brief
    Creates a high quality panorama stitching session with spherical warp.

    @param outputSize The size of the panorama. Aspect ratio must be 2:1
    @param horizontalFov Horizontal field of view in degrees inside ]0, 360].
    @param[out] ppStitcher The created stitching session.

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramastitcher_createSphericalPreview(CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,CTPanoramaStitcher**)">
    @brief
    Creates a preview panorama stitching session with spherical warp..

    @param outputSize The size of the panorama. Aspect ratio must be 2:1
    @param horizontalFov Horizontal field of view in degrees inside ]0, 360].
    @param[out] ppStitcher The created stitching session.

    @return CERR_OK or an error.

</member>
        <member name="M:ctpanoramaaligner_getResult(CTPanoramaAligner*,System.Single**,System.Single**,System.Int32!System.Runtime.CompilerServices.IsLong**,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get rotations, focal lengths and number of images from Aligner session

    @param pAligner Aligner session
    @param[out] ppR (Optional). *ppR will be set to internal array in pAligner
    containing rotation matrices in an array of size sizeof(CTFloat)*9*nImages.
    Rotation matrices are in row-major order.
    @param[out] ppF (Optional). *ppF will be set to internal array in pAligner
    containing focal lengths.
    @param[out] ppStatus (Optional). see ctpanoramaaligner_add().
    @param[out] pNImages (Optional). Number of added images

    @return CERR_OK or an error.

    @sa ctpanoramaaligner_add()

</member>
        <member name="M:ctpanoramaaligner_add(CTPanoramaAligner*,CTBitmap*,System.Single!System.Runtime.CompilerServices.IsConst*,System.Single,System.Single**,System.Single**,System.Int32!System.Runtime.CompilerServices.IsLong**,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Finds alignment for a new image and updates alignment for all previously
    added images.
    @n
    @n
    Images are not required to be added in any special order. They do not
    need to overlap any of the previously added images. However, alignment
    processing time is usually smaller if the images are added in an order so
    that each image overlaps previously added images.

    @param pAligner Aligner session

    @param pIm Bitmap with its first CTPlane in color format CM_GRAY8 or CM_Y.

    @param R 3x3 rotation matrix in row-major order.
        -# The first image's input R gives the absolute orientation of the
        panorama.
        -# The following images' input R are used as a hint for the aligner,
        allowing optimizations and to handle the case where the new image
        could not be aligned in any other way to previously added images.
        .

    @param f focal length given in pixels. For best result, all input images
    should be captured with the same focal length. f is used as a starting
    point for focal length estimation in the whole panorama. A reasonably
    correct input focal length is important for alignment quality.

    @param[out] ppR (Optional). *ppR will be set to internal array in pAligner
    containing rotation matrices in an array of size
    @c sizeof(CTFloat)*9*nImages.
    Rotation matrices are in row-major order.

    @param[out] ppF (Optional). *ppF will be set to internal array in pAligner
    containing focal lengths. ppF focal lengths vary between images even if
    the images are captured with fixed focal length.

    @param[out] ppStatus (Optional). *ppStatus will be set to internal array in
    pAligner containing statuses for images.
        - PANORAMAALIGNER_NO_MATCH: not enough features, cannot ever match
        - PANORAMAALIGNER_PENDING:  not matched to any other image, but has
          features so it could possibly later be aligned into the panorama.
        - &gt;=0: matched to other images. Number reflects image's group.
        .
    All groups contain &gt;= 2 images.
    Groups are numbered according to the order their first image was added.
    Group memberships are reassigned after each call to add.
    Specifically, the status for the image added with this call is at
    (*ppStatus)[(*pNImages)-1].

    @param[out] pNImages (Optional). Number of added images

    @return CERR_OK or an error. (CERR_OK even if no image match could be
    found with the new image.)

    @remarks
    A maximum of 100 images can be added to pAligner.

</member>
        <member name="M:ctpanoramaaligner_destroy(CTPanoramaAligner*)">
Destroy a CTPanoramaAligner

</member>
        <member name="M:ctpanoramaaligner_create(CTPanoramaAligner**)">
Create a CTPanoramaAligner

</member>
        <member name="T:CTPanoramaStitcher">
@brief
The central handle type used for panorama stitching

</member>
        <member name="T:CTPanoramaAligner">
    @file scbfreepanorama.h
    @brief API for aligning and blending images into a 360 degrees spherical
    panorama image.

    @ingroup panorama

    @addtogroup panorama
    @brief API for aligning and blending images into a 360 degrees spherical
    panorama image.

    @par Terminology and conventions
    -# alignment/align, registration/register -
    To find out how one image is oriented relative to another, or all other,
    images
    -# orientation - Image alignment is modeled as a camera rotation, i.e.
    each image will be assigned an orientation.
    -# focal length - Measurement used for getting the field of view of
    the images. In this document, measured in pixels.
    -# stitch, blend - used interchangeably for the operation of rendering
    the aligned input images into one common, seamless drawing area.
    -# All matrices are given in row-major order.
    .

    @par Basic workflow
    Workflow for creating a panoramic image:
    @n@n
    -# Align all images
    -# Blend after all images have been added to the aligner
    .
    @n

    @par Aligner workflow
    -# ctpanoramaaligner_create()
    -# for each image to add
        - ctpanoramaaligner_add() - Add panorama images one at a time
        - while !time to capture
            -# ctpanoramaaligner_match() - In a panorama application, use the
            match function for tracking orientation using viewfinder images.
            .
        .
    -# ctpanoramaaligner_destroy()
    .

    @par Stitcher workflow
    -# ctpanoramastitcher_createHQ()
    -# for each aligned image
        - ctpanoramastitcher_addImage()
    -# ctpanoramastitcher_getResult()
    -# ctpanoramastitcher_destroy()
    .

    @par Rotational panoramas math

    The Projection of a point X from 3D space (homogenous coordinates) to image
    plane, can be described as a rotation and translation and followed by a
    projection:

    xp ~ |       0 |   |       t |
         |   K   0 | * |   R   t | * X
         |       0 |   |       t |
         | 0 0 0 1 |   | 0 0 0 1 |

    where xp = [x,y,1,d]

    If the camera undergoes pure rotation, t = 0. This is similar to restricting
    X to the infinity plane (u,v,w,0)

    - Let X3 describe the direction to a 3D point.
    - Let im_a and im_b be its projections in images a and b
      (homogenous coordinates)
    - Fix the image coordinate's origin to be in the middle of the image
      (i.e. at 320,240 in a 640x480 image), x pointing right, y down.
    - K is the simplified camera intrinsic matrix: K = [f 0 0; 0 f 0; 0 0 1]
    - R is a 3D rotation matrix
    .

    Then, for a camera under pure rotation:

    - im_a ~ K_a*R_a*X_3D
    - im_b ~ K_b*R_b*X_3D
    .

    Which gives the relations:

    - X_3D ~ inv(R_a)*inv(K_a)*im_a
    - im_b ~ K_b * R_b * inv(R_a) * inv(K_a) * im_a
    - [x_b; y_b; f_b] ~ R_b * inv(R_a) * [x_a; y_a; f_a]
    .

    @{

Image does not contain enough features to be aligned

Image could not be aligned to any added image

@brief
The central handle type used for panorama alignment

</member>
        <member name="M:oslmem_realloc(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Realloc's memory from the heap.

    @param pObject Pointer to old object.
    
    @param size Amount in bytes of the size of the object.
    
    @return Pointer to resized object.
 
    @note This function is implemented by Scalado, and does not need to be 
    implemented as part of the osil integration efforts.
    

</member>
        <member name="M:oslmem_allocReset(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void**)">
    Allocates and reset memory from the heap.
    
    @param size Amount in bytes of the size of the object.
    @param ppObject Pointer where the object will be allocated.
    
    @return CERR_OK if no errors, CERR_MEMALLOC_FAILED otherwise.
 
    @note This function is implemented by Scalado, and does not need to be 
    implemented as part of the osil integration efforts.
    

</member>
        <member name="M:oslmem_free(System.Void*)">
    @brief
    Frees a previously allocated block of memory.

    @param p Address of the memory to free. Can be zero.

</member>
        <member name="M:oslmem_alloc(System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup os_memory
@file oslmem.h
@brief Declares the virtual interface (used internally in CAPS), providing
support for memory management.

    @addtogroup os_memory
    @brief Mapping of basic OS memory functionality.

    These function declarations are found in the header file: oslmem.h

    @{

    @brief
    Allocates memory from the heap.

    @param size Size in bytes of the memory to be allocated.

    @return A pointer to the allocated memory if succesful, or zero if the 
            allocation failed.

</member>
        <member name="M:caps_endBrightnessNContrast(cips*)">
	@brief
	Ends the task of applying Brightness and Contrast effect to the current 
	session image.

	@param session
	Handle to a valid session.

	@since 5.3

</member>
        <member name="M:caps_setBrightnessNContrast(cips*,System.Single,System.Single)">
	@brief
	Adjusts the brightness level of the current session image.

	@param session
	Handle to a valid session.

	@param brightness
	A @c CTfloat specifying the brightness modification level. 
	Range (-1.0) - (1.0), where 0.0 implies no adjustment.   

	@param contrast
	The contrast adjustment level. Range (-1.0) - (1.0), where values below
	zero decreases contrast and above zero increases it.

	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.3

</member>
        <member name="M:caps_beginBrightnessNContrast(cips*)">
@} 
@defgroup fxgroup_brightness_n_contrast Brightness and Contrast 
@{
	@copydoc begin_end_effects

	@brief
	Begins the task of applying Brightness and Contrast effect to the current 
	session image.

	@param session
	Handle to a valid session.

	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.3

</member>
        <member name="M:caps_endSplitToning(cips*)">
	@brief
	Disconnects the SplitToning filter from current session and frees memory from SplitToning parameters.

	@param session
	Handle to a valid session.

	@since 3.9

</member>
        <member name="M:caps_setSplitToning(cips*,CTSplitToneRange*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
	@brief
	Sets one, or more, luminance ranges with specific colors for the SplitToning filter.

	The SplitToning effect applies a given color to pixels with luminance values within an
	interval specified by a @c CTSplitToneRange struct. Several different intervals may be
	specified, each with a different color associated to it.

	Typical usage is to define a @em shadow luminance range, and a @em highlight luminance
	range, with different colors applied to each range.

	@param session
	Handle to a valid session.

	@param pSplitRange
	Array of @c CTSplitToneRange settings.

	@param splitRangeSize
	Number of elements in the @c pSplitRange array.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.9

</member>
        <member name="M:caps_beginSplitToning(cips*)">
	@brief
	This function connects a SplitToning effect to the current session.

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.9

</member>
        <member name="F:CTSplitToneRange.bValue">
@brief Defines the B value of the RGB color to be set for the luminance range:
[ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c bValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.gValue">
@brief Defines the G value of the RGB color to be set for the luminance range:
[ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c gValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.rValue">
@brief Defines the R value of the RGB color to be set for the luminance
range: [ @c luminanceLowValue, @c luminanceHighValue ].
Allowed @c rValue range: [ 0, 255 ]. 
</member>
        <member name="F:CTSplitToneRange.luminanceHighValue">
@brief Defines the higher luminance value.
Allowed range is [ 0, 255 ]. Must be higher than @c luminanceLowValue.

</member>
        <member name="F:CTSplitToneRange.luminanceLowValue">
@brief Defines the lower luminance value.
Allowed range is [ 0, 255 ]. Must be lower than @c luminanceHighValue.

</member>
        <member name="T:CTSplitToneRange">
@} 
@defgroup fxgroup_splittoning SplitToning
@{
	@copydoc begin_end_effects

	@brief Defines a split toning luminance interval, and a color value (RGB)
	to be applied.

	Used with caps_setSplitToning().

</member>
        <member name="M:caps_endWatercolor(cips*)">
	@param session
	Handle to a valid session.

	@since 3.9

</member>
        <member name="M:caps_setWatercolor(cips*,System.Single,System.Single)">
	@brief
	Adjusts the light and color intensity of the watercolor effect.

	@param session
	Handle to a valid session.

	@param light
	A @c CTfloat specifying the light intensity.
	Range (0.0) - (1.0).

	@param color
	A @c CTfloat specifying the color intenisy.
	Range (0.0) - (1.0).

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.9

</member>
        <member name="M:caps_beginWatercolor(cips*)">
@} 
@defgroup fxgroup_watercolor Watercolor
@{
	@copydoc begin_end_effects

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.9

</member>
        <member name="M:caps_applyTransferAlpha(cips*,CAPS_TRANSFER_ALPHA_MODE)">
	@brief
	Copies alfa from/to another channel of the current session image.

	@param session
	A valid session handle.

	@param mode
	The channel and the direction alpha should be copied to/from.

	@return
	@c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_endVignetting(cips*)">
	@brief
	Ends the task of applying vignetting effect to the current session image.

	@param session
	Handle to a valid session.

	@since 3.9 R01

</member>
        <member name="M:caps_beginVignetting(cips*)">
@} 
@defgroup fxgroup_vignetting Vignetting
@{
	@copydoc begin_end_effects

	@brief
	Begins the task of applying vignetting effect to the current session image.

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.9 R01

</member>
        <member name="M:caps_endLomo(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.8

</member>
        <member name="M:caps_setLomo(cips*,System.Single,System.Single,CAPS_LOMO_VIGNETTING,CAPS_LOMO_STYLE)">
	@brief
	Applies lomo effect on the current session image.

	@param session
	Handle to a valid session.

	@param brightness
	Adjust the brightness of the image. Range (0.0) - (1.0),
	where 0.0 gives a bright image and 1.0 a dark image.

	@param saturation
	Adjust the color saturation of the image. Range (0.0) - (1.0),
	where 0.0 implies no saturation.

	@param vignetting
	Adjust the vignetting level. Can be one of the values from the
	@c ::CAPS_LOMO_VIGNETTING enumeration.

	@param style
	Change color style. Can be one of the values from the
	@c ::CAPS_LOMO_STYLE enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.8

</member>
        <member name="M:caps_beginLomo(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.8

</member>
        <member name="M:caps_applyWarpFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
	@brief
	Applies a warp effect to the current session image.

	@param session
	A valid session handle.

	@param wrptable
	Buffer containing the warptable to apply.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.1

</member>
        <member name="M:caps_applyWarpFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*)">
	@brief
	Applies a warp effect to the current session image.

	@param session
	A valid session handle.

	@param filename
	Filename specifying the warp table file to use when applying the warp
	effect.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.0

</member>
        <member name="M:caps_endWarpAreaEx(caps_warparea*)">
	@brief

	@param warp
	Handle to a valid warp area.

	@remarks
	This function has the same effect as caps_endWarpArea()

	@copydoc begin_end_effects

	@since 5.2

</member>
        <member name="M:caps_endWarpArea(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@remarks
	This function has the same effect as caps_endWarpAreaEx()

	@copydoc begin_end_effects

	@since 5.2

</member>
        <member name="M:caps_setWarpAreaIndexEx(caps_warparea*,System.Int32!System.Runtime.CompilerServices.IsLong,CAPS_ROTATION,System.Single)">
	@brief
	Sets the warp effect to apply

	@param warp
	[IN]A valid warp handle which has been created in a previous call to
	caps_beginWarpArea().

	@param index
	[IN] A number between 0 and 15 which defines which warp to
	use on the rectangles. The available index values are defined in
	#CAPS_WARP_EFFECT

	@param strength Amount of effect applied. 0.0f means no effect. 1.0f means
	full effect.

	@param rotation Rotation of the effect.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.3.2.1

</member>
        <member name="M:caps_setWarpAreaIndex(caps_warparea*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single)">
	@brief
	Sets the warp effect to apply

	@param warp
	[IN]A valid warp handle which has been created in a previous call to 
	caps_beginWarpArea().

	@param index
	[IN] A number between 0 and 15 which defines which warp to
	use on the rectangles. The available index values are defined in
	#CAPS_WARP_EFFECT

	@param strength Amount of effect applied. 0.0f means no effect. 1.0f means
	full effect.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.2

</member>
        <member name="M:caps_beginWarpArea(cips*,CTRect!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,caps_warparea**)">
	@brief
	Warp effect on selected areas in a session.

	After this function, the default warp effect, of index 0, is applied.

	@param session 
	A valid session handle.

	@param pRects Array of rectangles where warp is applied. 
	The array is copied, so this object does not need to be kept alive during
	the out_warp session. Rectangles that are outside of the session's
	current image size will be cropped to the valid area.
	There must be at least one rectangle in the array.

	@param numRects Number of rectangles in array, minimum 1.

	@param out_warp A handle for the warp session

	@copydoc begin_end_effects

	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.2

</member>
        <member name="T:CAPS_WARP_EFFECT">
Warp effects

</member>
        <member name="T:caps_warparea">
@defgroup fxgroup_warp Warp
@{

The handle type used for warp effect sessions.

</member>
        <member name="M:caps_applyMagicPen(cips*)">
@} 
@defgroup fx_magicpen Magic Pen 
	@ingroup fx_magicpen

	@brief
	Applies a mix of edge distinction and color manipulation of the image.

	@param session
	A valid session handle.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.0

</member>
        <member name="M:caps_endCartoon(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setCartoon(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
	@brief
	Transforms the current session image to typical cartoon graphics style.

	@param session
	Handle to a valid session.

	@param distinct_edges
	If set to @a true all detected edges in the image are rendered
	distinctively, if @c false edges are ignored.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginCartoon(cips*)">
@} 
@defgroup fxgroup_cartoon Cartoon
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endColorSwap(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@remarks

	@copydoc begin_end_effects

	@since 3.7

</member>
        <member name="M:caps_endMonoColor(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.7

</member>
        <member name="M:caps_endColorization(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setColorization(cips*,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16)">
	@brief
	Adjusts color tone and luminance/chrominance levels.
	Adds a single color to an image.

	@param session
	Handle to a valid session.

	@param r
	Red component of reference color.
	Range: 0-255

	@param g
	Green component of reference color.
	Range: 0-255

	@param b
	Blue component of reference color.
	Range: 0-255

	@param luminance_strength
	Strength of luminance.
	Range: (-100)-(200)

	@param chrominance_strength
	Strength of chrominance.
	Range: (-100)-(200)

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginColorization(cips*)">
@} 
@defgroup fxgroup_colorize Colorize
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endBlur(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setBlurRegionMode(cips*,CAPS_BLUR_REGION_MODE)">
	@brief
	Set the region mode of the blur effect

	@param session
	Handle to a valid session.

	@param mode
	The blur region mode. Can be any of the values from
	the @c ::CAPS_BLUR_REGION_MODE
	enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.7

</member>
        <member name="M:caps_setBlur(cips*,CAPS_BLUR_LEVEL,CTRect*)">
	@brief
	Blurs the current session image.

	@param session
	Handle to a valid session.

	@param level
	The blur effect level. Can be any of the values from the @c ::CAPS_BLUR_LEVEL
	enumeration.

	@param region
	(OPTIONAL) Pointer to a @c CTRect object specifying the effective region to
	blur within the image, given in current coordinates. Set this
	argument to @c NULL if the effect should be applied to the entire image.
	The blur is applied to the entire image if the width and/or height value is zero
	(independent of the position).
	The coordinates given will correspond to the upper-left corner of the blur region.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_setExactBlur(cips*,System.Int32!System.Runtime.CompilerServices.IsLong,CTRect*)">
	@brief
	Blurs the current session image.

	@param session
	Handle to a valid session.

	@param level
	The blur effect level. This corresponds closely to the kernel size of the
	@sa CAPS_BLUR_LEVEL enum. Zero of negative values will return an error code.

	@param region
	(OPTIONAL) Pointer to a @c CTRect object specifying the effective region to
	blur within the image, given in current coordinates. Set this
	argument to @c NULL if the effect should be applied to the entire image.
	The blur is applied to the entire image if the width and/or height value is zero
	(independent of the position).
	The coordinates given will correspond to the upper-left corner of the blur region.
 
	@note The exact conversion between the kernel size specified in @sa
	CAPS_BLUR_LEVEL and the level parameter of this function is not specified.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 5.4

</member>
        <member name="M:caps_beginBlur(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endDespeckle(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setDespeckle(cips*,CAPS_DESPECKLE_LEVEL)">
	@brief
	Applies a "despeckle" surface effect to the current session image.

	@param session
	Handle to a valid session.

	@param level
	The effect level. Can be any of the values from the @c ::CAPS_DESPECKLE_LEVEL
	enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginDespeckle(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endFrostedGlass(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setFrostedGlass(cips*,CAPS_FROSTED_LEVEL)">
	@brief
	Applies a "frosted glass" surface effect on the current session image.

	@param session
	Handle to a valid session.

	@param level
	The effect level. Can be any of the values from the @c ::CAPS_FROSTED_LEVEL
	enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginFrostedGlass(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_applyMoonlight(cips*,System.Int16)">
@} 
@defgroup fx_moonlight Moonlight 
	@ingroup fx_moonlight

	@brief
	Applies a Moonlight effect on the current session image.

	@param session
	A valid session handle.

	@param clock
	Time of night in clock (1~24) affect only at night time (17~7).


	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.1

</member>
        <member name="M:caps_endSpotlight(caps_spotlight*)">
	@brief
	Concludes the task of inserting a spotlight effect.

	@param spotlight
	A valid @c CAPS_SPOTLIGHT handle which has been created in a previous call to
	caps_beginSpotlight().

	@remarks

	The spotlight handle is invalid after calling this function and should
	preferably be reset to null directly upon calling it.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	- caps_beginSpotlight()
	- caps_setSpotlightOrientation()
	- caps_getSpotlightOrientation()
	.

	@since 3.0

</member>
        <member name="M:caps_beginSpotlight(cips*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,caps_spotlight**)">
	@brief
	Begins the task of inserting a spotlight effect on the current session
	image.

	The coordinates given to this function is interpreted as being
	within the "current" coordinate system. See section 'Coordinate conversions'
	in @ref caps_baseapi_screen

	@param session
	A valid session handle.

	@param position
	A @c CTPoint value specifying the center of the spotlight circle.

	@param radius
	The radius of the spotlight circle in pixels. Current coordinates.
	Range: [ 0 , 65535 - 1024 ]

	@param transition_size
	The size of the transition region given in fraction of the radius.
	See the Developers Guide for more information.
	Range: [ 0.0 , 1.0 ]

	@param spotlight
	Pointer to a @c CAPS_SPOTLIGHT value which will receive the spotlight
	handle for subsequent adjustments and conclusion of the spotlight
	insertion. See remarks section for details.

	@remarks
	The task of inserting a spotlight is carried out in three stages:
	@n
	-# Begin spotlight insertion.
	-# Adjust spotlight orientation (optional)
	-# End spotlight insertion.
	.
	@n
	Between step 1 and 3, no other effects or operations may be carried out.
	I.e. the spotlight insertion task have to be concluded/ended before
	proceeding with other effects. A spotlight cannot be modified once the
	insertion process has been ended, the spotlight handle is effectively
	turned invalid after calling caps_endSpotlight().

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	- caps_setSpotlightOrientation()
	- caps_getSpotlightOrientation()
	- caps_endSpotlight()
	.

	@since 3.0

</member>
        <member name="T:caps_spotlight">
@} 
@defgroup fxgroup_spotlight Spotlight
@{

@brief The handle type used for spotlight insertion sessions.

</member>
        <member name="M:caps_endNoise(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setNoise(cips*,CAPS_NOISE_LEVEL)">
	@brief
	Applies noise to the current session image.

	@param session
	Handle to a valid session.

	@param noise
	The amount of noise. Can be any of the values from the @c ::CAPS_NOISE_LEVEL
	enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginNoise(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endGaussianNoise(cips*)">
	@brief

	@param session
	Handle to a valid session.

</member>
        <member name="M:caps_setGaussianNoise(cips*,System.Single)">
	@brief
	Applies Gaussian noise to the current session image.

	@param session
	Handle to a valid session.

	@param std
	The amount of noise, given as the standard deviation of the Gaussian distribution. Must be &gt;= 1.0.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_beginGaussianNoise(cips*)">
@} 
@defgroup fxgroup_gaussiannoise GaussianNoise
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_endSketch(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.x

</member>
        <member name="M:caps_setSketch(cips*,CAPS_SKETCH_MODE)">
	@brief

	@param session
	A valid session handle.

	@param mode
	How to sketch the image.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.x

</member>
        <member name="M:caps_beginSketch(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.x

</member>
        <member name="M:caps_applySketch(cips*,CAPS_SKETCH_MODE)">
	@brief

	@param session
	A valid session handle.

	@param mode
	How to sketch the image.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.1

</member>
        <member name="M:caps_endStamp(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setStamp(cips*,System.Byte,System.Byte)">
	@brief
	Applies a stamp effect. Result is a b/w image.

	@param session
	Handle to a valid session.

	@param smoothness
	Range: 0-6

	@param threshold
	Range: 0-255

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginStamp(cips*)">
@defgroup fxgroup_stamp Stamp
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_applyFog(cips*)">
@} 
@defgroup fx_fog Fog 
	@ingroup fx_fog

	@brief
	Applies a fog effect.

	@param session
	A valid session handle.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.1

</member>
        <member name="M:caps_endPosterize(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setPosterize(cips*,System.UInt16)">
	@brief
	Applies a posterize effect. Reduces the number of colors.

	@param session
	Handle to a valid session.

	@param levels
	The number of allowed values for each color component.
	Range: 2 - 16

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginPosterize(cips*)">
@} 
@defgroup fxgroup_posterize Posterize
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endSolarize(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setSolarize(cips*,System.Single)">
	@brief
	Applies a solarize effect.

	@param session
	Handle to a valid session.

	@param threshold
	The threshold level of the solarize effect.
	Range: 0.0 - 1.0

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginSolarize(cips*)">
@} 
@defgroup fxgroup_solarize Solarize
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_endEmboss(cips*)">
	@brief

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setEmboss(cips*,System.Single)">
	@brief
	Applies an emboss effect in grayscale.

	@param session
	Handle to a valid session.

	@param emboss_level
	The level of the emboss effect.
	Range: 0.0 - 1.0

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginEmboss(cips*)">
@defgroup fxgroup_emboss Emboss
@{
	@copydoc begin_end_effects

	@brief

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_applyMilky(cips*)">
@} 
@defgroup fx_milky Milky 
	@ingroup fx_milky

	@brief
	Applies a "milky" surface effect to the current session image.

	@param session
	A valid session handle.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.0


</member>
        <member name="M:caps_endOily(cips*)">
	@brief
	Ends the task of applying an oily effect to the current session image.

	@param session
	Handle to a valid session.

	@since 3.8.2

</member>
        <member name="M:caps_setOily(cips*,CAPS_OILY_LEVEL)">
	@brief
	Applies oily effect to the current session image.

	@param session
	Handle to a valid session.

	@param oily_level
	The level of the oily effect. Can be one of the values from the
	@c ::CAPS_OILY_LEVEL enumeration.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.8.2

</member>
        <member name="M:caps_beginOily(cips*)">
	@brief
	Begins the task of applying an oily effect to the current session image.

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.8.2

</member>
        <member name="M:caps_endRGBColorAdjust(cips*)">
	@brief
	Applies the color adjustments made to the current session.

	@param session
	Handle to a valid session.

	@since 3.2

</member>
        <member name="M:caps_setRGBColorAdjust(cips*,System.Single,System.Single,System.Single)">
	@brief
	Adjusts the RGB color composition of the current session image.

	@param session
	Handle to a valid session.

	@param r
	Red channel adjustment. Range (-1.0) - (1.0).

	@param g
	Green channel adjustment. Range (-1.0) - (1.0).

	@param b
	Blue channel adjustment. Range (-1.0) - (1.0).

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_beginRGBColorAdjust(cips*)">
@defgroup fxgroup_color_adjustment Color Adjustment
@{
	@copydoc begin_end_effects

	@brief
	Begins the task of adjusting the RGB color values.

	@param session
	Handle to a valid session.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.2

</member>
        <member name="M:caps_applyOily(cips*)">
	@ingroup fx_oily

	@brief
	Makes the session image look like an oil painting.

	@param session
	A valid session handle.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.0

</member>
        <member name="M:caps_applyAntique(cips*)">
@defgroup fx_antique Antique 
	@ingroup fx_antique

	@brief
	Produces a look of an old color photo.

	@param session
	A valid session handle.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.1

</member>
        <member name="M:caps_applyChromaKey(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup fm_photoart
@file fm_photoart_pack2.h
@brief Defines the available API's for filters included in filter pack 2
for the Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fx_chromakey ChromaKey 
	@ingroup fx_chromakey

	@brief
	Adds alpha channel data to the current session image.

	@param session
	A valid session handle.

	@param key
	The color to make transparent. R, G and B are used to define the key.
	A is used to determine the amount of transparency for a non-key color
	pixel. A value of 0 gives full transparency and a value of 255 gives
	no transparency.

	@param invertAlfa
	If false, full transparency in the alpha channel is the value 0.
	If true, full transparency in the alpha channel is the value 255.

	@return
	@c CERR_OK if successful or a specific error code upon failure.

	@since 3.7


</member>
        <member name="M:caps_applyAdjustEx(cips*,System.Single,CTPointf,CTVector,System.Single,SCB_SAMPLING_MODE,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    This filter expands/diminishes the input to another scale. 
    It can also perform zoom, panning and rotation.

    @param session 
    A valid session handle.

    @param angle
    Angle to rotate the image in radians

    @param pivot
    Pivot point in relative coordinates { [0, 1], [0, 1] }

    @param pan
    Set offset in absolute coordinates

    @param scale
    Set relative scale

    @param sampling
    Sampling mode

    @param wrap_boarders
    Set to wrap boarders

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_applyAdjust(cips*,System.Single,CTPointf,CTVector,System.Single)">
    @brief
    This filter expands/diminishes the input to another scale. 
    It can also perform zoom, panning and rotation.

    @param session 
    A valid session handle.

    @param angle
    Angle to rotate the image in radians

    @param pivot
    Pivot point in relative coordinates { [0, 1], [0, 1] }

    @param pan
    Set offset in absolute coordinates

    @param scale
    Set relative scale

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_applyBlendSessionEx(cips*,cips*,CTBlendFunction,CTRect,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single)">
@} 
    @brief
    Blend two sessions together

    @param session 
    A valid session handle.

    @param blendSession
    Another valid session handle

    @param blendFunction
    A blend function

    @param selectionArea
    This rectangle specifies area where blending or no blending in session will be done.
    The rectangle usage is controlled by blendInArea flag.
    Coordinates must be in session's current image size coordinate system. 
    If rectangle values are 0 then blendSession is resized to the session.

    @param blendInArea
    If this flag is true then blendSession will be scaled to the size of selectionArea
    and blending will be done only within that area.
    If this flag is false then blendSession will be scaled to the size of session 
    and blending will be done on the whole surface except for the one specified in selectionArea.

    @param rotationAngle
    This angle specifies how rectangle should be rotated. 
    Rotation angle is in radians and counter clockwise.

    @param blendStrength
    Amount that the blend operation will affect the final result.
    0 means no visual effect, and 1 means full effect. Valid range
    is [0, 1].

    The dimensions of blendSession will adjust to the same
    dimensions as session by stretching unless selectionArea is specified and blendInArea is true. 
    Aspect ratio of blendSession will not be kept. Render operations will
    be performed, which will affect the state of blendSession.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:caps_applyMirror(cips*)">
@} 
@defgroup fx_mirror Mirror 
    @ingroup fx_mirror

    @brief
    Applies a mirror effect on the current session image.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyPaint(cips*)">
    @brief
    Applies a painted effect on the current session image.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endPaint(cips*)">
    @brief	
    Ends the task of applying the Paint effect to the current session image.

    @param session
    Handle to a valid session.

    @since 3.10

</member>
        <member name="M:caps_setPaint(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Applies Paint effect to the current session image.

    @param session
    Handle to a valid session.

    @param paintLevel
    The level of the paint effect. Range [1, 4]

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10

</member>
        <member name="M:caps_beginPaint(cips*)">
@defgroup fx_paint Paint 
    @{
        @copydoc begin_end_effects

    @brief
	Begins the task of applying the Paint effect to the current session image.

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10

</member>
        <member name="M:caps_applyGrayscaleNegative(cips*)">
@defgroup fx_grayscale_negative Grayscale Negative 
    @ingroup fx_grayscale_negative

    @brief
    Converts the current session image to combined grayscale and negative.
    
    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyNegative(cips*)">
@defgroup fx_negative Negative 
    @ingroup fx_negative

    @brief
    Converts the current session image to negative.
    
    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applyGrayscale(cips*)">
@defgroup fx_grayscale Grayscale 
    @ingroup fx_grayscale

    @brief
    Converts the current session image to grayscale.

    @param session 
    A valid session handle.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_applySepia(cips*)">
@} 
    @brief
    Applies a sepia effect to the current session image.

    @param session 
    A valid session handle.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endSepia(cips*)">
    @brief	

    @param session
    Handle to a valid session.

    @since 3.5

</member>
        <member name="M:caps_setSepia(cips*,CAPS_SEPIA_LEVEL)">
    @brief	

    @param session
    Handle to a valid session.

    @param sepia_level
    The level of sepia. Can be one of the values from the 
    @c ::CAPS_SEPIA_LEVEL enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_beginSepia(cips*)">
    @brief
	Applies a sepia effect to the current session image.

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.5

</member>
        <member name="M:caps_endContrast(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setContrast(cips*,System.Single)">
    @brief
    Applies contrast adjustment to the current session image.

    @param session
    Handle to a valid session.

    @param contrast
    The contrast adjustment level. Range (-1.0) - (1.0), where values below
    zero decreases contrast and above zero increases it.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginContrast(cips*)">
@} 
@defgroup fxgroup_contrast Contrast
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endRotation(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setRotation(cips*,System.Single,CAPS_ROTATION_SCALE_MODE)">
    @brief
    Arbitrary rotation on the current session image.

    @param session
    Handle to a valid session.

    @param angle
    Range: [0.0 360.0]

    @param scale_mode 
	Can be any of the values 
    from the @c ::CAPS_ROTATION_SCALE_MODE enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginRotation(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endSharpness(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setSharpnessEx(cips*,System.Single)">
    @brief
    Applies sharpness to the current session image.

    @param session
    Handle to a valid session.

    @param sharp_level Value larger than zero, at preferable smaller than one.
                       Higher value leads to stronger sharpening.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_setSharpness(cips*,CAPS_SHARPNESS_LEVEL)">
    @brief
    Applies sharpness to the current session image. Note that CAPS filters are
    added in the chain to be applied BEFORE the Adjust filter step.
    Refer also to the caps_setSharpnessStrength() function that adds sharpen
    step AFTER the adjust filter step.

    @param session
    Handle to a valid session.

    @param sharp_level
    The sharpness impact level. Can be one of the values from the 
    @c ::CAPS_SHARPNESS_LEVEL enumeration.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginSharpness(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endVibrance(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.8

</member>
        <member name="M:caps_setVibrance(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,System.Single,System.Single)">
    @brief
    Apply Vibrance filter of the current session image.

    @param session
    Handle to a valid session.

    @param level
    A @c CTuint32 specifying the vibrance filter level.
    Range 0 - 100, where 0 implies no adjustment.

    @param skin_level
    A @c CTfloat specifying the correction level on human skin
    Range 0.0 - 1.0, where 0 implies no adjustment on skin,
    and 1 implies full vibrance on skin. The value of 0.3 indicates a moderate
    adjustment on skin

    @param skin_hue_min
    A @c CTfloat specifying the minimal hue of pixels being considered as
    human skin
    Range -59 - 59, where recommended value is -15

    @param skin_hue_max
    A @c CTfloat specifying the maximal hue of pixels being considered as
    human skin
    Range @c skin_hue_min+1 - 59, where recommended value is 59

    @param fading_red
    A @c CTfloat specifying length of fading intervall from full
    vibrance operation to reduced operation on skin (near the red
    end of skin hue interval, left spectrum side)
    Range 0.001 - *

    @param fading_yellow
    A @c CTfloat specifying length of fading intervall between reduced
    vibrance operation on skin and full operation (near the
    yellow end of skin hue interval, right spectrum side)
    Range 0.001 - *

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_beginVibrance(cips*)">
@} 
@defgroup fxgroup_vibrance Vibrance
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_endClarity(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.8

</member>
        <member name="M:caps_setClarity(cips*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Apply Clarity filter of the current session image.

    @param session
    Handle to a valid session.

    @param level
    A @c CTint32 specifying the clarity filter level.
    Range -100 - 100, where 0 implies no adjustment.


    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_beginClarity(cips*)">
@} 
@defgroup fxgroup_clarity Clarity
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_endHueSaturation(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.8

</member>
        <member name="M:caps_setHueSaturation(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Adjusts the Hue and Saturation level of the current session image.

    @param session
    Handle to a valid session.

    @param hue
    A @c CTuint32 specifying the Hue modification level. 
    Range 0 - 255, where 128 implies no adjustment.   

    @param saturation
    A @c CTuint32 specifying the Saturation modification level. 
    Range 0 - 255, where 128 implies no adjustment.   

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_beginHueSaturation(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:caps_endSaturation(cips*)">
    @brief

    @param session
    Handle to a valid session.
        

</member>
        <member name="M:caps_setSaturation(cips*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Adjusts the saturation and/or lightness level of the current session image.

    @param session
    Handle to a valid session.

    @param pSaturationCurve
    Point to the saturation curve array. Array must be of size 256.
    Allowed value range is from 0 - 255. If no change to saturation is to be done
    then curve should be just linear to index values without 
    any offsets i.e value = index value.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_beginSaturation(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_endLightness(cips*)">
    @brief

    @param session
    Handle to a valid session.
        

</member>
        <member name="M:caps_setLightness(cips*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Adjusts the saturation and/or lightness level of the current session image.

    @param session
    Handle to a valid session.

    @param pLightnessCurve
    Point to the lightness curve array. Array must be of size 256.
    Allowed value range is from 0 - 255. If no change to lightness is to be done
    then curve should be just linear to index values without 
    any offsets i.e value = index value.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_beginLightness(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_endHueSaturationLight(cips*)">
    @brief

    @param session
    Handle to a valid session.
        

</member>
        <member name="M:caps_setHueSaturationLight(cips*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Adjusts the Hue, Saturation and Lightness level of the current session image.

    @param session
    Handle to a valid session.

    @param pHueCurve
    Pointer to the hue curve array. Array must be of size 256.
    Value range from 0 - 255 represent hue angles between 0 - 360 degrees.
    Allowed value range is 0 - 510. This means that the hue angle of 360 degrees, which
    correspond to the value 255, can be mapped to itself by adding 255.
    If no change to hue is to be done then curve should be just linear 
    to index values without any offsets i.e value = index value.

    @param pSaturationCurve
    Point to the saturation curve array. Array must be of size 256.
    Allowed value range is from 0 - 255. If no change to saturation is to be done
    then curve should be just linear to index values without 
    any offsets i.e value = index value.

    @param pLightCurve
    Point to the lightness curve array. Array must be of size 256.
    Allowed value range is from 0 - 255. If no change to lightness is to be done
    then curve should be just linear to index values without 
    any offsets i.e value = index value.

    @param changeHue
    Flag indicating if hue is to be changed. 
    Setting this flag off and specifying hue curve will make it possible 
    to modify only saturation and/or lightness for certain hue range.
    Hue range is specified by changing linear hue curve values to the hue values of
    interest.

    @param localColorChange
    Flag indicating if change is to be done only for hue curve values 
    non equal to the array index or if change should be applied globally 
    on entire hue array.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_beginHueSaturationLight(cips*)">
@} 
@defgroup fxgroup_huesaturation HueSaturation 
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_endBrightness(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setBrightness(cips*,System.Single)">
    @brief
    Adjusts the brightness level of the current session image.

    @param session
    Handle to a valid session.

    @param brightness
    A @c CTfloat specifying the brightness modification level. 
    Range (-1.0) - (1.0), where 0.0 implies no adjustment.   

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginBrightness(cips*)">
@ingroup fm_photoart
@file fm_photoart_pack1.h
@brief Defines the available API's for filters included in filter pack 1 
for the Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_brightness Brightness 
@{
    @copydoc begin_end_effects

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_getCurrentScribbleBuffer(caps_scribble*,CTImage**)">
    @brief
    Returns the image currently used by the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] scribbleBuffer
    Pointer address of a @c CTImage which, after the call, will point to the
    scribble image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_eraseScribbleBuffer(caps_scribble*)">
    @brief
    Erases all data in the image currently used by the scribble.
    All data in this buffer will be set to 0.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_removeDotInScribble(caps_scribble*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Removes a dot into the scribble. This is an "Eraser"-function.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param coords
    Specifies the @em screen @em coordinates of the dot to remove.
    The coordinates are not allowed to be negative and must be smaller than
    the screen.

    @param dotRadius
    Radius of the dot. For example, a dot with
    radius 1 will be 3x3 pixels wide.

    @param shape
    The shape of the brush. Can be one of the values from the 
    @c ::CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setEllipseInScribble(caps_scribble*,CTVector,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Places a ellipse into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param upperLeft
    Specifies the upper-left corner of the bounding-box for the ellipse.
    The coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param ellipseSize
    Specifies the widht and height of the ellipse.

    @param brushRadius
    The radius of the brush. The width of the border
    will be ( 2*brushRadius + 1 ) pixels wide.

    @param filled
    Specifies whether the ellipse should be filled or not.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setRectangleInScribble(caps_scribble*,CTVector,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Places a retangle into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param upperLeft
    The coordinates of the upper-left corner of the rectangle. The
    coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param rectangleSize
    Specifies the width and height of the rectangle.

    @param brushRadius
    The radius of the brush. The width of the border
    will be ( 2*brushRadius + 1 ) pixels wide.

    @param filled
    Determines whether the rectangle should be filled or not.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setLineInScribble(caps_scribble*,CTVector,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Places a line ínto the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param srcCoords
    A @c CTPoint specifying the starting point of the line.
    The coordinates are not allowed to be negative and must be smaller
    than the associated @c CTScreen object.

    @param dstCoords
    A @c CTPoint specifying the end point of the line. The
    coordinates are not allowed to be negative and must be smaller than
    the associated @c CTScreen object.

    @param brushRadius
    Variable specifying the radius of the borders. The width of the border
    will be ( 2*brushRadius +1 ) pixels wide.

    @param shape
    Variable specifying the brush shape. Use one of the values from the 
    @c ::CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setDotInScribble(caps_scribble*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,CAPS_SCRIBBLE_SHAPE)">
    @brief
    Places a dot into the scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param position
    A @c CTPoint specifying the position of the dot in @em screen
    @em coordinates. The coordinates are not allowed to be negative
    and must be smaller than the associated @c CTScreen object.

    @param dotRadius
    Specifies the radius of the squared dot. For example, a dot with
    radius 1 will be 3x3 pixels wide.

    @param shape
    Specifies the brush shape. Can be one of the values from the 
    @c CAPS_SCRIBBLE_SHAPE enumeration.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setScribbleOrientation()\n

    @since 3.6

</member>
        <member name="M:caps_setScribbleColor(caps_scribble*,CTColor)">
    @brief
    Adjusts the color of a scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param color Specifies the color to use for drawing.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleColor(caps_scribble*,CTColor*)">
    @brief
    Retrieves the current color of a scribble.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] pColor
    A pointer to a @c CTColor which will receive the current scribble 
    color.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleSize(caps_scribble*,CTSize*)">
    @brief
    Retrieves the current size of a scribble.

    The retrieved size should be regarded within the current coordinate 
    system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] size
    Pointer to a @c CTSize struct to which the width and height will be written.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_setScribbleOrientation(caps_scribble*,CTVector,System.Single,System.Single)">
    @brief
    Adjusts the orientation of a scribble.

    The coordinates given to this function is current coordinate system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param position
    A @c CTPoint specifying the vertical and horizontal position of 
    the scribble in current coordinates. Position refers to the center of 
    the scribble.

    @param scale    
    Scribble scaling factor. Range [0.001, 64.0].

    @param angle
    Rotation of the scribble in degrees, [0.0 360.0].

    @remarks
    After calling this function, no additional data can be inserted to
    the buffer with the functions: caps_setDotInScribble(), 
    caps_setLineInScribble(), caps_setRectangleInScribble(), 
    caps_setEllipseInScribble() and caps_removeDotInScribble().

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_getScribbleOrientation(caps_scribble*,CTVector*,System.Single*,System.Single*)">
    @brief
    Retrieves the current orientation setting for a scribble.

    All coordinates retrieved should be regarded within the current 
    coordinate system.

    @param scribble
    A valid scribble handle which has been created in a previous call to 
    caps_beginScribble().

    @param[out] position
    Pointer to a @c CTPoint which will receive the current scribble
    position. Position refers to the center of the scribble.

    @param[out] scale
    Pointer to a @c CTfloat  which will receive the current scribble 
    scaling factor.

    @param[out] angle
    Pointer to a @c CTfloat which will receive the current scribble 
    rotation angle in degrees, [0.0 360.0].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_endScribble(caps_scribble*)">
@brief
Concludes the task of inserting a scribble image.
 
@param scribble
A valid scribble handle which has been created in a previous call to 
caps_beginScribble().
 
@remarks
The scribble handle will be invalid after calling this function.
 
@return 
@c CERR_OK if successful or a specific error code upon failure.
 
@since 3.6

</member>
        <member name="M:caps_beginScribble(cips*,CTColor,caps_scribble**)">
@brief
Begins the task of creating a scribble image on the current session.

@param session A valid @c CTSession.

@param color Specifies the color to use for drawing primitives.

@param[out] out_scribble
Pointer to a scribble handle.

The task of inserting a scribble is carried out in three stages:
-# Begin scribble insertion.
-# Insert geometrical figures, dots or any data into the image.
Change color and adjust orientation. (This step is optional).
-# End scribble insertion.
.
Between step 1 and 3, no other effects or operations may be carried out;
i.e the scribble insertion task have to be concluded/ended before 
proceeding with other effects. Note that this includes Zoom and Pan
operations. A scribble cannot be modified once the insertion process
has been ended, the scribble handle is turned invalid after
calling caps_endScribble().

@return 
@c CERR_OK if successful or a specific error code upon failure.

@since 3.6

</member>
        <member name="T:caps_scribble">
@ingroup fm_photoart
@file fm_photoart_scribble.h
@brief Defines the available API's for the scribble effect 
in Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_scribble Scribble 
@{

The handle type used for scribble insertion sessions.

</member>
        <member name="M:caps_endClipart(caps_clipart*)">
    @brief
    Concludes the task of inserting a clipart image.

    @param clipart
    A valid handle to a clipart which has been created in a previous call to
    one of the "begin clipart" functions.

    @remarks

    The clipart handle is invalid after calling this function and should
    preferably be set to NULL directly upon calling it.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n   
    caps_getClipartSize()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_getClipartRect(caps_clipart*,CTRect*)">
    @brief
    Retrieves the current bounding box of a clipart.

    The retrieved rectangle should be regarded within the current coordinate 
    system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param rect
    Pointer to a @c CTRect object which will receive the current clipart
    bounding box.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.6

</member>
        <member name="M:caps_getClipartSize(caps_clipart*,CTSize*)">
    @brief
    Retrieves the current size of a clipart.

    The retrieved size should be regarded within the current coordinate 
    system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param size
    Pointer to a @c CTSize object which will receive the current clipart size.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartOrientation()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_getClipartOrientation(caps_clipart*,CTVector*,System.Single*,System.Single*)">
    @brief
    Retrieves the current orientation setting for a clipart.

    All coordinates retrieved should be regarded within the current 
    coordinate system.

    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param position
    Pointer to a @c CTPoint object which will receive the current clipart 
    position. Position refers to the center of the clipart.

    @param scale    
    Pointer to a @c CTfloat value which will receive the current clipart scaling 
    factor.

    @param angle
    Pointer to a @c CTfloat value which will receive the current clipart rotation
    angle in degrees, [0.0 360.0].

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n    
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_setClipartOrientation(caps_clipart*,CTVector,System.Single,System.Single)">
    @brief
    Adjusts the orientation of a clipart previthe most recently inserted clipart.

    The coordinates given to this function is interpreted as being within the
    current coordinate system. See section 'Coordinate conversions'
    in @ref caps_baseapi_screen
    
    @param clipart
    A valid clipart handle which has been created in a previous call to one of
    the "begin clipart" functions.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @remarks

    Note that a clipart handle is invalid after calling caps_endClipart() with
    it. The behaviour when calling this function with an invalid clipart handle
    is undefined.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa    
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromBuffer()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()

    @since 3.0

</member>
        <member name="M:caps_beginClipartFromBuffer(cips*,CTBuffer*,OWNERSHIP_POLICY,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a buffered clipart image on the current 
    session image.

    @param session 
    A valid session handle.

    @param buffer 
    A @c CTBuffer pointer to the buffer data. The format of the data within this
    buffer must be specified through the @c format argument. Ownership of the
    buffer remains with the caller but must stay alive until the associated
    session is destroyed.

	@param bufferOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a buffer argument. If CAPS is given
	ownership responsibility over @a buffer, it will be destroyed using
	caps_destroyBuffer() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @param format 
    The format of the image data contained in @c buffer. Can be any of the
    formats specified in the @c ::IMAGE_FORMAT_SPEC enumeration.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the 
    clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:

    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e. the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().
    
    @return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromFile()

    @since 3.1 (parameters modified in 3.2)

</member>
        <member name="M:caps_beginClipartFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a clipart image on the current session image.

    @param session 
    A valid session handle.

    @param filename 
    String specifying the filesystem path of the image.

    @param format
    The image format of the file.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale    
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:
    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().

    The following image formats are supported for the input image file:
    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromBuffer()

    @since 3.0 (parameters modified in 3.2, support for more formats in 3.8)

</member>
        <member name="M:caps_beginClipart(cips*,CTStream*,OWNERSHIP_POLICY,System.Int32!System.Runtime.CompilerServices.IsLong,CTVector,System.Single,System.Single,caps_clipart**)">
    @brief
    Begins the task of inserting a clipart image on the current session image.

    @param session 
    A valid session handle.

    @param pStream 
    A pointer to a stream containing a image.

    @param streamOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pStream argument. If CAPS is given
    ownership responsibility over @a pStream, it will be destroyed using
    caps_destroyStream() when no longer needed. 
    The ownership is only transfered to CAPS if the function succeeds.

    @param format
    The image format of the stream.

    @param position
    A @c CTPoint object specifying the vertical and horizontal position of the 
    clipart in current coordinates. Position refers to the center of the clipart.

    @param scale
    Clipart scaling factor. Range [0.1, 64.0].

    @param angle
    Rotation of the clipart in degrees, [0.0 360.0].

    @param out_clipart
    Pointer to a clipart handle which will receive the handle to the clipart
    for subsequent adjustments and conclusion of the clipart insertion. See
    remarks section for details.

    @remarks

    The task of inserting a clipart is carried out in three stages:

    @li 1.) Begin clipart insertion.
    @li 2.) Adjust clipart orientation (optional)
    @li 3.) End clipart insertion.

    Between step 1 and 3, no other effects or operations may be carried out.
    I.e the clipart insertion task have to be concluded/ended before proceeding
    with other effects. A clipart cannot be modified once the insertion
    process has been ended, the clipart handle is effectively turned invalid
    after calling caps_endClipart().

    The following image formats are supported for the input image stream:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setClipartOrientation()\n
    caps_getClipartOrientation()\n
    caps_getClipartSize()\n
    caps_endClipart()\n
    caps_beginClipartFromFile()\n
    caps_beginClipartFromRaw()\n
    caps_beginClipartFromBuffer()

    @since 3.8

</member>
        <member name="T:caps_clipart">
@} 
@defgroup fxgroup_clipart Clipart 
@{

@brief The handle type used for clipart insertion sessions.

</member>
        <member name="M:caps_insertFrameFromRaw(cips*,CTImage*,OWNERSHIP_POLICY)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param image
    An @c CTImage containing raw data. The ownership of the raw data buffer
    stays with the caller but must stay alive until the session is destroyed.
    
	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a image argument. If CAPS is given
	ownership responsibility over @a image, it will be destroyed using
	caps_destroyImage() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @remarks
    A frame is an overlay image stretched or contracted to fit the size of the
    session image.\n\n

    IMPORTANT:\n
    The raw image data must be in one of the following color formats:
    - @c CM_AYUV4444
    - @c CM_ARGB8888
    - @c CM_BGRA8888
    - @c CM_RGB565_G0
    .

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    casp_insertFrame()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromFile()

    @since 3.1 (parameters modified in 3.2)


</member>
        <member name="M:caps_insertFrameFromBuffer(cips*,CTBuffer*,OWNERSHIP_POLICY)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param buffer
    A memory buffer containing the frame image. The ownership of the buffer
    stays with the caller and must stay alive until the session is destroyed.
    
	@param bufferOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a buffer argument. If CAPS is given
	ownership responsibility over @a buffer, it will be destroyed using
	caps_destroyBuffer() when no longer needed. Available since 3.2.
    The ownership is only transfered to CAPS if the function succedes.

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFrom()\n
    caps_insertFrameFromFile()\n
    caps_insertFrameFromRaw()

    @since 3.1 (parameters modified in 3.2, support for more image types in 3.8)

</member>
        <member name="M:caps_insertFrameFromFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Inserts a frame on the current session image.
   
    @param session
    Handle to a valid session.
    
    @param filename
    String specifying the filesystem path of the image.
    
    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li PNG
    @li GIF
    @li JPEG 
    @li BMP
    @li WBMP
    @li TIFF

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFrom()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromRaw()

    @since 3.0 (support for more image types in 3.8)

</member>
        <member name="M:caps_insertFrame(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY)">
@ingroup fm_photoart
@file fm_photoart_clipart.h
@brief Defines the available API's clipart and frame effect 
in Caps Feature Module: @a PhotoArt

@addtogroup fm_photoart
@{

@defgroup fxgroup_frame Frame
@{

    @brief
    Inserts a frame on the current session image.

    @param session
    Handle to a valid session.

    @param pStream
    A pointer to a stream containing the frame image. The ownership of the stream
    stays with the caller and must stay alive until the session is destroyed.

    @param format
    The image format of the stream.

    @param streamOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pStream argument. If CAPS is given
    ownership responsibility over @a pStream, it will be destroyed using
    caps_destroyStream() when no longer needed. 
    The ownership is only transferred to CAPS if the function succeeds.

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image.

    The following image types are supported:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFromFile()\n
    caps_insertFrameFromBuffer()\n
    caps_insertFrameFromRaw()

    @since 3.8


</member>
        <member name="M:caps_blendJpeg(CTStream*,CTStream*,CTBuffer!System.Runtime.CompilerServices.IsConst*,CTImage!System.Runtime.CompilerServices.IsConst*,CTVector!System.Runtime.CompilerServices.IsConst*,CTIterator**)">
@defgroup fxgroup_blend Blend
@{

    Jpeg Blend, blends a jpeg image with an other image into a new jpeg file.
	The source image dimensions cannot be smaller than 
	the dimensions of the image to blend. 

    @param[in] pSrcStream Stream of the input image.
    @param[in] pDstStream Stream of the output image.
    @param[in] pExifDataBuffer Pointer to Exif meta data.
    @param[in] pImage       Pointer to image to blend in. The image must be 
                            in either ARGB8888 or AYUV4444 format.
    @param[in] pImagePosition Pointer to the position where to 
                              blend in the image (upper left corner). 
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly. 

    @remarks
    @copydoc iterative_operations
    
    @return
    @c CERR_OK if no errors or an appropriate error code otherwise.
    @c CERR_UNSUPPORTED_COLOR_MODE if the color mode is unsupported.

    @since 3.8

</member>
        <member name="M:caps_flipJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Lossless flip, flips a jpeg file into a new jpeg file.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    @param[in] flipHorizontal Flips the image horizontally.    
    @param[in] flipVertical Flips the image vertically.    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_flipJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@}

    Lossless flip, flips a jpeg file into a new jpeg file.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] flipHorizontal Flips the image horizontally.    
    @param[in] flipVertical Flips the image vertically.    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Byte)">
    Lossless rotate, rotates a jpeg file into a new jpeg file.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    @param[in] orientation Orientation mode. Can be any of the values 
                           from the @c ::CAPS_ORIENTATION_MODE enumeration..    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Byte)">
    Lossless rotate, rotates a jpeg file into a new jpeg file.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] orientation Orientation mode. Can be any of the values 
                           from the @c ::CAPS_ORIENTATION_MODE enumeration..    

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @copydoc rotate_flip_limitations

    @since 3.1

</member>
        <member name="M:caps_rotateJpeg(CTStream*,CTStream*,CAPS_ORIENTATION_MODE,CTIterator**)">
    @brief Lossless rotate, rotates a jpeg into a new jpeg.

    @param[in] pSrcStream stream containing the input image.
    @param[in] pDstStream stream containing the output image.
    @param[in] mode Orientation mode. Can be any of the values 
               from the ::CAPS_ORIENTATION_MODE enumeration,
               or the result from calling caps_getFlipRotationMode.
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly.

    @remarks
    @copydoc rotate_flip_limitations
    \n
    @copydoc iterative_operations

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.

    @since 3.8

</member>
        <member name="M:caps_autoResizeImageMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,autoResizeInfo!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Auto resize, changes the image size and encoding quality to make
    the new image fit into the desired file size. Auto resize will
    maintain the aspect ratio of the image.

    If the achieved file size returned by this function is larger than
    the requested file size the user can use one of the squeeze functions
    in this feature module to further reduce the file size.

    @param[in]  pSrcJpeg Buffer containing the input jpeg image.
    @param[in]  pDstJpeg Buffer containing the output resized jpeg image.     
    @param[in]  pInfo Information specifying the auto resize behaviour.    
    @param[out] achievedFileSize The size of the resized file.
    
    @return
    @c CERR_OK if no errors, or an appropriate error code otherwise.
    @c CERR_OPERATION_FAILED is returned if the function is sure it will
    fail in creating a small enough file given the information in pInfo.
    This will happen, for instance, when the minimum encoding quality
    is larger than the quality required to produce an image with
    the specified minimum image size and maximum file size.

    @remarks
    maxImageSize must be larger than minImageSize.
    
    See caps_renderToBuffer() for information about how the 
    destination @c CTBuffer is treated.

    @since 3.7

</member>
        <member name="M:caps_autoResizeImageFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,autoResizeInfo!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Auto resize, changes the image size and encoding quality to make
    the new image fit into the desired file size. Auto resize will
    maintain the aspect ratio of the image.

    If the achieved file size returned by this function is larger than
    the requested file size the user can use one of the squeeze functions
    in this feature module to further reduce the file size.

    @param[in]  pSrcJpegFilename Filename of the input image.
    @param[in]  pDstJpegFilename Filename of the output image.
    @param[in]  pInfo Information specifying the auto resize behaviour.    
    @param[out] achievedFileSize The size of the resized file.
    
    @return
    @c CERR_OK if no errors, or an appropriate error code otherwise.
    @c CERR_OPERATION_FAILED is returned if the function is sure it will
    fail in creating a small enough file given the information in pInfo.
    This will happen, for instance, when the minimum encoding quality
    is larger than the quality required to produce an image with
    the specified minimum image size and maximum file size.

    @remarks
    maxImageSize must be larger than minImageSize.

    @since 3.4

</member>
        <member name="F:AUTO_RESIZE_MIDDLE_COURSE">
Auto resize will simultaneously lower the encoding quality and shrink
the width and height of the image.

</member>
        <member name="F:AUTO_RESIZE_PRIORITIZE_HIGH_ENCODING_QUALITY">
Auto resize will try to preserve the highest possible encoding quality
while shrinking the width and height of the image. This might be
useful if you substantially reduce the size of the image.

</member>
        <member name="F:AUTO_RESIZE_PRIORITIZE_LARGE_IMAGE_SIZE">
Auto resize will try to preserve the maxImageSize while lowering
the encoding quality.

</member>
        <member name="F:AUTO_RESIZE_PRESERVE_SOURCE_ENCODING_QUALITY">
Auto resize will try to preserve the source encoding quality while
shrinking the width and height of the image.

</member>
        <member name="M:caps_squeezeJpegMemToFile(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file. If this happens, the created
       file will not be deleted by this function.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegMemToMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegBuffer Pointer to the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegFileToMem(System.Char!System.Runtime.CompilerServices.IsConst*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegBuffer Pointer to the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.    
               Must be greater than 0.
    @param[out] pActualDstSize Pointer to the actual size of the resulting jpeg.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpegFileToFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Jpeg squeeze, squeezes a jpeg file into a new smaller jpeg file 
    with a desired maximum size.

    @param[in] pSrcJpegFilename Filename of the input image.
    @param[in] pDstJpegFilename Filename of the output image.
    @param[in] proposedSize Desired maximum size of the new jpeg file.
               Must be greater than 0.
    
    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg file. If this happens, the created
       file will not be deleted by this function.

    @since 3.1

</member>
        <member name="M:caps_squeezeJpeg(CTStream*,CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTIterator**)">
@ingroup fm_jpegsqueeze
@file fm_jpegsqueeze.h
@brief Defines the interface of the Caps Feature Module: @a JPEGSqueeze

@addtogroup fm_jpegsqueeze
@brief Fast compression of jpeg to specified size.
@{

@defgroup fm_jpegsqueeze_api JpegSqueeze API
@{

    @brief
    Jpeg squeeze, squeezes a jpeg image into a new smaller jpeg  
    with a desired maximum size.

    @param[in] pSrcStream Stream containing the input image.
    @param[in] pDstStream Stream where the output image will be outputted.
    @param[in] proposedSize Desired maximum size of the new jpeg image in bytes.
               Must be greater than 0.
    @param[out] ppIterator A pointer to an iterator object. If set to NULL,
                the operation will be performed directly.

    @remarks
    @copydoc iterative_operations

    @return 
    @c CERR_OK if no errors or an appropriate error code otherwise.
       CERR_OPERATION_FAILED is returned if the function failed to
       create a small enough jpeg.

    @since 3.8

</member>
        <member name="M:caps_insertImageFromRawMask(cips*,CTImage*,OWNERSHIP_POLICY,CTImage*,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
	@brief
	Inserts a raw image on the current session with a separately defined alpha
	mask.

	@param session
	Handle to a valid session.

	@param pImage
	A raw image

	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pImage argument. If CAPS is given
	ownership responsibility over @a pImage, it will be destroyed using
	caps_destroyImage() when no longer needed.

	@param pMask
	A raw image containing the alpha mask. The mask is assumed to be a gray
    scale image. If the image is of a richer color format it will first
    automatically be converted into gray scale and any alpha channel will 
    be ignored.

	@param maskOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pMask argument. If CAPS is given
	ownership responsibility over @a pMask, it will be destroyed using
	caps_destroyImage() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

	@remarks

	@note
	The supported color modes are different from caps_insertFrameFromRaw.

	The following color modes are supported for the image:

	@li @c  CM_ARGB8888
	@li @c  CM_BGRA8888
	@li @c  CM_RGB565
	@li @c  CM_BGR565
	@li @c  CM_AYUV4444

	The following color modes are supported for the mask:

	@li @c  CM_GRAY8
    @li @c  CM_ARGB8888
	@li @c  CM_BGRA8888
	@li @c  CM_RGB565
	@li @c  CM_BGR565
	
	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	caps_insertFrameFromRaw()\n

	@since 3.6 (support for different sizes in 3.8)

</member>
        <member name="M:caps_insertFrameFromBufferMask(cips*,CTBuffer*,OWNERSHIP_POLICY,CTBuffer*,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
	Inserts a frame on the current session with a separately defined alpha
	mask.

	@param session
	Handle to a valid session.

	@param pImage
	Buffer containing the image.

	@param imageOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pImage argument. If CAPS is given
	ownership responsibility over @a pImage, it will be destroyed using
	caps_destroyBuffer() when no longer needed.

	@param pMask
	Buffer containing the alpha mask. The luminance
	channel of the mask image is used as the frame's alpha channel.

	@param maskOwnership
	An option from the ::OWNERSHIP_POLICY enumeration which specifies what
	ownership policy to use with the @a pMask argument. If CAPS is given
	ownership responsibility over @a pMask, it will be destroyed using
	caps_destroyBuffer() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

	@remarks

	A frame is an overlay image stretched or contracted to fit the size of the
	session image. The blending of the frame and the session image is
	defined by an alpha mask. The image and the alpha mask are stretched
	separately, and may have different dimensions.

	The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	\n
	The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

	\n
	The mask is typically a gray scale image.

	@return 
	@c CERR_OK if successful or a specific error code upon failure.

	@sa
	caps_insertFrameFileMask()\n
	caps_insertFrameFromBuffer()\n

	@since 3.6 (support for more image types in 3.8)

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:caps_insertFrameFromFileMask(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Char!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Inserts a frame on the current session with a separately defined alpha
    mask.

    @param session
    Handle to a valid session.

    @param imagename
    String specifying the file system path of the image.

    @param maskname
    String specifying the file system path of the alpha mask. The luminance
    channel of the mask image is used as the frame's alpha channel.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image. The blending of the frame and the session image is
    defined by an alpha mask. The image and the alpha mask are stretched
    separately, and may have different dimensions.

    The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The mask is typically a gray scale image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameMask()\n
    caps_insertFrameFromBufferMask()\n
    caps_insertFrameFromFile()\n

    @since 3.6 (support for more image types in 3.8)

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:caps_insertFrameMask(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,OWNERSHIP_POLICY,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@ingroup fm_imagefusion
@file fm_imagefusion.h
@brief Defines the interface of the Caps Feature Module: @a ImageFusion

    @addtogroup fm_imagefusion
    @brief Blending image pairs using defined masks.

    @{

@defgroup fm_imagefusion_api ImageFusion API
@{

    @brief
    Inserts a frame on the current session with a separately defined alpha
    mask.

    @param session
    Handle to a valid session.

    @param pImageStream
    A pointer to a stream containing an image.

    @param imageFormat
    The image format of the image.

    @param imageOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pImageStream argument. If CAPS is given
    ownership responsibility over @a pImageStream, it will be destroyed using
    ctstream_destroy() when no longer needed.

    @param pMaskStream
    A pointer to a stream containing a mask.

    @param maskFormat
    The image format of the mask.

    @param maskOwnership
    An option from the ::OWNERSHIP_POLICY enumeration which specifies what
    ownership policy to use with the @a pMaskStream argument. If CAPS is given
    ownership responsibility over @a pMaskStream, it will be destroyed using
    ctstream_destroy() when no longer needed.

    @param invertAlpha
    If this is false, 0 - 255 is fading from session to frame
    If this is true,  0 - 255 is fading from frame to session

    @remarks

    A frame is an overlay image stretched or contracted to fit the size of the
    session image. The blending of the frame and the session image is
    defined by an alpha mask. The image and the alpha mask are stretched
    separately, and may have different dimensions.

    The following image types are supported for the image:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The following image types are supported for the mask:

    @li JPEG 
    @li PNG
    @li GIF
    @li BMP
    @li WBMP
    @li TIFF

    \n
    The mask is typically a gray scale image.


    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_insertFrameFromBufferMask()\n
    caps_insertFrameFromFileMask()\n

    @since 3.8

    @deprecated This function is deprecated since 5.3.
    Use caps_insertImageFromRawMask() instead.

</member>
        <member name="M:caps_endWhiteboardEnhancement(cips*)">
    @brief

    @param[in] session
    Handle to a valid session.

    @since 3.8 R4

</member>
        <member name="M:caps_setWhiteboardEnhancement(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Effect should enhance text and drawings on an image of a whiteboard.

    @param[in] session
    Handle to a valid session.

    @param[in] soft
    If true, the effect will better preserve the colors on the whiteboard.
    If false, the image contrast will be enhanced and text should be easier
    to read.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

</member>
        <member name="M:caps_beginWhiteboardEnhancement(cips*)">
@} 
@addtogroup fxgroup_whiteboard
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

</member>
        <member name="M:caps_endNoiseReduction(cips*)">
    @brief
    End noise reduction on the current session image.

    @param[in] session
    Handle to a valid session.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_setNoiseReduction(cips*,System.Single)">
    @brief
    Applies noise reduction on the current session image.

    @param[in] session
    Handle to a valid session.

    @param[in] level
    The noise reduction adjustment level. Range 0.0 - 1.0, where 0.0 indicates 
    low noise reduction and 1.0 indicates high noise reduction.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_beginNoiseReduction(cips*)">
@} 
@addtogroup fxgroup_noisereduction
@copydoc begin_end_effects
@{

    @brief
    Begin noise reduction on current session image.

    <b>Note</b> This function and @a NoiseReduction2 uses different
    algorithms.

    @param[in] session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8 R4

    @deprecated This function is deprecated since 5.3.
    Use noisereduction2 instead.

</member>
        <member name="M:caps_applyFoundation(cips*,CTRect*)">
@ingroup fm_imageenhance
@file fm_imageenhance.h
@brief Defines interfaces for the Caps Feature Module: @a ImageEnhance

@addtogroup fm_imageenhance
@brief Enhancement effects

@addtogroup fxgroup_foundation
@{

    @brief
    Applies a foundation effect on the current session image.

    @param[in] session
    Handle to a valid session.

    @param[in] pRegion
    (OPTIONAL) Pointer to a @c CTRect object specify a region in which the 
    effect is applied, for instance a face, given in current coordinates. 
    Set this argument to @c NULL if the effect should be applied to the 
    entire image.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

    @deprecated This function is deprecated since 5.3.
    Use @ref fm_facebeautification instead.

</member>
        <member name="M:ctimageanalysis_getImagePixelLuminanceHistogram(CTImageAnalyzer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Returns image luminance intensity histogram on the entire image 
    based on pixel data values.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param[out] pHistogram. Luminance intensity histogram of the image. Must be allocated with numberOfBins.

    @param numberOfBins. Number of histogram bins.  Range [64, 128 or 256].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_getImagePixelROILuminanceHistogram(CTImageAnalyzer*,CTRect,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Returns image luminance intensity histogram on region of interest (ROI) in the image 
    based on pixel data values.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param ROI. ROI area in the image. Must be within image dimensions.

    @param[out] pHistogram. Luminance intensity histogram of the image ROI. Must be allocated with numberOfBins.

    @param numberOfBins. Number of histogram bins.  Range [64, 128 or 256]. 

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_getImageDCROILuminanceHistogram(CTImageAnalyzer*,CTRect,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Returns image luminance intensity histogram on region of interest (ROI) in the image 
    based on Jpeg DC coefficients.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param ROI. ROI area in the image. Must be within image dimensions.

    @param[out] pHistogram. Luminance intensity histogram of the image ROI. Must be allocated with numberOfBins.

    @param numberOfBins. Number of histogram bins. Range [64, 128 or 256]. 

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_getImageDCLuminanceHistogram(CTImageAnalyzer*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Returns image luminance intensity histogram on the entire image 
    based on Jpeg DC coefficients.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param[out] pHistogram. Luminance intensity histogram of the image. Must be allocated with numberOfBins.

    @param numberOfBins. Number of histogram bins. Range [64, 128 or 256].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_destroyImageAnalyzer(CTImageAnalyzer*)">
    @brief
    Destroys CTImageAnalyzer object.

    @param pImageAnalyzer
    Valid image analyzer object.


</member>
        <member name="M:ctimageanalysis_getImageROISharpnessMetricEx(CTImageAnalyzer*,CTRect,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Estimates overall region of interest (ROI) sharpness of the image by estimating sharpest details in the ROI.

    @param pImageAnalyzer
    Valid image analyzer object.

    @param ROI. ROI area in the image. Must be within image dimensions.

    @param deltaX. Number of pixels to step between each sampled MCU, in x direction. A multiple of the MCU width is recommended but not required.
    If it is less than the MCU width in pixels, the MCU width in pixels will be used instead.

    @param deltaY. Number of pixels to step between each sampled MCU, in y direction. A multiple of the MCU height is recommended but not required.
    If it is less than the MCU height in pixels, the MCU height in pixels will be used instead.

    @param maxNumYDus. Maximum number of Y DU:s to measure in each MCU

    @param[out] pSharpness. Estimated sharpness. Larger value represents larger overall sharpness of the ROI.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_getImageROISharpnessMetric(CTImageAnalyzer*,CTRect,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Estimates overall region of interest (ROI) sharpness of the image by estimating sharpest details in the ROI.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param ROI. ROI area in the image. Must be within image dimensions.

    @param[out] pSharpness. Estimated sharpness. Larger value represents larger overall sharpness of the ROI.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_getImageSharpnessMetric(CTImageAnalyzer*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Estimates overall image sharpness of the image by estimating sharpest details in the image.
    
    @param pImageAnalyzer
    Valid image analyzer object.
    
    @param[out] pSharpness. Estimated sharpness. Larger value represents larger overall sharpness of the iamge.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_createImageAnalyzer(CTStream*,CTImageAnalyzer**)">
    @brief
    Creates image analyzer object.
    
    @param pStream
    Valid jpeg file stream.

    @param[out] ppImageAnalyzer
    Created image analyzer object.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:ctimageanalysis_curveRecommendation(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
@brief
Analyzes an image to give recommended curves for hue, saturation and lightness tuning.

@param pBitmap
Valid CTBitmap image.

@param[out] pHueCurve
Recommended curve for Hue to use in HueSaturationLight filter. Hue will always remain unchanged.
Must point to a CTint32 array with length 256.

@param[out] pSaturationCurve
Recommended curve for Saturation to use in HueSaturationLight filter.
Must point to a CTint32 array with length 256.

@param[out] pLightCurve
Recommended curve for light to use in HueSaturationLight filter. Light will always aim for histogram equalisation.
Must point to a CTint32 array with length 256.

@return 
@c CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="T:CTImageAnalyzer">
@ingroup fm_imageanalysis
@file fm_imageanalysis.h
@brief Defines interfaces for the Caps Feature Module: @a Image analysis

    @addtogroup fm_imageanalysis
    @brief Image analysis module contains set of methods to estimate sharpness of the entire or part of the image.

    @{

</member>
        <member name="M:caps_endCustomEffects(cips*)">
    @brief

    @param session
    Handle to a valid session.


</member>
        <member name="M:caps_setCustomEffects(cips*,CTCustomEffects*)">
    @brief
    Adds custom effects to the filter pipe.

    @param session
    Handle to a valid session.

    @param pCustomEffects
    Pointer to CustomEffect structure.  

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_beginCustomEffects(cips*)">
    @brief

    @param session
    Handle to a valid session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="F:CICustomEffectsInterface.OnRenderBlock">
        Block render phase event.

        CRESULT OnRenderBlock( void* customParameters, CTCustomEffectsBlockInfo* blockInfo);
        
        @param customParameters
        Pointer to user defined input parameters. 

        @param blockInfo
        Pointer to block info structure with information about the
        image data passed to the block rendering event. 

        @remarks
        This event is called once for each block of the image being 
        processed. Any modifications to the image data should be performed
        in this event.

        @return
        If successful the event should return CERR_OK. Otherwise an
        appropriate return code from the CRESULT enumeration.

</member>
        <member name="F:CICustomEffectsInterface.OnPreRenderImage">
        Pre render phase event.
        CRESULT OnPreRenderImage( void* customParameters, CTCustomEffectsRenderInfo*  renderInfo);
        
        @param customParameters
        Pointer to user defined input parameters. 

        @param renderInfo
        Render info passed by the rendering system

        @remarks
        This event is invoked by the framework once for the entire image
        at the start of the render phase. It is suggested to be used for 
        preparing the custom effect for processing pixel data in subsequent calls
        to the OnRenderBlock event.

        @return
        If successful the event should return CERR_OK. Otherwise an
        appropriate return code from the CRESULT enumeration.

</member>
        <member name="T:CICustomEffectsInterface">
@interface CICustomEffectsInterface
@brief Callback interface for custom effects.

</member>
        <member name="F:CTCustomEffectsBlockInfo.outBlockBuffer">
@brief The size and contents of the output image block. This block
should be used as output for processed pixeldata.

The image data is in CM_AYUV4444 color format.

</member>
        <member name="F:CTCustomEffectsBlockInfo.outBlockRect">
@brief The size and location of the output block within the entire
image being rendered.

</member>
        <member name="F:CTCustomEffectsBlockInfo.inBlockBuffer">
@brief The size and contents of the input image block.

This buffer should only be read from and never modified. The processed
image data should be written to outBlockBuffer.

The image data is in CM_AYUV4444 color format.

</member>
        <member name="F:CTCustomEffectsBlockInfo.inBlockRect">
@brief The size and location of the input block within the entire image
being rendered. Note that the position and size of the input block 
may be altered by using CTCustomEffectsConfig::blockMargins.

</member>
        <member name="T:CTCustomEffectsBlockInfo">
@brief The information structure passed to custom effects in order
to specify in detail the characteristics of an image data render block.

</member>
        <member name="F:CTCustomEffectsRenderInfo.renderScale">
The scale difference between 'inputSize' and 'targetSize'.

</member>
        <member name="F:CTCustomEffectsRenderInfo.targetSize">
The size of the entire image when the render process is concluded.
Scaling the image to this size is performed by the rendering engine. 
This member is provided for reference only.

</member>
        <member name="F:CTCustomEffectsRenderInfo.inputSize">
The size of the image at the input of the custom filter. 
For example, if the source image is 640x480 and only custom effect is applied, 
this member will be set to 640x480. 
However, if a crop or some other effect has been inserted before, 
cropping to size 100x100, then this member will be set to 100x100.

</member>
        <member name="F:CTCustomEffectsConfig.blockMargins">
        If extra data is needed outside of the block boarders then use this rectangle. 
        For instance, if working with a kernel matrix of 5x5 pixels when processing each 
        pixel of a block, 2 additional pixels are needed from outside the block when 
        processing the pixels at each side of the block edge. In this case the
        'blockMargins' member should be set to:

        CTRect{ -2, -2, 4, 4 }

        If no additional pixels are required initilize parameter members to zero.

</member>
        <member name="M:caps_lutTools_renderLut(LutTools*,System.Byte*,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Render the curve defined by the control points in the selected range.
           There must be at least two control points in the lut tools handle
           to define a curve. The resulting curve is truncated to fit 
           the selected range. The curve might be truncated further to fit
           the current output data type. The result can be rendered to both
           an CTuint8 array and an CTfloat array. These arrays must at least
           contain two elements, i.e. @a size &gt;= 2.
 
    @param h A pointer to a lut tools handle.
 
    @param lutU8 An CTuint8 array in which to store the result, or 0.
 
    @param lutF An CTfloat array in which to store the result, or 0.
 
    @param size The number of elements in the output array.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_deletePoint(LutTools*,CTVector)">
    @brief Delete a control point from the lut tools handle. Only the x-values
           are compared before a control point is being deleted.

    @param h A pointer to a lut tools handle.

    @param p The control point to delete.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_addPoint(LutTools*,CTVector)">
    @brief Add a control point to the lut tools handle. Any previously added
           control point sharing the same x-value as the new control point
           will be replaced.
 
    @param h A pointer to a lut tools handle.
 
    @param p The control point to add.
 
    @return
    @c CERR_OK if successful.
    @c CERR_OPERATION_FAILED if the control point array is full.
    A specific error code upon other faulires.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_clearPoints(LutTools*)">
    @brief Clear all the control points in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_getPoints(LutTools*,CTVector*)">
    @brief Get the control points currently in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @param p An array in which to store the control points. The array must
             be big enough to fit all the control points.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_getNrOfPoints(LutTools*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief Get the number of control points currently in the lut tools handle.
 
    @param h A pointer to a lut tools handle.
 
    @param nrPoints A pointer to the resulting number of control points.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setPoints(LutTools*,CTVector*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Set an array of control points. All points previously added to
           the lut tools handle will be deleted. The control points in
           the array must be strict ascending with respect to x.
 
    @param h A pointer to a lut tools handle.
 
    @param p An array of control points.
 
    @param nrOfPoints The number of control points in the array.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setRange(LutTools*,CTVector,CTVector)">
    @brief Set the range to use when rendering the lookup table.
 
    @param h A pointer to a lut tools handle.
 
    @param min The minimum values of x and y.
 
    @param max The maximum values of x and y.
 
    @return
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 5.3

</member>
        <member name="M:caps_lutTools_setCurveType(LutTools*,CTLutToolsCurveTypes)">
    @brief Set the curve type.
 
    @param h A pointer to a lut tools handle.
 
    @param type One of the curve types defined in ::CTLutToolsCurveTypes.
 
    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_lutTools_destroyHandle(LutTools*)">
    @brief Destroys a Lookup Table Tools handle.

    @param h A pointer to a lut tools handle.

    @since 5.3

</member>
        <member name="M:caps_lutTools_createHandle(LutTools**,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Creates a Lookup Table Tools handle.

    @param h A pointer to the resulting lut tools handle pointer.

    @param maxNrOfPoints The maximum number of control points to be used when
                         defining the curves.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="T:LutTools">
@brief The handle type used by the lookup table tools. 
</member>
        <member name="F:NATURAL_CUBIC_SPLINE">
Use natural cubic spline interpolation between the points. 
</member>
        <member name="F:LINEAR">
Use linear interpolation between the points. 
</member>
        <member name="M:caps_endRgbMixerLookup(cips*)">
    @brief
    End the RGB Mixer Lookup effect.

    @param session Handle to a valid session.

    @since 5.3

</member>
        <member name="M:caps_setRgbMixerLookup(cips*,System.Byte**,System.Byte**,System.Byte**,System.Byte**)">
    @brief
    Set the color mixer lookup tables. Each table must be 256 bytes in size.
    For each color there are 4 tables, one for each destination color;
    0 = alfa, 1 = red, 2 = green, 3 = blue. You only need to provide pointers
    to the tables you want to update.

    The resulting color (ao,ro,go,bo) is calculated from the input color
    (ai,ri,gi,bi) like this:
 
        ao = sat (alfa[0][ai] + red[0][ri] + green[0][gi] + blue[0][bi])
        ro = sat (alfa[1][ai] + red[1][ri] + green[1][gi] + blue[1][bi])
        go = sat (alfa[2][ai] + red[2][ri] + green[2][gi] + blue[2][bi])
        bo = sat (alfa[3][ai] + red[3][ri] + green[3][gi] + blue[3][bi])

    @param session Handle to a valid session.

    @param alfa A pointer to the alfa-related lookup tables, or 0. Each of
                these 4 pointers can point to a table or be 0.

    @param red A pointer to the red-related lookup tables, or 0. Each of
               these 4 pointers can point to a table or be 0.

    @param green A pointer to the green-related lookup tables, or 0. Each of
                 these 4 pointers can point to a table or be 0.

    @param blue A pointer to the blue-related lookup tables, or 0. Each of
                these 4 pointers can point to a table or be 0.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_beginRgbMixerLookup(cips*)">
@} 
@defgroup fxgroup_rgb_mixer_lookup RGB Mixer Lookup 
@{

    @brief Begin the RGB Mixer Lookup effect. The effect is initiated
    with y=x tables for A, R, G and B respectively, i.e.
 
        alfa  = {y=x, 0, 0, 0}
        red   = {0, y=x, 0, 0}
        green = {0, 0, y=x, 0}
        blue  = {0, 0, 0, y=x}

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_endSimpleRgbLookup(cips*)">
    @brief
    End the Simple RGB Lookup effect.

	@param session Handle to a valid session.

    @since 5.3

</member>
        <member name="M:caps_setSimpleRgbLookup(cips*,System.Byte*,System.Byte*,System.Byte*)">
    @brief
    Set the color lookup tables. Each table must be 256 bytes in size.
    You only need to provide pointers to the tables you want to update.
    E.g. if you want to update the red table you can let green and blue be 0.

	@param session Handle to a valid session.

    @param red A pointer to the red lookup table, or 0.
    
    @param green A pointer to the green lookup table, or 0.
    
    @param blue A pointer to the blue lookup table, or 0.
	
    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_beginSimpleRgbLookup(cips*)">
@ingroup fm_color_adjustments
@file fm_color_adjustments.h
@brief Defines the interface of the Caps Feature Module: @a ColorAdjustments

@addtogroup fm_color_adjustments
@brief Lookup table based color adjustments.
@{

@defgroup fxgroup_simple_rgb_lookup Simple RGB Lookup
@{

    @brief Begin the Simple RGB Lookup effect. The effect is initiated
           with y=x tables for R, G and B.

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_endTemperatureAndTint(cips*)">
    @brief
    End temperature and tint effect.

	@param session  Handle to a valid session.

    @since 3.9.2

</member>
        <member name="M:caps_setTemperatureAndTint(cips*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Set function to modify the color temperature and tint.

	@param session Handle to a valid session.

	@param temperatureIndex Color temperature index.
		Range [-100, 100], where 0 is default, unmodified color temperature.

	@param tintIndex Color tint index.
		Range [-100, 100], where 0 is the default, unmodified color tint. 

	@return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.9.2

</member>
        <member name="M:caps_beginTemperatureAndTint(cips*)">
@} 
@defgroup fxgroup_temperatre_and_tint Temperature And Tint 
@{

    @brief Begin the Temperature and Tint effect.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.9.2

</member>
        <member name="M:caps_endAutoEnhance(cips*)">
    @brief
    Ends an enhancement block on the current session image.

    @param session
    Handle to a valid session.

    @since 3.6

</member>
        <member name="M:caps_setAutoEnhance(cips*,AutoEnhanceParameters!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Specifies the desired behaviour of the image enhancement.
    
    The following effects can be applied:
    - White balance
    - Contrast
    - Local boost
    .

    If more than one effect is set, they will be applied in the given order.

    The behaviour can be fully automatic, semi automatic or manual. It is
    possible to start with full automatic and switch over to semi automatic
    or manual. For a small example of this see caps_getAutoEnhance(). It is
    of course possible to switch back to fully automatic again if desired.

    @note In order to take effect, a render operation must be completed;
    see for example caps_render().

    @param session
    Handle to a valid session.

    @param parameters
    A pointer to a structure defining the desired behaviour.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_beginAutoEnhance(cips*)">
    @brief
    Starts an enhancement block on the current session image.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_endExposure(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.4

</member>
        <member name="M:caps_setExposureMode(cips*,CAPS_EXPOSURE_MODE)">
    @brief
    Select which exposure mode to be used, @c ::CAPS_EXPOSURE_MODE.
    Default mode is EXPOSURE_GAMMA_MODE.
 
    @param session
    Handle to a valid session.
 
    @param mode
    The exposure mode.
 
    @return 
    @c CERR_OK if successful or a specific error code upon failure.
 
    @since 3.9 R01

</member>
        <member name="M:caps_setExposure(cips*,System.Single)">
    @brief
    Set the desired exposure level. Positive values will make the image
    brighter, negative values will make it darker.

    @param session
    Handle to a valid session.

    @param gain
    The exposure level. Range is [ -1.0, 1.5 ], but for gamma mode the 
    effect saturates at 1.0, which means that everything between ]1.0, 1.5]
    will be intrepreted as 1.0. 
    0.0 equals no change of exposure. Recommended range for both gamma and 
    natural mode for normal usage is [ -1.0, 1.0 ].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_beginExposure(cips*)">
    @brief
    Adjust the brightness of an image using one of the modes in
    @c ::CAPS_EXPOSURE_MODE. The default mode is EXPOSURE_GAMMA_MODE.

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="F:EXPOSURE_NATURAL_MODE">
@brief
        Adjust the brightness of an image using a "natural" curve inspired
        by a @em film @em characteristic @em curve. This mode preserves
        the blacks in an image much better than the gamma mode. 
</member>
        <member name="F:EXPOSURE_GAMMA_MODE">
@brief
        Adjust the brightness of an image using a gamma correction curve. 
</member>
        <member name="M:caps_applyAutoLevels(cips*)">
    @brief
    Applies auto level adjustment to the current session image.
    
    @param session 
    A valid session handle.

    @remarks
    Auto level adjustment balances the intensity level of the image, for
    example making dark images lighter and vice versa.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_endLevels(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.4

</member>
        <member name="M:caps_setLevels(cips*,System.Single,System.Single,System.Single)">
    @brief
    Applies level adjustment to the current session image.

    @param session
    Handle to a valid session.

    @param white
    The position of the bright saturating point. Range (0.0) - (1.0).

    @param gray
    The relative position of the middle gray point. Range (0.0) - (1.0),
    where 0.0 is at the bright saturating point and 1.0 is at
    the dark saturating point.

    @param black
    The position of the dark saturating point. Range (0.0) - (1.0).

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @remarks
    The value of 'black' should be smaller than, or equal to
    the value of 'white'.

    @since 3.4

</member>
        <member name="M:caps_beginLevels(cips*)">
@} 
@defgroup fxgroup_levels Levels 
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_applyWhiteBalance(cips*,CAPS_WB_MODE,System.Byte,System.Byte,System.Byte)">
    @brief
    Performs white balance adjustment on an image.

    @param session 
    A valid session handle.   

    @param mode
    The white balance mode, can be any of the values from the @c ::CAPS_WB_MODE
    enumeration. WB_CLUSTER_MODE is prefered as default.

    @param r
    Red component of the white color used for reference 
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @param g
    Green component of the white color used for reference
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @param b
    Blue component of the white color used for reference
    This requires that @c mode is set to @c WB_MANUAL_MODE, neglected otherwise.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.


    @since 3.1

</member>
        <member name="F:WB_CLUSTER_MODE">
Calulates the reference from the mean value of the 256-bin distribution.
</member>
        <member name="F:WB_MANUAL_MODE">
Uses a white reference color.
</member>
        <member name="F:WB_MAX_MODE">
Uses the estimated maximum intensity color.
</member>
        <member name="F:WB_MEAN_MODE">
Uses the estimated mean gray for the color correction.
</member>
        <member name="M:caps_endColorBoost(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setColorBoost(cips*,System.Single)">
    @brief
    Amplifies the colors of the current session image.

    @param session
    Handle to a valid session.

    @param gain
    The color boost gain level. Range [-1.0, 20.0]. Negative values reduce the 
    colors. Recommended values are in the range [-1.0, 1.0].

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginColorBoost(cips*)">
@} 
@defgroup fxgroup_color_boost Color Boost 
@copydoc begin_end_effects
@{

    @brief

    @param session
    Handle to a valid session.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endLocalBoost(cips*)">
    @brief
    Ends the LocalBoost effect.

    @param session 
    A valid session handle.   

    @return 
    None

    @sa 
    caps_beginLocalBoost()\n
    caps_setLocalBoost()\n

    @since 3.6

</member>
        <member name="M:caps_beginLocalBoost(cips*)">
@ingroup fm_clearshot
@file fm_clearshot.h
@brief Defines the interface of the Caps Feature Module: @a ClearShot

@addtogroup fm_clearshot
@brief Image enhancing effects
@{

@defgroup fxgroup_local_boost Local Boost
@copydoc begin_end_effects
@{

    @brief
    Automatically boost and enhance images with unequal illumination.
    
    The image is analyzed and segmented into a dark part and a light part.
    The two parts are processed separatly with the parameters given in
    caps_setLocalBoost() and are finally blended together to produce a
    modified image.

    @param session
    A valid session handle.   

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @remarks
    This function should not be used together with the deprecated caps_applyLocalBoost().

    @sa 
    caps_setLocalBoost()\n
    caps_endLocalBoost()\n

    @since 3.6

</member>
        <member name="M:cttmo_destroy(CTTMO*)">
@brief
Destroys a tone map operator.

</member>
        <member name="M:cttmo_apply(CTTMO*)">
    @brief
    Applies a tone map operator.

    @param pTMO
    A tone map operator object.

    returns CERR_OK on success.

</member>
        <member name="M:cttmo_createGammaTmoHDR(System.Single,System.Single,CTBitmap*,CTBitmap*,CTTMO**)">
    @brief
    Creates a gamma correcting tone map operator.
    
    @param gamma
    The gamma value that should be applied.
    Valid values are in the exclusive range [0.0, +inf]

    @param scale
    After gamma correction the values may be scaled.

    @param pHDR
    HDR-image that should be tone mapped, supports @CM_IRGBHalffloat.

    @param [out] pLDR
    LDR-image that is the result of the tone mapping, supports @CM_BGRA8888

    @param ppTMO
    Created tone mapping object.

    returns CERR_OK on success.

</member>
        <member name="M:cttmo_createGammaTmo(System.Single,System.Single,CTBitmap*,CTTMO**)">
    @brief
    Creates a gamma correcting tone map operator.
    
    @param gamma
    The gamma value that should be applied.
    Valid values are in the exclusive range [0.0, +inf]

    @param scale
    After gamma correction the values may be scaled.

    @param [in, out] pBitmap
    The image that should be tone mapped, supports @CM_BGRA8888.
    
    @param ppTMO
    Created tone mapping object.

    returns CERR_OK on success.

</member>
        <member name="M:cttmo_createHDRGradTmo(CTTMOGradSettings,CTBitmap*,CTBitmap*,CTTMO**)">
    @brief
    Creates a local gradient domain tone map operator for high dynamic range input.

    @param settings
    Parameter setting for the tone mapping.

    @param pHDR
    HDR-image that should be tone mapped, supports @CM_IRGBHalffloat

    @param pLDR
    LDR-image that is the result of the tone mapping, supports @CM_BGRA8888
    returns CERR_OK on success.

    @param ppTMO
    Created tone mapping object.

</member>
        <member name="M:cttmo_createLDRGradTmo(CTTMOGradSettings,CTBitmap*,CTTMO**)">
    @brief
    Creates a local gradient domain tone map operator for low dynamic range input.

    @param settings
    Parameter setting for the tone mapping.

    @param[in,out] pBitmap
    The image that should be tone mapped, supports @CM_BGRA8888.

    @param ppTMO
    Created tone mapping object.

    returns CERR_OK on success.

</member>
        <member name="F:CTTMOGradSettings.noise">
@brief
Controls supression of noise amplification, value should rise with
the noise of the input image combined with the strength applied.

Recommended value is between 0.1 and 0.3.
Valid values are in the inclusive range [0.0-1.0]
Note: High values will result in loss of fine details.
      Combining a low value and high strength may result in noisy images.

</member>
        <member name="F:CTTMOGradSettings.saturation">
@brief
Controls color saturation using a power law.
Recommended range is between 0.4 and 0.8.
Valid values are in the exclusive range [0.0, +inf]

</member>
        <member name="F:CTTMOGradSettings.gamma">
@brief
Controls global contrast enhancement using a power law.
Recommended range is between 0.6 and 1.0
Valid values are in the exclusive range [0.0, +inf]

</member>
        <member name="F:CTTMOGradSettings.strength">
@brief
Controls strength of local contrast enhancement.
The higher value the stronger effect.
Recommended range is between 0.1 and 0.30.
Having a high value may result in dark noisy images.
Valid values are in the inclusive range [0.0-1.0]

</member>
        <member name="T:CTTMOGradSettings">
@brief
Settings for gradient domain tone map operator.

</member>
        <member name="T:CTTMO">
@file cttmo.h
@brief Defines the interface of @a CTTMO
@ingroup cttmo

@brief
Tone mapping operator base type.

</member>
        <member name="M:ctstream_createBufferStreamEx(CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void*,=FUNC:System.Void(System.Void*),CTStream**)">
    @brief
    Create a stream from a buffer.

    This function will create a stream object that uses a @c CTBuffer as 
    underlying resource. 

    For output streams, the buffer can grow to a max size expecified as a 
    parameter, which means that the internal pointer in the @c CTBuffer 
    object ( @c data member ), can be freed and allocated internally multiple 
    times.

    @param pBuffer The input buffer that will be used to read or write data to.
    The CTBuffer struct that pBuffer points to must be valid during the whole
    life time of the CTStream.
    @param maxBuffer max size the buffer can become when writing data to it. 
    Zero means that it can grow as much as needed. Initial buffer size is fetched
    from the input buffer.
    @param pExtraContext Extra context sent to the buffer. This context will
    be sent as an argument to destroyFunc. If set to null, a null parameter
    is passed to destroyFunc (if one is provided).
    @param destroyFunc Extra destroy function called when the buffer stream
    is destroyed. pExtraContext is sent as an argument to this function. The
    function is called after all other destruction has been processed. If set
    to null, the function will not be called.

    @param[out] ppStream Pointer to an stream object.

    When the stream object (returned by this function) is no longer needed, it
    should be destroyed using: ctstream_destroy()

    @return
    @li @c CERR_OK if successful or a specific error code upon failure.
 
    @note The extra context can be used to, for instance, automatically destroy
    a buffer when the stream is destroyed.

    @since 3.8

</member>
        <member name="M:ctstream_createBufferStream(CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTStream**)">
@ingroup scb_ctstream_buffer
@file ctstream_buffer.h
@brief Buffer based stream creation.

@addtogroup scb_ctstream_buffer
@brief Creation of buffer streams
@{

    @brief
    Create a stream from a buffer.

    This function will create a stream object that uses a @c CTBuffer as 
    underlying resource. 

    For output streams, the buffer can grow to a max size expecified as a 
    parameter, which means that the internal pointer in the @c CTBuffer 
    object ( @c data member ), can be freed and allocated internally multiple 
    times.

    @param pBuffer The input buffer that will be used to read or write data to.
    The CTBuffer struct that pBuffer points to must be valid during the whole
    life time of the CTStream.
    @param maxBuffer max size the buffer can become when writing data to it. 
    Zero means that it can grow as much as needed. Initial buffer size is fetched
    from the input buffer.

    @param[out] ppStream Pointer to an stream object.

    When the stream object (returned by this function) is no longer needed, it
    should be destroyed using: ctstream_destroy()

    @return
    @li @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8

</member>
        <member name="M:ctrewind_setCutMode(CTRewind*,CTRewindCutMode)">
    @brief
    Sets appropriate cut mode. Two modes are possible:
    REWIND_GCUT or REWIND_LTW.
    Mode can be switched before every output rendering.
    Default mode is REWIND_GCUT.

    @param pRewind
    A valid Rewind.

    @param mode
    Cut mode

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getScaleFactor(CTSize,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Returns scale factor that is nearest power 2 factor used to rescale
    source image to internal work image. Source image has to be thereafter fitted
    to be evenly divisable by the factor.

    @param imageSize
    Size of the image.

    @param pFactor
    Factor to adjust image after.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getRotation(CTRewind*,CTRewindRotation*)">
    @brief
    Get rotation of output images and coordinates.

    @param pRewind
    A valid Rewind.

    @param rotation
    Current rotation.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_setRotation(CTRewind*,CTRewindRotation)">
    @brief
    Set rotation of output images and coordinates.

    @param pRewind
    A valid Rewind.

    @param rotation
    Desired rotation.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getOutputDecoder(CTRewind*,CTDecoder**)">
    @brief
    Get output decoder. Typically called when rewind editing is completed.
    Can be called only if cut mode is REWIND_LTW.

    @param pRewind
    A valid Rewind.

    @param [out] ppDecoder
    Redirected to a pointer to decoder.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_renderToJpeg(CTRewind*,CTStream*)">
    @brief
    Render to jpeg. Typically called when rewind editing is completed.

    @param pRewind
    A valid Rewind.

    @param [out] pStream
    Valid stream into which to render.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_render(CTRewind*,CTBitmap*)">
    @brief
    Render. Typically called to update background when user has selected a face or changed background.

    @param pRewind
    A valid Rewind.

    @param [out] pBitmap
    Valid bitmap into which result will be rendered.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_undo(CTRewind*)">
    @brief
    Undo last face stitching. Typically used when a stitching results in undesired results. 
    To undo all operations, reselect the same background.

    @param pRewind
    A valid Rewind.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_selectFace(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Stitch face. Typically called when user selects which alternative to use for a face.

    @param pRewind
    A valid Rewind.

    @param imageIndex
    Selected image index.

    @param faceIndex
    Selected face ID.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_renderFacePreview(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Preview face. No stitching is done by calling this function. Typically called to browse available alternatives.

    @param pRewind
    A valid Rewind.

    @param imageIndex
    Image index to use. First image added is 0.
    
    @param faceIndex
    Face ID to use. Face ID is reported in the FaceRect.

    @param [out] pBitmap
    Valid bitmap into which result will be rendered.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getFaceRect(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTRankedRect*)">
    @brief
    Get rect for a face in an image. No stitching is done by calling this function. Typically called to browse available alternatives by inputting the rect in a regiondecoder. 
    
    @param pRewind
    A valid Rewind.

    @param faceIndex
    Face ID to use. Face ID is available in the RankedRect describing this face.

    @param imageIndex
    Image index to use. First image added is 0.

    @param [out] pFaceRect
    Rect for this face in this image.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getCurrentImageForFace(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get the image index currently used for a face. 

    @param pRewind
    A valid Rewind.

    @param faceIndex
    Face ID to use. Face ID is reported in the FaceRect.

    @param [out] pImageIndex
    Index of the image currently used for this face.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getBestImageForFace(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get the index of the image containing the best version of a specified face.  

    @param pRewindProvider
    A valid RewindProvider.

    @param faceIndex
    Face ID to use. Face ID is reported in the FaceRect.

    @param [out] pBestImageIndex
    Index of best image for this face. 

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getFacePadding(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get padding for faces. With 0 padding the returned faces will fit closely over mouth and eyes. If not set default padding will be applied.

    @param pRewind
    A valid Rewind.

    @param pHorizontal
    Horizontal padding in percent of face width. 

    @param pVertical
    Vertical padding in percent of face height. 

    @param pVerticalOffset
    Offset in vertical direction in percent of face height.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_setFacePadding(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Set padding for faces. With 0 padding the returned faces will fit closely over mouth and eyes. If not set default padding will be applied.

    @param pRewind
    A valid Rewind.

    @param horizontal
    Horizontal padding in percent of face width. 

    @param vertical
    Vertical padding in percent of face height. 

    @param verticalOffset
    Offset in vertical direction in percent of face height. A positive number will
    offset the face rect in positive y direction (downward in the image).

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_autoRewind(CTRewind*)">
    @brief
    Automatically selects the best background and the best version of each face. 
    
    @param pRewind
    A valid Rewind.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getCurrentBackground(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get index of current background.

    @param pRewind
    A valid Rewind.

    @param [out] pBackgroundIndex
    Index of current background.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_selectBackground(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Select which image to use as background.

    @param pRewind
    A valid Rewind.

    @param backgroundIndex
    Image index to be used as background.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getBestBackground(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Find best background.

    @param pRewind
    A valid Rewind.

    @param [out] backgroundIndex
    Image index to be used as background.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getNumberOfFaces(CTRewind*)">
    @brief
    Get number of detected faces. Not all faces might exist in all images. 

    @param pRewind
    A valid Rewind.

    @return Number of unique faces.

</member>
        <member name="M:ctrewind_getNumberOfImages(CTRewind*)">
    @brief
    Get number of available images. 

    @param pRewind
    A valid Rewind.

    @return Number of images.

</member>
        <member name="M:ctrewind_correlateFaces(CTRewind*)">
    @brief
    Correlate faces. Should be called after detectFaces has been called on all images. 
    Correlates faces between images, assigning an ID to each unique face in the set. 

    @param pRewind
    Valid Rewind instance.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_calculateAlignmentEx(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Calculate alignment offset between image and first image.

    This information (if available) is used in ctrewind_correlateFaces.

    @param pRewind
    Valid Rewind instance.

    @param imageIndex
    Index of image to process.

    @param pScaled_GRAY8
    Scaled version of the image given at imageIndex scaled to the size from ctrewind_getAnalysisImageSize().
    Colormode CM_GRAY8.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_calculateAlignment(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Calculate alignment offset between image and first image.

    This information (if available) is used in ctrewind_correlateFaces.

    @param pRewind
    Valid Rewind instance.

    @param imageIndex
    Index of image to process.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_detectFacesEx(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*,CTRankedRect**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Detect faces. This function uses external scaled input image for optimal performance.

    @param pRewind
    Valid Rewind instance.

    @param imageIndex
    Index of image to detect faces in.

    @param pScaled_YUV422_Y1UY2V
    Scaled version of the image given at imageIndex scaled to the size from ctrewind_getAnalysisImageSize().
    Colormode YUV422_Y1UY2V.

    @param [out] ppFaces
    List of found faces. This is a pointer to the internal list of faces and not a copy. Do not free this pointer.
    Each face in the list has an ID that is unique within this list only. The ID is not correlated across images 
    before calling correlateFaces.
    May be 0 if not desired.

    @param [out] pNumFaces
    Number of faces in ppFaces.
    May be 0 if not desired.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_detectFaces(CTRewind*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTRankedRect**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Detect faces.

    @param pRewind
    Valid Rewind instance.

    @param imageIndex
    Index of image to detect faces in.

    @param [out] ppFaces
    List of found faces. This is a pointer to the internal list of faces and not a copy. Do not free this pointer.
    Each face in the list has an ID that is unique within this list only. The ID is not correlated across images 
    before calling correlateFaces.
    May be 0 if not desired.

    @param [out] pNumFaces
    Number of faces in ppFaces.
    May be 0 if not desired.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getAnalysisImageSize(CTRewind*,CTSize*)">
    @brief
    Fetches size of the analysis image that is used for face detection.

    @param pRewind
    Valid Rewind instance.

    @param [out] pSize
    Size of analysis images

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_getSourceImageSize(CTRewind*,CTSize*)">
    @brief
    Returns size of the added source images.

    @param pRewind
    Valid Rewind instance.

    @param [out] pSize
    Size of source images.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_addBitmap(CTRewind*,CTBitmap*)">
    @brief
    Adds bitmap sources to rewind. Bitmaps are owned by caller. Only pointers to bitmaps are saved internally.

    @param pRewind
    Valid Rewind instance.

    @param pBitmap
    Valid input image. 
    Input image must be registered, of the same size as other images added and 
    evenly divisable by the factor returned using ctrewind_getScaleFactor. 
    Image format must be YUV420P.
    

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_destroy(CTRewind*)">
    @brief
    Destroy Rewind instance.

    @param pRewind
    Instance to be destroyed.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_dropSources(CTRewind*)">
    @brief
    Instruct Rewind object to drop all previously registered image source references.
    After this call rewinding and rendering is not possible but all information about faces and images is available.
    In order to get rewinding possibility back one has to register all image references and thereafter call 
    ctrewind_initilizeOnSources.

    @param pRewind
    Valid Rewind object.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_initilizeOnSources(CTRewind*)">
    @brief
    Initilize Rewind object if it was created without sources.
    This call has to be made after calling addStream for all images that will be added if 
    Rewind object from beginning was created without sources. Number of images added by addStream must be the same as number of sources
    specified during Rewind object creation.

    @param pRewind
    Valid Rewind object.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_createWithoutSources(System.Int32!System.Runtime.CompilerServices.IsLong,CTSize,CTRewind**)">
    @brief
    Create Rewind instance without registering images.

    @param numberOfSources
    Number of images that will be used in this rewind session.

    @param sourceSize
    Size of the images that will be used in this rewind session.

    @param [out] ppRewind
    Created instance.

    @return CERR_OK on success.

</member>
        <member name="M:ctrewind_create(CTRewind**)">
    @brief
    Create Rewind instance.

    @param [out] ppRewind
    Created instance.

    @return CERR_OK on success.

</member>
        <member name="T:CTRankedRect">
    @brief Defines a Rewind object as a position and rank. Higher rank is better. 
	Position is described in normalized coordinates [0.0 1.0].


</member>
        <member name="M:ctremove_setObjectVisibility(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
@brief
Set visibility setting for object. Default visibility is false.

@param pRemove
Valid CTRemoveObjects instance.

@param sourceIndex
Index of relevant source. 

@param objectIndex
Index of relevant object.

@param visible
New visibility of this object.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_getObjectVisibility(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@brief
Get current visibility setting for object. 

@param pRemove
Valid CTRemoveObjects instance.

@param sourceIndex
Index of relevant source. 

@param objectIndex
Index of relevant object.

@param[out] pVisible
Current visibility of this object.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_getObjectMask(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTColor,CTBitmap*)">
@brief
Get the mask for this object. The mask intrinsic position and size is given by 
the rect returned by ctremove_getObjectRect but stretched to fill the provided bitmap. 

@param pRemove
Valid CTRemoveObjects instance.

@param sourceIndex
Index of relevant source. 

@param objectIndex
Index of relevant object.

@param objectColor
Color of mask foreground. Mask background is black, and transparent if the color format supports transparency.  

@param[out] pOutBitmap
Output bitmap. If the dimensions is not the same as the size of the object rect (as retrievable by getObjectRect) it
will be stretched.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_getObjectRect(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTRectf*)">
@brief
Get a bounding rect around object. 

@param pRemove
Valid CTRemoveObjects instance.

@param sourceIndex
Index of relevant source. 

@param objectIndex
Index of relevant object.

@param[out] pObjectRect
Bounding rect for this object.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_objectCount(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong*)">
@brief
Get number of removable objects in image

@param pRemove
Valid CTRemoveObjects instance.

@param sourceIndex
Index of relevant source. 

@param[out] pCount
Number of removable objects.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_render(CTRemoveObjects*,CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
@brief
Perform render of the result image.

@param pObjects
Valid CTRemoveObjects instance.

@param pImages
Valid CTBitmap array containing aligned images of the same size. The number of images must match the amount images used for analyze.
Colormode must be CM_YUV420P and the size must correspond to a 2-exponent scale of ctremove_getMapsSize() (from 1 to 32).

@param sourceIndex
Index of the source to use as the baseline of the render operation.

@param pOutBitmap
The target bitmap. Must have the same size as the input images in pImages, and colormode.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_getMapsSize(CTRemoveObjects*,CTSize*)">
@brief
Get the size of the objects maps generated in the CTRemoveObjects when analyzed.

@param pRemove
Valid CTRemoveObjects instance.

@param[out] pSize
Intrinsic output size.

@return CERR_OK on success.

@since 5.5

</member>
        <member name="M:ctremove_getBestSourceIndex(CTRemoveObjects*,System.Int32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Get index of source most suitable to use as baseline when rendering. 
    The exact criterias may change over time but the overall objective is to choose the 
    source that when all objects are removed will provide an end result with as little 
    moving objects as possible.

    @param pObjects
    Valid CTRemoveObjects instance.

    @param [out] pBestSourceIndex
    Index of source most suitable as baseline for remove rendering operation. 

    @return CERR_OK on success.

    @since 5.5

</member>
        <member name="M:ctremove_analyzeEx(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,CTRemoveObjects**)">
    @brief
    Perform analysis of the provided images, moving objects will be identified for removal.
    This method may take a while. 
    
    @param pImages
    Valid array of CTBitmap containing aligned images.
    Only colormode CM_YUV420P is valid. The images must have the same dimensions.
        
    @param numSources
    The number of images provided in pImages.
    
    @param scaleDown
    Scaled down versions of input images will be analyzed.
    Can be in range [1,5] where 5 means each dimension is reduced a factor 32.

    @param requireCompleteRemoval
    Sets the analyze to only detect objects that can be completely removed.
    
    @param smallestAllowedObjectRatio
    Sets the smallest allowed objects to be detected as a ratio to the entire image size.
    
    @param [out] ppOutObjects
    The created CTRemoveObjects. This must be destroyed later using ctremove_destroy.

    @return CERR_OK on success.

    @since 5.5

</member>
        <member name="M:ctremove_analyze(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTRemoveObjects**)">
    @brief
    Perform analysis of the provided images, moving objects will be identified for removal.
    This method may take a while. 

    @param pImages
    Valid array of CTBitmap containing aligned images.
    Only colormode CM_YUV420P is valid. The images must have the same dimensions.
    
    @param scaleDown
    Scaled down versions of input images will be analyzed.
    Can be in range [1,5] where 5 means each dimension is reduced a factor 32.

    @param numSources
    The number of images provided in pImages.
    
    @param [out] ppOutObjects
    The created CTRemoveObjects. This must be destroyed later using ctremove_destroy.

    @return CERR_OK on success.

    @since 5.5

</member>
        <member name="M:ctremove_analyzeAutoScale(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,CTRemoveObjects**)">
    @brief
    Perform analysis of the provided images, moving objects will be identified for removal.
    This method may take a while. 

    @param pImages
    Valid array of CTBitmap containing aligned images.
    Only colormode CM_YUV420P is valid. The images must have the same dimensions.

    @param numSources
    The number of images provided in pImages.
    
    @param [out] ppOutObjects
    The created CTRemoveObjects. This must be destroyed later using ctremove_destroy.

    @return CERR_OK on success.

    @remark Internally the images will be downscaled to a suitable size for analysis, to get
    the internal size, use ctstrobe_getMapDimensions().

</member>
        <member name="M:ctremove_getNumberOfSources(CTRemoveObjects*)">
    @brief Gets the number of sources used to generate the given RemoveObjects instance.

    @param pRemove Valid CTRemoveObjects instance.

    @return The number of associated sources. If an invalid instance is used zero will be returned.

    @since 5.5

</member>
        <member name="M:ctremove_destroy(CTRemoveObjects*)">
    @brief
    Destroys a CTRemoveObjects instance.

    @param pRemove
    Valid CTRemoveObjects instance.

    @since 5.5

</member>
        <member name="T:CTRemoveObjects">
@file ctremove.h
@brief Defines the interface of @a Remove
@ingroup remove_api

    @addtogroup remove_api
    @brief Removes moving objects by combining a series of images.
    
    Remove analyzes a series of images to separate moving objects from background.
    Moving objects in one image can be removed by replacing them with background pixels
    available in one of the other images. 

    <h3>Usage</h3>
    -# Create a new CTRemove object by analyzing a series of aligned images. with one of ctremove_create().
    -# To do this use one of ctremove_analyzeAutoScale(), ctremove_analyze() or ctremove_analyzeEx(). This operation may take some time.
    -# Optional: Manage detected objects visibility and visualize detected objects by using the object related functions.
    -# Render result using ctremove_render().
    -# The provided images sizes must be exactly a 2^n multiplication of the mapsSizes.
    -# Destroy the CTRemove object, ctremove_destroy()
    .
    
    @{

@brief Type representing a Remove instance.

</member>
        <member name="M:ctnoisereduction_getBrightnessIndex(CTNoiseReductionImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Calculates the brightness index for pNoiseReductionImage.

    The brightness index is a value that can be used to determine how bright
    an image is. The value range for the index is 0 to 255.
    The brighter image, the greater value.

    @param pNoiseReductionImage The image to calculate brightness index for.
    Min size 24x24
    @param[out] pIndex The brightness index. Range [0, 255]

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_destroy(CTNoiseReduction*)">
    @brief
    Destroys a CTNoiseReduction object

    @param pNoiseReduction Object to be destroyed.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_processViewfinderImageChrominance(CTNoiseReduction*,CTNoiseReductionImage*)">
    @brief
    Applies noise reduction to the chrominance channels of a downscaled image.

    The image should be downscaled to about 1:8-1:4 of the original size.
    This function is intended for getting a preview of the effect in
    ctnoisereduction_processImageChrominance().

    The algorithm is tuned for YUV420 images, i.e. with subsampling in
    both dimensions for the color channels. Other color subsampling modes
    may not give optimal output quality. Furthermore the image must not be
    smaller than 256 x 256 pixels.

    @param pNoiseReduction a valid CTNoiseReduction object.
    @param[in, out] pImage The image to be processed.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.4

</member>
        <member name="M:ctnoisereduction_processViewfinderImage(CTNoiseReduction*,CTNoiseReductionImage*)">
    @brief
    Applies noise reduction to a downscaled image.

    The image should be downscaled to about 1:8-1:4 of the original size.
    This function is intended for getting a preview of the effect in
    ctnoisereduction_processImage().

    The algorithm is tuned for YUV420 images, i.e. with subsampling in
    both dimensions for the color channels. Other color subsampling modes
    may not give optimal output quality. Furthermore the image must not be
    smaller than 256 x 256 pixels.

    @param pNoiseReduction a valid CTNoiseReduction object.
    @param[in, out] pImage The image to be processed.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_processImageChrominance(CTNoiseReduction*,CTNoiseReductionImage*)">
    @brief
    Applies noise reduction to the chrominance channels of an image.

    The image should not be downscaled. The algorithm assumes that the
    noise comes from an unscaled image.

    The algorithm is tuned for YUV420 images, i.e. with subsampling in
    both dimensions for the color channels. Other color subsampling modes
    may not give optimal output quality. Furthermore the image must not be
    smaller than 256 x 256 pixels.

    @param pNoiseReduction A valid CTNoiseReduction object.
    @param[in, out] pImage The image to be processed.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.4

</member>
        <member name="M:ctnoisereduction_processImage(CTNoiseReduction*,CTNoiseReductionImage*)">
    @brief
    Applies noise reduction to the image pImage.

    The image should not be downscaled. The algorithm assumes that the
    noise comes from an unscaled image.

    The algorithm is tuned for YUV420 images, i.e. with subsampling in
    both dimensions for the color channels. Other color subsampling modes
    may not give optimal output quality. Furthermore the image must not be
    smaller than 256 x 256 pixels.

    @param pNoiseReduction A valid CTNoiseReduction object.
    @param[in, out] pImage The image to be processed.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_setLevel(CTNoiseReduction*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Sets the amount of noise reduction.

    @param pNoiseReduction A valid CTNoiseReduction object.
    @param level Value between 1 and 10. 1 is the minimum amount of noise
    reduction and 10 is the maximum amount.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_create(CTNoiseReduction**)">
    @brief
    Creates a new CTNoiseReduction object.

    @param[out] ppNoiseReduction Pointer to the object to be created.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_destroyNRImage(CTNoiseReductionImage*)">
    @brief
    Destroys a CTNoiseReductionImage created by
    ctnoisereduction_createNRImageFromYVU420SPBuffer().

    <b>Note</b> The image must have been created by
    ctnoisereduction_createNRImageFromYVU420SPBuffer(), otherwise the
    behavior is undefined.

    @param pNRImage The noise reduction image to be destroyed.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_setYVU420SPBufferFromNRImage(CTNoiseReductionImage*,System.Byte*)">
    @brief
    Converts the CTNoiseReductionImage back to ::CM_YVU420SP.

    <b>Note</b> The CTNoiseReductionImage must have been created with
    ctnoisereduction_createNRImageFromYVU420SPBuffer() and pBuffer
    must be the same as the one used there.

    @param pNRImage The noise reduction image.
    @param pBuffer The buffer. This must be the same as the one used to create
    the noise reduction image.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="M:ctnoisereduction_createNRImageFromYVU420SPBuffer(System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTNoiseReductionImage**)">
    @brief
    Creates a CTNoiseReductionImage from a ::CM_YVU420SP buffer.

    Data in the buffer must only have color format ::CM_YVU420SP. The scanline must
    be equal to the image width and the image dimensions must be a multiple of 2.
    Furthermore there must not be any padding between the end of the Y component
    and the beginning of VU components.

    Example of valid buffer:
    YYY..., VUVUVU...

    Note that the created CTNoiseReductionImage may use the supplied buffer
    to store data. Therefore the buffer must not be accessed or modified until
    the CTNoiseReductionImage has been destroyed. The noise reduction image
    does however not take over ownership of the buffer.

    @param pBuffer a pointer to a valid YVU420SP buffer. This buffer must be
    valid and not accessed until ctnoisereduction_destroyNRImage is called.
    @param width the width of the image. Must be greater than 0 and a multiple of 2.
    @param height the height of the image. Must be greater than 0 and a multiple of 2.
    @param[out] ppNRImage the created CTNoiseReductionImage.

    @return CERR_OK if successful, or an error code otherwise.

    @since 5.2

</member>
        <member name="F:CTNoiseReductionImage.Y">
The Y component's channel.
Its dimensions must be larger than or equal to the U or V channels.

</member>
        <member name="T:CTNoiseReductionImage">
    @brief
    Type describing an image.

    It contains three image channels and the size of the image.

</member>
        <member name="T:CTNoiseReductionChannel">
@brief
Type describing an image channel.

</member>
        <member name="T:CTNoiseReduction">
@ingroup fm_imageenhance
@file ctnoisereduction.h
@brief Defines the interface of the ImageEnhance Module: @a NoiseReduction2.

    @addtogroup noisereduction2
    @brief High quality image noise reduction.

    <b>Note</b> This feature has been optimized for certain hardware
    configurations and is therefore not available on all platforms.

    <h3>Usage</h3>
    -# Create a ::CTNoiseReductionImage.
        - Alt 1. Render your input image to a planar YUV image and
        fill in the struct values manually.
        - Alt 2. If you have a ::CM_YVU420SP buffer, make it planar with
        ctnoisereduction_createNRImageFromYVU420SPBuffer().
        .
    -# Create a ::CTNoiseReduction object with ctnoisereduction_create().
    -# Set amount of noise reduction, ctnoisereduction_setLevel(). (Optional)
    -# For preview quality noise reduction on a downscaled image, use
    ctnoisereduction_processViewfinderImage().
    -# On the full size image, remove the noise with ctnoisereduction_processImage().
    -# Alt 2. Convert the CTNoiseReductionImage back to ::CM_YVU420SP with
    ctnoisereduction_setYVU420SPBufferFromNRImage() and destroy it with
    ctnoisereduction_destroyNRImage().
    -# Destroy the ::CTNoiseReduction object with ctnoisereduction_destroy().
    .

    @{

@brief
Type representing a noise reduction object.

</member>
        <member name="M:ctfocalstack_best(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize)">
@brief
Get best image index from a map

@param pMap CM_FLOAT32 map
@param x coordinate
@param y coordinate
@param scaledDims Coordinate system where x and y are given
@return CERR_OK or an error code.

</member>
        <member name="M:ctfocalstack_clip(CTBitmap*,System.Single,System.Single,System.Single)">
@brief
Clip and scale image pixel values
@param pSrc Input and output image, CM_FLOAT32
@param f scale factor
@param lo low clip
@param hi high clip

@remark
output = CLAMP2(((f * input)-lo)/(hi - lo), 0, 1)

</member>
        <member name="M:ctfocalstack_blur(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
@brief
Blur a mask (box blur). Only works in range 0.0 to 1.0
@param pSrc Input image, CM_FLOAT32
@param pDst Output image, CM_FLOAT32
@param r Size of kernel will be (2 * r + 1)x(2 * r + 1)

</member>
        <member name="M:ctfocalstack_colormask(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Single,System.Single,System.Single,CTBitmap*)">
@brief
Create a mask, based on a pixel coordinate and image colors.

@param pIn Input bitmap, CM_BGRA8888
@param pMap Map of image indexes, CM_FLOAT32. May have different dimensions than input and output.
@param selected Map value correponding to the selected image.
@param midX Midpoint x
@param midY Midpoint y
@param rFG Foreground object radius 
@param rBGstart Inner background object radius
@param rBGend Outer background object radius
@param[out] pMask Output mask, 1.f in foreground 0.f in background and continous values in between those.
@return CERR_OK or an error code.

@remark Midpoint and radiuses are given in input/output image coordinates

</member>
        <member name="M:ctfocalstack_alphablend(CTBitmap*,CTBitmap*,CTBitmap*,CTBitmap*)">
@brief
Alpha blend pIm0 and pIm1 using pImA as alpha mask.

@param pIm0 Input image of a 4 byte interleaved color mode
@param pIm1 Input image of a 4 byte interleaved color mode
@param pMask Alpha mask, CM_FLOAT32. 0 means pIm0, 1 means pIm1. May have different dimensions than in/out images.
@param[out] pOut Output image of same dimensions and 
@return CERR_OK or an error code.

@remark Input and output images of same dimensions and color mode.
Supported color modes, CM_YUV420P, 4 byte interleaved (CM_AYUV4444, CM_ARGB8888, CM_BGRA8888, etc.)

</member>
        <member name="M:ctfocalstack_blend(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*,CTBitmap*)">
@brief
Blend multiple images based on a map, for example to make an allinfocus image.

@param ppIn Input images
@param n Number of input images
@param pMap Map of image indexes. CM_FLOAT32
@param pOut Output image

@remark
pMap may have different dimensions than images in ppIn
ppIn images and pOut must have the same dimensions and colormode.
Supported color modes: 

@return CERR_OK or an error code.

</member>
        <member name="M:ctfocalstack_map(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
@file ctfocalstack.h
@brief
Public interface for CTFocalstack
@ingroup ctfocalstack

    @addtogroup ctfocalstack
    @brief
    Combining focal stack images

    @{

@brief
Generate an index map of the sharpest image in each pixel in a focal stack.

The optimal dimensions of the images are, around VGA size, 640x480
All input images, the output image and the index map must have the same dimensions.
The input images must be (reasonably) aligned, including compensation in scale required for lenses that change field of view when changing focus..

@param ppIn Array of CTBitmap pointers with input images. CM_GRAY8, CM_YUV420P, CM_Y, CM_U, CM_V. The first plane must be CM_GRAY8 equivalent.
@param n Number of input images. n is any integer in range [2,32]
@param pMap Index map defining which input image is sharpest. CM_FLOAT32. The best image index is found by rounding the floating point value to the nearest integer.
The non integer areas of the index map defines how to mix input images when blending the images.
@param useOpenMP Uses open mp for alpha expansion internally. May produce different results.

@return CERR_OK or an error code.

</member>
        <member name="M:ctbitmap_wrapPlaneEdges(CTPlane*,CTPlane*,CTRect)">
    @brief Wrappes edges of the single plane within its wrapper plane. Edges of the plane are copied.
           Supported color modes CM_AYUV4444, CM_ARGB8888, CM_GRAY8, CM_Y, CM_U, CM_V.
           For CM_YUV420P call this function for every plane and make sure that for U and V planes edgeOffset
           values are half of the one used for Y plane.

    @param pWrapperPlane Wrapper plane.
    @param pPlane Inner plane that is to be wrapped.
    @param edgeOffset Specifies the boarder around inner bitmap where inner bitmap edge is to be copied.
           edgeOffset width and height specify total offset around bitmap e.g. if x = -1 and w = 2 then edge will
           be 1 pixel to the left and 1 pixel to the right of the inner bitmap.
           edgeOffset can have non-symmetric dimensions.

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmap_wrapBitmapEdges(CTBitmap*,CTBitmap*,CTRect)">
    @brief Wrappes edges of the bitmap within its wrapper bitmap. Edges of the bitmap are copied.
           Supported color modes: CM_AYUV4444, CM_ARGB8888, CM_GRAY8, CM_Y, CM_U, CM_V.
           
    @param pWrapperBitmap Wrapper bitmap.
    @param pBitmap Inner bitmap that is to be wrapped.
    @param edgeOffset Specifies the boarder around inner bitmap where inner bitmap edge is to be copied.
           edgeOffset width and height specify total offset around bitmap e.g. if x = -1 and w = 2 then edge will
           be 1 pixel to the left and 1 pixel to the right of the inner bitmap.
           edgeOffset can have non-symmetric dimensions.

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmaputil_createBitmapWrapper(CTSize,CTSize,CTVector,CTColormode,CTBitmap**,CTBitmap**)">
    @brief Creates an inner bitmap within wrapper bitmap. Both wrapper and inner bitmap share same data buffer.
           Supported color modes CM_GRAY8, CM_AYUV4444, CM_ARGB8888 and CM_YUV420P.
           For CM_YUV420P the bitmap offset and width and height of the wrapper bitmap must be multiples of 2.

    @param wrapperDims Dimensions of the wrapper bitmap.
    @param bitmapDims Dimensions of the inner bitmap.
    @param bitmapOffset x,y offset of the inner bitmap within wrapper bitmap
    @param cm Color mode of the bitmaps.
    @param [out] ppWrapperBitmap. Wrapper bitmap.
    @param [out] ppBitmap. Inner bitmap.

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmaputil_initCroppedBitmap(CTBitmap*,CTRect,CTBitmap*)">
    @brief Crops a rectangle from a bitmap and inits a bitmap from that area.
           Data is still owned by source

    @param pSrc The source bitmap that will be cropped.
    @param rect Cropped area
    @param pBitmap[out] Cropped bitmap

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmaputil_scaleUpGaussian3x3(CTBitmap*,CTBitmap*)">
    @brief
    Gaussian factor 2 upscaling (kernel size 3x3) of a bitmap. The relation between input and 
    output images sizes must satisfy ((outWidth + 1) / 2 == inWidth) and ((outHeight + 1) / 2 == inHeight).
    Corresponding constraint apply to the subsampled channels e.g. for YUV420P
    The following color formats are supported:
    CM_GRAY8
    CM_ARGB8888
    CM_BGRA8888
    CM_YUV420P


    @param pIn The bitmap do scale up
    @param pOut The upscaled bitmap

    @return
    @c CERR_OK on success.
    @c CERR_NOT_IMPLEMENTED if the colormode is not supported

</member>
        <member name="M:ctbitmaputil_scaleDownGaussian3x3(CTBitmap*,CTBitmap*)">
    @brief
    Gaussian factor 2 downscaling (kernel size 3x3) of a bitmap. The relation between input and 
    output images sizes must satisfy ((inWidth + 1) / 2 == outWidth) and ((inHeight + 1) / 2 == outHeight).
    Corresponding constraint apply to the subsampled channels e.g. for YUV420P
    The following color formats are supported:
    CM_GRAY8
    CM_ARGB8888
    CM_BGRA8888
    CM_YUV420P

    @param pIn The bitmap do scale down
    @param pOut The downscaled bitmap

    @return
    @c CERR_OK on success.
    @c CERR_NOT_IMPLEMENTED if the colormode is not supported

</member>
        <member name="M:ctbitmaputil_crop(CTBitmap*,CTRect)">
    @brief
    Crops a bitmap by just updating the data pointers for each plane and without actually copying/moving the data.
    Image must be CM_YUV420P.

    @param [out]
    pBitmap The bitmap to crop. Must be CM_YUV420P.
    @param
    cropRect The rectangle to crop the image to.

    @return CERR_OK on success.

</member>
        <member name="M:ctbitmaputil_copyPlane(CTPlane,CTPlane)">
    @brief Copies all image data from the input plane to the output plane.

    The planes must have the same dimensions and color format.
    The planes may have different scanlines.

    @param planeIn Input plane
    @param planeOut Output plane

    @note
    Data that is outside the plane's data buffer is not copied nor accessed.
    For example, if the (input and/or output) scanline is larger than the 
    minimum scanline, padding bytes are not copied to or from.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_copyData(CTBitmap*,CTBitmap*)">
    @brief Copies all image data from the input bitmap to the output bitmap. 
    This does not include data that is outside the bitmap but in the bitmap's data buffer.

    The bitmaps must have the same dimensions and the same color format.

    @param pIn Input bitmap.
    @param pOut Output bitmap.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_fillWithColor(CTBitmap*,System.Byte*)">
    @brief Fills a bitmap with the specified color pattern.

    For a bitmap, each channel will fetch a number of bytes from pPattern according
    to its bpp, and repeat those across the channel.

    For instance, on CM_YUV420SP, pPattern[0] is used for the Y channel, and 
    pPattern[1] and pPattern[2] are repeated across the UV channel.

    The function fails for color modes where one or more channels has a bpp which
    is not dividable by eight.

    @param pBitmap Bitmap to fill with data.
    @param pPattern Pattern to use for filling. Length of this array is given
    by the bitmap structure (from 1-4 bytes).

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_fill8(CTBitmap*,System.Byte)">
    Set all pixel data in a CTBitmap to a given byte value

    @param pBitmap The bitmap to fill
    @param val Value to set

</member>
        <member name="M:ctbitmaputil_unserialize(CTBuffer*,CTBitmap**)">
    @brief Creates a bitmap from a representation created with 
    ctbitmaputil_serialize.

    @param pBuffer Buffer containing data serialized with ctbitmaputil_serialize.
    @param ppBitmap[out] Output bitmap when successful.

    @return CRESULT indicating result of the operation. CERR_MEMORY_OUT_OF_BOUNDS
    if there is not enough data in pBuffer to unserialize the bitmap.

</member>
        <member name="M:ctbitmaputil_serialize(CTBitmap*,CTBuffer**)">
    @brief Serializes a CTBitmap into a CTBuffer.

    @param pBitmap Bitmap to serialize
    @param ppBuffer[out] Output buffer if sucecssful. Caller owns this buffer.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromDataPlanar(System.Byte**,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,CTSize,CTColormode,CTBitmap*)">
    Initiates a CTBitmap from the pointers given by ppData.

    @param ppData       Pointer to an array of data pointers. ppData[n] points 
                        to the nth plane's pixel data.
    @param pScanline    Pointer to an array of scanlines.
    @param dims         Dimensions of the bitmap representation
    @param format       Color mode of the pixels described by pData
    @param pBitmap      The bitmap to initiate.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromData(System.Byte*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBitmap*)">
    Initiates an image from the pointer given by pData.
 
    @param pData        Pointer to a byte buffer of pixel data.
    @param dims         Dimensions of the bitmap representation
    @param scanline     Scanline of the bitmap representation. If set to zero, a
                        suitable scanline will be assigned.    
    @param format       Color mode of the pixels described by pData
    @param pBitmap      The bitmap to initiate.

    @return CRESULT indicating result of the operation.

</member>
        <member name="M:ctbitmaputil_initFromImage(CTImage*,CTBitmap*)">
    Initiates a ctbitmap from an existing ctimage. Memory is shared between the
    two structures.
    
    @param pImage       Existing image. This image must be kept alive at least as long
                        as the initiated bitmap.
    @param pBitmap      The bitmap to initiate.
 
    @return CRESULT indicating success. Only when CERR_OK is true will pBitmap be
    written to.

    @deprecated This functionality is deprecated. Use ctbitmaputil_initFromData()
    instead.

</member>
        <member name="M:ctbitmaputil_createFromBitmap(CTBitmap!System.Runtime.CompilerServices.IsConst*,CTBitmap**)">
    @brief Creates a bitmap from another bitmap. The created bitmap points to the
    same data as the input bitmap.

    @param pBitmap Input bitmap
    @param[out] ppBitmap Output bitmap from the function.

    @return
    - ::CERR_OK if everything went ok.
    - Other error code on specific failure.
    .

</member>
        <member name="M:ctbitmaputil_getPlaneByteSize(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns the smallest needed size (in bytes) of the bitmap plane. This
    size includes space for all defined scanlines, except for the last row which
    is covered only up until the last pixel (as defined by the plane 
    dimensions).

    @param pBitmap          Bitmap to query for size.
    @param bitmapPlane      Index of a valid bitmap plane.

    @return Size of the bitmap plane in bytes, or zero if an error occurs.

</member>
        <member name="M:ctbitmaputil_getPlaneOffsetAtEx(CTPlane,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data at a specific position

    @param plane A valid plane.
    @param x     Coordinate of the pixel to query.
    @param y     Coordinate of the pixel to query.

    @note This function is highly inefficient for image processing but can
    be used for initially positioning a pointer or similar.

    @return Pointer to a position in the byte buffer where the desired pixel
    is stored or NULL if the point is not valid for that plane.

    @sa ctbitmaputil_getPlaneOffsetAt()

</member>
        <member name="M:ctbitmaputil_getPlaneOffsetAt(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data at a specific position

    @param pBitmap      Pointer to a valid bitmap
    @param imagePlane   Index of a valid pixel plane
    @param x            Coordinate of the pixel to query.
    @param y            Coordinate of the pixel to query.

    @note This function is highly inefficient for image processing but can
    be used for initially positioning a pointer or similar.

    @return Pointer to a position in the byte buffer where the desired pixel
    is stored or NULL if the point is not valid for that plane.

    @note Because pixels are accessed in the plane's coordinate system, this
    function is hard to use correctly for subsampled pixel formats.

    @sa ctbitmaputil_getPlaneOffsetAtEx()

</member>
        <member name="M:ctbitmaputil_getByteSize(CTBitmap*)">
    @brief Returns the size of the bitmap as defined by the scanline and height
    of all planes. This is typically the minimum size needed to fully represent
    the bitmap.

    @param pBitmap Pointer to a valid bitmap object.

    @return Unsigned integer which represents the total size of all the bitmap
    pixel data, or zero if an error occured.

    @note This function returns a value possibly larger than summing up the size
    of all bitmap planes.


</member>
        <member name="M:ctbitmaputil_isEqualPixelWise(CTBitmap*,CTBitmap*)">
    @brief Checks if two bitmaps have the same pixel contents. This also means
    that they are similar, as checked by ctbitmaputil_isEqual.
 
    @param pBitmap1 First bitmap to check
    @param pBitmap2 Second bitmap to check
 
    @return CTbool indicating equalness. A null pointer is not equal to another
    bitmap, not even another null pointer.

</member>
        <member name="M:ctbitmaputil_isEqual(CTBitmap*,CTBitmap*)">
    @brief Checks if two bitmaps are same in color mode and dimensions.
    No other characteristics, nor pixel contents.
 
    @param pBitmap1 First bitmap to check
    @param pBitmap2 Second bitmap to check
 
    @return CTbool indicating equalness. A null pointer is not equal to another
    bitmap, not even another null pointer.
 
    @note Color mode checks will check against the color mode alias, so, for
    instance CM_RGB565FD is equal to CM_RGB565.

</member>
        <member name="M:ctbitmaputil_createFromImageCopy(CTImage*,CTBitmap**)">
    @brief Creates a new bitmap by copying the contents of the image.
 
    @param pImage Image to be copied
    @param ppBitmap Bitmap to be created
 
    @note This creates a duplicate of the image, with a separate life cycle.
    This means that no memory is shared, so the image may be destroyed 
    afterwards.

</member>
        <member name="M:ctbitmaputil_initPlaneWithImage(CTImage*,CTPlane*)">
    @brief Initializes a CTPlane from a CTImage

    @param pSrcImage CTImage from which to fetch settings. The CTImage must have a format/colormode that has only one plane.
    @param pDstPlane CTPlaen on which settings are written.

    @note The resulting CTPlane will point to the same pixel data as the CTImage. No pixels are copied.

    @return CRESULT indicating success.

</member>
        <member name="M:ctbitmaputil_initImageWithBitmap(CTBitmap*,CTImage*)">
    @brief Initializes a ctimage struct to contain the same data as a ctbitmap
 
    @param pBitmap  Bitmap from which to fetch settings.
    @param pImage   Image on which settings are written.
 
    @note If the image contains allocated data, this data will be overwritten
    in favor of the already existing data. This may incur memory leaks if the
    image contains allocated pixel data. Regardless of success of this function
    the image parameter is overwritten.
 
    @note Ownership of the pixel buffer is not transfered. Pixel data is not
    copied, and the initialized image will simply point to the same data as the
    bitmap. When the image is destroyed, the pixel buffer must not be deallocated
    because it does not belong to the image.
 
    @return An error code if the function fails, or CERR_OK if successful. The
    image is normally overwritten regardless of success.

</member>
        <member name="M:ctbitmaputil_isValidBitmap(CTBitmap!System.Runtime.CompilerServices.IsConst*)">
    @brief Performs internal checks to see if the bitmap is valid.
 
    In essence, this checks that:
    @li All planes are valid
    @li The bitmap dimensions are valid (ie. both larger than zero)
    @li colorMode is set to a valid enum
    
    @param pBitmap      Pointer to a bitmap.
    
    @return True if the bitmap is valid, false if not.
    
    @note In debug builds, additional asserts are checked, to make sure that 
    the bitmap (and all planes) point to allocated heap memory.

</member>
        <member name="M:ctbitmaputil_isValidPlane(CTPlane!System.Runtime.CompilerServices.IsConst*)">
    @brief Checks if a plane appears to contain valid data and settings.
 
    More specifically, this call checks that
    @li dims are valid image dimensions.
    @li scanline is at least bpp of the color mode times the width
    @li colorMode is a valid enum
 
    @param pPlane Pixel plane to check
 
    @return Boolean indicating if the plane is valid.
 
    @note In debug builds, additional memory checks are performed.

</member>
        <member name="M:ctaligner_warpFitEx(CTAligner*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*,System.Single)">
    Warp/align/resample/transform images to match the reference image.

    @param pAligner A CTAligner object. This object is guaranteed not to be modified in this function.
    @param pSrc Source bitmap.
    warpFit: One of the input images in ctaligner_createAndRegister().
    warpFitEx: Possibly scaled version of one of the input images in ctaligner_createAndRegister().
    The registration must have been successful for this image, see also ctaligner_getRegistrationSuccess().
    @param srcIdx Corresponding index of the source bitmap when it was given to ctaligner_createAndRegister()
    @param pDst Destination bitmap. Any dimensions. The valid pixel area will be cropped and scaled uniformly so
    that the result does not have any borders with invalid pixels.
    @param scale Scale of the pSrc image, compared to the image given in ctaligner_createAndRegister(). &gt; 0.f
    For example, 2.0f means that the pSrc given to this function have double width and height compared to the images given to ctaligner_createAndRegister().
    @return CERR_OK or an error code.

    @remark All images must have color format YUV420P.
    @remark The output is NOT color corrected to match the reference image.
    @remark If there is a large difference in scale between the pDst and the pSrc, the result will be extremely blurry or aliased.

</member>
        <member name="M:ctaligner_warpEx(CTAligner*,CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    Warp/align/resample/transform images to match the reference image.
    The output is also color corrected to match the reference image.

    @param pAligner A CTAligner object.
    @param pRef Reference image. Must be the same that was set in ctaligner_createAndRegister()
    @param pSrc Source bitmap. Must be one of the input images in ctaligner_createAndRegister().
    The registration must have been successful for this image, see also ctaligner_getRegistrationSuccess().
    @param srcIdx Corresponding index of the source bitmap when it was given to ctaligner_createAndRegister()
    @param pDst Destination bitmap. Must have the same dimensions as the source bitmap. Will contain invalid pixels at the borders of the bitmap.
    Crop it after this function by the croprect from ctaligner_getCropRect(Ex) to get rid of the borders.
    @param scale Scale of the images, compared to the images given in ctaligner_createAndRegister(). &gt;= 1.
    For example, 2 means that the images given to this function have double width and height compared to the images given to ctaligner_createAndRegister().
    See also ctaligner_getCropRectEx().
    @return CERR_OK or an error code.

    @remark If the source image is the reference, its pixel data will be copied to the pDst without any warping or color correction.
    @remark All images must have color format YUV420P.

</member>
        <member name="M:ctaligner_getCropRectEx(CTAligner*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize)">
    Get crop rectangle for the aligned images.

    @param pAligner A CTAligner object
    @param scale Scale of images in ctaligner_warpEx compared to images given to ctaligner_createAndRegister. &gt;= 1.
    @param dims Dimension of images in ctaligner_warpEx

    @return Rectangle within all the aligned images that contains only valid pixels. (The whole image series have the same crop rect)

</member>
        <member name="M:ctaligner_getRegistrationSuccess(CTAligner*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    Get result from registration for each image.

    @param pAligner A CTAligner object
    @param[out] pArraySuccess Array of length numIms (the number of input images to ctaligner registration). Set to true or false for each image indicating
    which images could be successfully registered. The reference image index is always set to true.

    @return CERR_OK or an error code.

</member>
        <member name="M:ctaligner_destroy(CTAligner*)">
    Destroy a CTAligner object

    @param pAligner A CTAligner object

</member>
        <member name="M:ctaligner_createAndRegisterEx(=FUNC:CRESULT(System.Void*,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap**),=FUNC:CRESULT(System.Void*,System.Int32!System.Runtime.CompilerServices.IsLong),System.Void*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTAligner**)">
    Register an image series with small movements, and create a CTAligner object that can be used for aligning the images.
    This function takes long time to execute, especially for large input images.

    The registration works for quite small movements only, for example such movements that occur when the
    user tries to hold the camera still, and quickly degenerates if the images are
    moved too much. The registration works only on constant or near constant exposure settings.

    All bitmaps are given in CM_YUV420P.
    All bitmaps must have equal dimension.

    @param[in] getBitmapCallback Callback used to fetch bitmaps when needed.
    @param[in] returnBitmapCallback Callback used to signal that a bitmap is no longer needed.
    @param[in] pObject User object that will be passed in the calls to getBitmapCallback and returnBitmapCallback
    @param[in] numIms Number of input images
    @param[in] reference Index of reference image. The other images will be aligned to this image.
    @param[out] ppAligner Created CTAligner object.

    @return @c CERR_OK or an error code

</member>
        <member name="M:ctaligner_createAndRegister(CTBitmap**,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,CTAligner**)">
    Register an image series with small movements, and create a CTAligner object that can be used for aligning the images.
    This function takes long time to execute, especially for large input images.

    The registration works for quite small movements only, for example such movements that occur when the
    user tries to hold the camera still, and quickly degenerates if the images are
    moved too much. The registration works only on constant or near constant exposure settings.

    All bitmaps are given in CM_YUV420P.
    All bitmaps must have equal dimension.

    @param[in] ppIms Input image series to register. CTAligner is guaranteed _not_ to hold any references to data in these images.
    @param[in] numIms Number of input images
    @param[in] reference Index of reference image. The other images will be aligned to this image.
    @param[out] ppAligner Created CTAligner object.

    @return @c CERR_OK or an error code

</member>
        <member name="D:ReturnBitmapCallback">
    Functioner pointer used for signalling that a bitmap is no longer needed while aligning images.

    @param pObject[in] User object
    @param index[in] Index of the bitmap to return

</member>
        <member name="D:GetBitmapCallback">
    Functioner pointer used for requesting a bitmap from caller while aligning images.

    @param pObject[in] User object
    @param index[in] Index of the bitmap to get
    @param ppBitmap[out] The bitmap to get

</member>
        <member name="T:CTAligner">
@file ctaligner.h
@brief
Public interface for CTAligner
@ingroup Aligner

    @addtogroup Aligner
    @brief
    Easy registration and alignment of a series of images with small movements.

    This functionality uses the open source library LAPACK for linear algebra
    operations.

    Typical usage:
    - ctaligner_createAndRegister() to register an image series and to create a
    CTAligner that is used for warping the images
    - ctaligner_getRegistrationSuccess() to check which images could be
    successfully registered
    - ctaligner_warpFit() to warp (i.e. transform) one image at a time, with
    internal cropping and upscaling.
    .

    Or:
    - ctaligner_warp() to warp one image at a time.
    - ctaligner_getCropRect() to get the valid pixel area
    - ctbitmap_createCroppedBitmap() to crop the warped images
    .

    Or:
    - Use lowres images when registering with ctaligner_createAndRegister()
    - Use highres images when warping in ctaligner_warpFitEx() together with the scale
    factor between the highres and lowres images.
    .

    @{

Type for easy registration and alignment of a series of images with small movements

</member>
        <member name="M:caps_uthGetProductIdentifier">
    @brief 
    Retrieves the product identifier.

    @return 
    The version as a static constant null-terminated string.

    @since 3.6.1

</member>
        <member name="M:caps_uthSetSamplingMode(cips*,SCB_SAMPLING_MODE)">
    @brief 
    Sets the sampling mode for the sipla subsystem.

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested sampling setting, can be one of the values from the 
    ::SCB_SAMPLING_MODE enumeration. Default value for a regular session
    is: SCB_SAMPLING_BILINEAR. Default value for a speedview session is:
    SCB_SAMPLING_BOX.

    @note
    Currently only SCB_SAMPLING_BOX or SCB_SAMPLING_BILINEAR
    is supported.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_uthSetJpegColorspacing(cips*,CTColorspacing)">
    @brief 
    Sets the colorspacing to be used when rendering to JPEG format.

    @param session
    A valid @c CTSession handle.

    @param colorspacing
    A ::CTColorspacing value with the requested colorspacing. Default: CM_YUV420

    @remarks
    The current render block size will be altered if not compatible with the
    given colorspacing; see: caps_uthSetRenderBlockSize()

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_uthSetPrefetchFlag(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief 
    Sets the prefetching option for the JPEG decoder or the BMP decoder.
    When disabling the prefetch option, the file will not be read into
    memory. Therefore the memory needed in the session will be reduced with approx.
    the file size.

    @param session
    A valid @c CTSession handle.

    @param enablePrefetch
    True, if the files should be read into memory. False, otherwise.
    Default value is true.

    @note
    This function is only applicable on sessions decoding JPEG or 24-bit 
    BMP, CERR_ILLEGAL_CALL will be returned otherwise.

    @note
    This function has no effect on progressive JPEG images.

    @note
    This function must be called after each call to caps_setSourceImage()
    if no prefetching is desired.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.6

</member>
        <member name="M:caps_uthSetSpmoDecodeMode(cips*,CAPS_DECODE_MODE)">
    @brief 
    Sets the decoding quality of an spmo decoder

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested decode mode setting, can be one of the values from the 
    ::CAPS_DECODE_MODE enumeration. Default is @c CAPS_DECODE_NORMAL.

    @note
    This function is only applicable on sessions created from spmo objects.
    On other sessions, the function has no effect.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.10.3

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_uthSetJpegDecodeMode(cips*,CAPS_DECODE_MODE)">
    @brief 
    Sets options for the JPEG decoder.

    @param session
    A valid @c CTSession handle.

    @param mode
    The requested decode mode setting, can be one of the values from the 
    ::CAPS_DECODE_MODE enumeration. Default for regular sessions is:
    @c CAPS_DECODE_OPTIMIZE_QUALITY, and for SPMO-initiated sessions:
    @c CAPS_DECODE_NORMAL.

    @note
    This function is only applicable on JPEG sessions, CERR_ILLEGAL_CALL 
    will be returned otherwise.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_SPEED">
Fast decoding speed but with lower image quality. 
</member>
        <member name="F:CAPS_DECODE_NORMAL">
Medium decoding performance and image quality. 
</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_QUALITY">
Slower decoding speed but with high image quality. 
</member>
        <member name="F:CAPS_DECODE_OPTIMIZE_HIGHEST_QUALITY">
Slower decoding performance but with highest possible image quality. 
</member>
        <member name="M:caps_uthSetRenderQuality(cips*,CAPS_RENDER_MODE)">
    @brief 
    Sets the render session quality preference for the sipla subsystem.
    
    @param session A valid @c CTSession handle.

    @param quality
    The requested quality setting, can be one of the values from the 
    ::CAPS_RENDER_MODE enumeration. Default for regular sessions is:
    @c CAPS_RENDERMODE_OPTIMIZE_QUALITY, and for SPMO-initiated sessions:
    @c CAPS_RENDERMODE_NORMAL.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="F:CAPS_RENDERMODE_OPTIMIZE_QUALITY">
Slower render performance but with high image quality. 
</member>
        <member name="F:CAPS_RENDERMODE_NORMAL">
Medium render performance and image quality. 
</member>
        <member name="F:CAPS_RENDERMODE_OPTIMIZE_SPEED">
Fast render performance but with lower image quality. 
</member>
        <member name="M:caps_uthSetRajpegCacheSize(cips*,System.UInt16)">
@file caps_uth.h
@brief This header defines advanced functions for tuning special behaviour.
@ingroup caps_uthapi

    @addtogroup caps_uthapi
    @brief
    This is the CAPS Under-The-Hood API for advanced tuning and maintainance.

    The functions defined herein opens up the possibility to modify internal 
    mechanisms and behaviour which can produce severe damage to performance
    and quality if used incorrectly.

    @warning
    This API should never be used without carefully consulting Scalado AB
    about the situation and describing the problem(s) intended to be solved.

    @{

    @brief 
    Sets the block cache size used internally by rajpeg to optimize decoding
    speed.

    @param session
    A valid @c CTSession handle.

    @param cacheSize
    The requested cache size in kilobytes. Default setting: 100 (kb).

    @return 
    @c CERR_OK if successful or a specific error code upon failure.
    @c CERR_ILLEGAL_CALL is returned if the session doesn't have a JPEG source 
    image loaded.

    @sa
    caps_uthGetOptimalRajpegCache()

    @since 3.1

</member>
        <member name="M:caps_endRotate(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setRotate(cips*,CAPS_ROTATION)">
    @brief
    Rotates the current session image in 90 degrees steps.

    @param session
    Handle to a valid session.

    @param direction
    The angle into which the image should be roated. Can be any of the values
    from the @c ::CAPS_ROTATION enumeration.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginRotate(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_endFlip(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @since 3.2

</member>
        <member name="M:caps_setFlip(cips*,CAPS_FLIP_MODE)">
    @brief
    Flips the current session image horizontally or vertically.

    @param session
    Handle to a valid session.

    @param flip_mode
    The direction to flip the image.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_beginFlip(cips*)">
    @brief

    @param session
    Handle to a valid session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.2

</member>
        <member name="M:caps_pixelBitSize(CTColormode)">
    @brief
    Returns the number of bits needed for storing a pixel of the given format.

    @param format
    The colormode format to calculate pixel size for.

    @return
    The required size in bits of one pixel or 0 if an unsupported color mode
    is provided.

    @code
    CTuint32 byteSize = 0;
    CTuint32 bitSize = 0;
    CTColormode colormode;

    colormode = CM_RGB888;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 3
    bitSize = caps_pixelBitSize(colormode);
    //Returns bitSize = 24

    colormode = CM_YUV422SP;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 2
    bitSize = caps_pixelBitSize(colormode);
    //Returns byteSize = 16
    @endcode

    @since 3.5

</member>
        <member name="M:caps_pixelByteSize(CTColormode)">
    @brief
    Returns the number of bytes needed for storing a pixel of the given
    format.

    @param format
    The colormode format to calculate pixel size for.

    @remarks
    Only color formats with a pixel bit size of a multiple of 8 bits
    are supported by this function.
    \n

    @return
    The required size in bytes of one pixel or 0 if an unsupported color mode
    is provided.

    @code
    CTuint32 byteSize = 0;
    CTuint32 bitSize = 0;
    CTColormode colormode;

    colormode = CM_RGB888;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 3
    bitSize = caps_pixelBitSize(colormode);
    //Returns bitSize = 24

    colormode = CM_YUV422SP;
    byteSize = caps_pixelByteSize(colormode);
    //Returns byteSize = 2
    bitSize = caps_pixelBitSize(colormode);
    //Returns byteSize = 16
    @endcode

    @since 3.2

</member>
        <member name="M:caps_calculateRawSize(CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,CTColormode,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@}

    @brief
    Calculates the required buffer byte size for corresponding dimensions and
    colormode.

    @param dims
    The dimensions of the raw image to calculate buffer size for.

    @param scanline
    Number of bytes per image row.

    @param format
    The color format of the raw image to calculate buffer size for. See remarks
    section for details.

    @param[out] pByteSize
    Pointer to an @c CTuint32 which will receive the calculated buffer size.

    @remarks
    The @c format argument must be one of the valid color formats specified in:
    @ref supported_colorformats

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @note
    Image size calculations are potentially complex so it is normally easiest
    to leave the scanline parameter at zero. When the scanline is not specified,
    the system may assume a scanline that is not optimally small, but instead
    (for instance) word aligned.

    @note
    This function will not necessarily return the smallest allowed size for an
    image of the specified format.
 
    @since 3.1

</member>
        <member name="M:caps_getBufferSize(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Retrieves the size of a buffer.

    @param buffer
    The @c CTBuffer object from which to retrieve the size.

    @param[out] size
    Pointer to a @c CTuint32 variable which will receive the size in bytes
    of the buffer data.

    @sa
    caps_getBufferData()

    @return
    @c CERR_OK if succesful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_createBufferCopy(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTBuffer**)">
    @brief
    Creates an exact copy of the provided buffer.

    @param original
    The @c CTBuffer object to copy.

    @param[out] copy
    Address to a @c CTBuffer pointer which will receive the copy.

    @remarks
    When no longer needed the buffer should be destroyed using
    caps_destroyBuffer().

    @sa
    caps_createBuffer()

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_destroyBuffer(CTBuffer*)">
    @brief
    Destroys a previously created buffer.

    @param buffer
    Pointer to a @c CTBuffer to destroy. This pointer is invalid after the call.

    @sa
    caps_createBuffer()\n
    caps_createBufferCopy()

    @since 3.0

</member>
        <member name="M:caps_createBuffer(System.UInt32!System.Runtime.CompilerServices.IsLong,CTBuffer**)">
@}

@addtogroup buffer_utility
@brief Helper functions for CTBuffer handling.
@{

    @brief
    Creates a new buffer.

    @param size
    The requested size of the new buffer in bytes.

    @param[out] buffer
    Address to a @c CTBuffer pointer which will receive the created buffer.

    @remarks
    When the buffer is no longer needed it should be destroyed using
    caps_destroyBuffer().

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_setGifFrame(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@name Gif selection 
    @brief
    This function shall be used to select which gif image contained in a gif
    file to be displayed.

    @param session
    A valid session handle.

    @param index
    Index of the gif sub-image to be displayed.
    The numbering starts with index = 0.
    The number of gif images in a gif file can be obtained with
    caps_getSourceImageInfo(). See CTImageInfo.

    @param pDisplayTime
    The display time in resolution of 1/100 seconds for the image according to
    the information embedded in the gif file. Note that the display time is
    is coded individually for all sub-images. Infinite display time
    is indicated with zero.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.7

</member>
        <member name="M:caps_addAppBlocksToJpegHeaderFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Adds one, or more, Jpeg APPn segment(s) to a session.

    The added data will written to the header when the session is
    rendered to a Jpeg-file.

    @note Only valid when rendering to Jpeg-files.

    @param session
    A valid CAPS CTSession.

    @param auxData
    A buffer containing the APP block data. The buffer may hold several APP blocks.
    If @c NULL is passed, any previously set data will be deleted from the session.
	Note that no sanity check is made on this buffer. The caller must make sure
	that the APP block identifier(s) and associated size(s) are correct. Incorrect identifiers
	and sizes may result in failure to decode the jpeg image.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @since 3.11

</member>
        <member name="M:caps_addXmpDataFromBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*)">
@name Jpeg header (Application segment) management 
    @brief
    Adds XMP meta data to a session.

    The added data will written to the header when the session is
    rendered to a Jpeg-file.

    @note Only valid when rendering to Jpeg-files.

    @param session
    A valid CAPS CTSession.

    @param xmpData
    A buffer containing the XMP meta data.
    If @c NULL is passed, any previously set data will be deleted from the session.

	@return 
    @c CERR_OK if successful or a specific error code upon failure.
    
    @since 3.11

</member>
        <member name="M:caps_imageInfoHasField(CTImageInfo*,IIF,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Determines whether a field within the given image information object is 
    available or not.

    @param pInfo
    Pointer to a CTImageInfo object which has been previously retrieved from
    a session.

    @param field
    The field ID to query.

    @param pHasField
    Pointer to a CTbool variable which will receive @c true if the given field
    exists or 2c false otherwise.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getSourceImageInfo()\n
    caps_imageInfoHasField()\n

    @since 3.4

</member>
        <member name="M:caps_getImageInfoField(CTImageInfo*,IIF,System.UInt32*)">
    @brief
    Retrieves a field of information from a CTImageInfo object.

    @param pInfo
    Pointer to a CTImageInfo object which has been previously retrieved from
    a session.

    @param field
    ID of the field to retrieve data from. Can be one of the values from the
    ::IIF enumeration. If the given field is unavailable the function returns
    CERR_ITEM_NOT_FOUND.

    @param pData
    Pointer to a CTint32 variable which will receive the field data. The
    returned contents of the field is different depending on which field is
    being requested. Please refer to the documentation of each member of the
    ::IIF enumeration for information on how to handle the @a data argument
    for each field ID.

    @remarks
    caps_imageInfoHasField() can be used to determin in advance if a certain
    information field exists in the given info object.

    @return
    - @c CERR_OK if successful or a specific error code upon failure.
    - @c CERR_ITEM_NOT_FOUND is returned if the field is unavailable.
    .

    @sa
    caps_getSourceImageInfo()\n
    caps_imageInfoHasField()\n

    @since 3.4

</member>
        <member name="M:caps_destroyImageInfo(CTImageInfo*)">
    @brief
    Destroys a CTImageInfo object.

    @param imageInfo
    Pointer to a previously created CTImageInfo object.

    @sa
    caps_getSourceImageInfo()\n

    @since 3.4

</member>
        <member name="T:CTImageInfo">
@}

@addtogroup types_n_defs
@{

    @brief
    Image information object type used when acquiring information about images.

    For information on how to retrieve image information using the @c CTImageInfo object,
    study the documentation for the following functions, and enum:

    - enum @ref IIF
    - caps_getSourceImageInfo()
    - caps_getImageInfoField()
    - caps_imageInfoHasField()

    @since 3.4

</member>
        <member name="M:caps_setSharpnessStrength(cips*,System.Single)">
    @brief
    Set the amount of sharpening applied after Adjust step.

    @param session
    A valid session handle.

    @param sharpnessStrength
    Strength of the sharpness filter. This is equivalent to the sharp_level parameter
    of function caps_setSharpnessEx().
    Default is no sharpening (0.0) and the session internal sharpness filter is just
    by-passing the data.

    @remarks

    The sharpness filtering defined by this function is performed after the
    implicit Adjust filter is applied in the filter chain.
    If the source/sink size ratios is not an even power-of-two factor
    (e.g. downscale 3x) the Adjust filter will apply additional scaling
    (e.g. bi-linear scaling). The sharpen operation specified by caps_setSharpnessStrength()
    is performed AFTER the Adjust filter scaling operation.
    Note that the CAPS filter added caps_beginSharpness() will be added BEFORE
    the Adjust filter scaling.


    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.3

</member>
        <member name="M:caps_undoAll(cips*)">
    @brief
    Reverts all undoable operations performed on the session.

    @param session
    A valid session handle.

    @remarks

    This function basically invokes caps_undo() until caps_canUndo() returns
    false.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_undo(cips*)">
    @brief
    Reverts the most recent undoable operation.

    @param session
    A valid session handle.

    @remarks

    Undoable operations includes all the imaging effects.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

</member>
        <member name="M:caps_blendBackgroundColor(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Tell CAPS whether to blend in the background color when rendering
    from a png or gif source containing alfa data. The default setting for
    this in CAPS is TRUE, i.e. CAPS will blend in the background color.

    @param session
    A valid session handle.

    @param blendInBackground
    A @c if true, use source alpha channel to blend in background color to
    the source color channels. If false, the color channels remains untouched.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.4

</member>
        <member name="M:caps_getCurrentImageSize(cips*,CTSize*)">
    @brief
    Retrieves the dimensions of the current session image.

    @param session
    A valid session handle.

    @param[out] size
    Pointer to a @c CTSize object which will receive the size.

    @remarks

    The "current" image is the result of the source image with all currently
    added effects applied to it. For example if a source image is 640x480
    in size and a cropping effect is applied which crops a rectangle of 100x100
    pixels, the current session image size will equal 100x100 pixels.

    Note that the output image size may differ from the current image size.
    It is not allowed to call this function during a rendering process.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getSourceImageSize()

    @since 3.0

</member>
        <member name="M:caps_getSourceImageSize(cips*,CTSize*)">
    @brief
    Retrieves the source image dimensions.

    @param session
    A valid session handle.

    @param[out] size
    Pointer to a @c CTSize object which will receive the size.

    @remarks

    The source image dimensions are available directly after constructing the
    session.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_getCurrentImageSize()

    @since 3.0

</member>
        <member name="M:caps_signalSessionEvent(cips*,CTSessionEvent)">
    @brief
    Signals the given session about certain events.

    @param session
    Handle to a session.

    @param event
    The event signal. Can be any of the @c ::CTSessionEvent values. Refer to
    documentation of this enumeration for details.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_setSourceImageRaw()

    @since 3.1

</member>
        <member name="M:caps_destroySession(cips*)">
    @brief
    Destroys a previously constructed session object.

    @param session
    Handle to a session.

    @remarks

    The session handle along with all its associated data is invalid after
    calling this function. I.e all CTImage(s) and CTBuffer(s) added to the
    session with OWNERSHIP_POLICY = OWNERSHIP_CAPS.

    @since 3.0

</member>
        <member name="M:caps_setSourceColor(cips*,CTColor,CTSize)">
    @brief
    Changes the source of the session to a color surface of the specified size.

    @param session
    Handle to a session.

    @param color
    A @c CTColor object specifying the the surface color. The alpha channel of
    the specified color is ignored.

    @param size
    The requested size in pixels of the color surface.

    @attention
    This function is not intended to be used iteratively in
    performance critical realtime scenarios. It is intended to make the task
    of changing source while preserving current settings and effects easier.

    See documentation of caps_newSessionWithColor() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

</member>
        <member name="M:caps_destroyGradient(CTGradient*)">
    @brief
    Destroys a previously constructed gradient object.

    @param pGradient
    Handle to a gradient.

    @remarks

    The gradient handle along with all its associated data is invalid after
    calling this function.

    @sa
    caps_newSessionWithGradient()\n
    caps_createEllipticalGradient()\n
    caps_createLinearGradient()

</member>
        <member name="M:caps_createLinearGradient(CTVector,CTVector,CTGradientStop*,System.Int32!System.Runtime.CompilerServices.IsLong,CTGradient**)">
    @brief
    Creates a new linear gradient object, to be used to initiate a gradient session.

    @param begin
    The starting point of a linear gradient, in image coordinates.
    The gradient is only visible on the sides of the [begin end] segment,
    but not beyond the end point or before the begin point.
    The begin point is the origo of the gradient (0 as gradient abscisse).
    The point can be outside the image.

    @param end
    The last point of a linear gradient, in image coordinates.
    The gradient is only visible inside the [begin end] segment.
    The end point has 1 as gradient abscisse.
    The point can be outside the image.

    @param pStops
    An array of gradient stops defining specific color and position constraints
    to generate the gradient. 
    A gradient stop is a color and a 1D position, 
    defining a color anchor on the begin-end axis.
    The positions do not have to be inside [0, 1].
    The alpha channel of the specified color is supported.
    The array does not have to be kept alive after the call.
    
    @param nbStops
    Number of items to be taken in account in the pStops array.

    @param[out] ppGradient
    A @c CTGradient object pointer to be created. The alpha channel of
    the specified color is supported.

    @remarks

    When the gradient is no longer needed it should be destroyed using
    caps_destroyGradient().

    A basic gradient object is a color palette, automatically generated 
    given a reduced set of gradient stops.
    In the palette, each generated color has a position inside [0, 1]. 
    For a given position, the interpollation 
    is based on the surrounding gradient stops.

    @return
    @c CERR_OK if successful or a specific error code upon failure, in which
    case the @c ppGradient argument is left unmodified.

    @sa
    caps_newSessionWithGradient()\n
    caps_createEllipticalGradient()\n
    caps_destroyGradient()


</member>
        <member name="M:caps_createEllipticalGradient(CTVector,System.Single,System.Single,CTGradientStop*,System.Int32!System.Runtime.CompilerServices.IsLong,CTGradient**)">
    @brief
    Creates a new elliptical gradient object, to be used to initiate a gradient session.

    @param center
    The center of the elliptical gradient in image coordinates.
    The gradient is only visible inside the ellipse.
    The center is the origo of the gradient, 
    so it can be viewed as the begin point in the 1D gradient scale, 
    the radius being the end point of abscisse 1.    
    The center of the ellipse can be outside the image.

    @param radiusX
    The horizontal radius of the elliptical gradient in pixels.
    Beyond the radius, the gradient stops, and the last color remains.
    The radius defines the end point for the gradient.
    The radius just has to be greater than 0.

    @param radiusY
    The vertical radius of the elliptical gradient in pixels.
    Beyond the radius, the gradient stops, and the last color remains.
    The radius defines the end point for the gradient.
    The radius just has to be greater than 0.
    To obtain a circular gradient, radiusX and radiusY should be equal.

    @param pStops
    An array of gradient stops defining specific color and position constraints
    to generate the gradient. 
    A gradient stop is a color and a 1D position, 
    defining a color anchor on the begin-end axis.
    The positions do not have to be inside [0, 1].
    The alpha channel of the specified color is supported.
    The array does not have to be kept alive after the call.
    
    @param nbStops
    Number of items to be taken in account in the pStops array.

    @param[out] ppGradient
    A @c CTGradient object pointer to be created. 

    @remarks
    
    When the gradient is no longer needed it should be destroyed using
    caps_destroyGradient().

    A basic gradient object is a color palette, automatically generated 
    given a reduced set of gradient stops.
    In the palette, each generated color has a position inside [0, 1]. 
    For a given position, the interpollation 
    is based on the surrounding gradient stops.

    @return
    @c CERR_OK if successful or a specific error code upon failure, in which
    case the @c ppGradient argument is left unmodified.

    @sa
    caps_newSessionWithGradient()\n
    caps_createLinearGradient()\n
    caps_destroyGradient()


</member>
        <member name="M:caps_setSourceImageBitmap(cips*,CTBitmap*)">
    @brief
    Changes the source image of the given session to the specified raw image
    buffer.

    @param session
    Handle to a session.

    @param pBitmap
    A pointer to a @c CTBitmap object containing the raw image data with
    associated information. The raw image data is not copied by the
    session and must stay alive while using it as source.

    caps_signalSessionEvent() with CTSessionEvent = EVENT_SOURCEDATA_CHANGE
    should be called after this function to notify that the source data have changed.

    See documentation of caps_newSessionWithRaw() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure

    @sa
    caps_signalSessionEvent()

    @since 5.3

</member>
        <member name="M:caps_newSessionWithBitmap(CTBitmap*,cips**)">
    @brief
    Initiates a new session using raw image data.

    @param pBitmap
    A pointer to a @c CTBitmap object containing the raw image data with
    associated information. The raw image data is not copied by the
    session and must stay alive while using it as source.

    @param[out] session
    Pointer to a @c CTSession handle wich will receive the constructed
    session. If construction fails this argument is NULL.

    @attention
    The raw image data must be in one of the valid (input) color formats,
    specified in: @ref supported_colorformats

    @remarks
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    @return
    @c CERR_OK if successful or a specific error code upon failure, in which
    case both the @c session and @c pBitmap arguments are left unmodified.

    @sa
    caps_newSessionWithFile()\n
    caps_newSessionWithFileHandle()\n
    caps_newSessionWithBuffer()\n
    caps_newSessionWithColor()

    @since 5.3

</member>
        <member name="M:caps_setSourceImageBuffer(cips*,CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the source image of the given session to the specified image
    buffer.

    @param session
    Handle to a session.

    @param buffer
    A @c CTBuffer pointer specifying a buffer containing image data. The buffer
    is not copied, and must stay alive while using it as source.

    @param format
    The format of the image data contained in @c buffer. This value can be one
    of the @c ::CTImageFormat values supported by CAPS internally.

    @remarks

    IMPORTANT: This function is not intended to be used iteratively in
    performance critical realtime scenarios. It is intended to make the task
    of changing source while preserving current settings and effects easier.
    \n\n

    caps_signalSessionEvent() with CTSessionEvent = EVENT_SOURCEDATA_CHANGE
    should be called after this function to notify that the source data have changed.

    See documentation of caps_newSessionWithBuffer() for more information.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    caps_newSessionWithBuffer()\n
    caps_signalSessionEvent()

    @since 3.1

</member>
        <member name="M:caps_setSourceImageIndex(cips*,CTStream*)">
    @brief 
    Speed up the first time a CTSession is rendered, using speedtags index.

    @param session
    Handle to a session.

    @param pIndexStream
    A pointer to a stream containing a speedtags image index.
    This stream object cannot be used or freed by anyone until the session has
    been destroyed, or until the source used by the session has been changed 
    ( using caps_setSourceImage ).

    @remarks
    The currently supported image formats are:
    @li JPEG 

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 5.2

</member>
        <member name="M:caps_setSourceImage(cips*,CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the source image of the given session to the specified image
    stream.

    @param session
    Handle to a session.

    @param pStream
    A pointer to a stream containing an image. This stream object cannot be
    used or freed by anyone until the session has been destroyed, or
    until the source used by the session has been changed
    ( using caps_setSourceImage ).

    @param format
    The image format of the stream.

    The following image formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @attention
    This function is not intended to be used iteratively in performance
    critical realtime scenarios. It is intended to make the task of changing
    source easier, while preserving current settings and effects.

    @note
    Calling this function will reset the @c enablePrefetch flag to
    @c true (default); see: caps_uthSetPrefetchFlag()
    If this is not desired, @c caps_uthSetPrefetchFlag must be called
    with the appropriate parameters after each call
    to @c caps_setSourceImage.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createSession()
    - caps_uthSetPrefetchFlag()
    - caps_getImageTypeFromExt()
    - caps_getImageType()
    - caps_setSourceImage()
    .

    @since 3.8

</member>
        <member name="M:caps_setSourceDecoder(cips*,CTDecoder*)">
    @brief
    Changes the source image of the given session to the specified decoder.

    @param session
    Handle to a session.

    @param pDecoder
    A pointer to a CTDecoder object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @attention
    This function is not intended to be used iteratively in performance
    critical realtime scenarios. It is intended to make the task of changing
    source easier, while preserving current settings and effects.

    @note
    Calling this function will reset the @c enablePrefetch flag to
    @c true (default); see: caps_uthSetPrefetchFlag()
    If this is not desired, @c caps_uthSetPrefetchFlag must be called
    with the appropriate parameters after each call
    to @c caps_setSourceImage.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createSessionFromDecoder()
    - caps_setSourceImage()
    .

    @since 3.8.2 R01

</member>
        <member name="M:caps_createSessionFromDecoder_Ex(CTDecoder*,CTRegionDec*,cips**)">
    @brief
    Initiates a new session using a CTDecoder as input.

    @param pDecoder
    A pointer to a CTDecoder object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @param pRegionDec
    A pointer to a CTRegionDec object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @param[out] session
    Pointer to a handle which will receive the constructed session. If
    construction fails this argument is NULL.

    @note
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    @return
    @c CERR_OK if successful or a specific error code upon failure.


</member>
        <member name="M:caps_createSessionFromDecoder(CTDecoder*,cips**)">
    @brief
    Initiates a new session using a CTDecoder as input.

    @param pDecoder
    A pointer to a CTDecoder object containing an image. This decoder object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed.

    @param[out] session
    Pointer to a handle which will receive the constructed session. If
    construction fails this argument is NULL.

    @note
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_createDecoderFromFormat()
    - caps_getImageType()
    - caps_newSessionWithRaw()
    - caps_newSessionWithColor()
    .

    @since 3.8.2 R01

</member>
        <member name="M:caps_createSession(CTStream*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)">
    @brief
    Initiates a new session using an image from the stream as input.

    @param pStream
    A pointer to a CTStream object containing an image. This stream object
    cannot be used, or freed, by the caller until the session has been
    destroyed, or until the source used by the session has been changed
    using: caps_setSourceImage().

    @param format
    The image format of the stream.

    @param[out] session
    Pointer to a handle which will receive the constructed session. If
    construction fails this argument is NULL.

    The following image formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @note
    When the session is no longer needed it should be destroyed using
    caps_destroySession().

    For creation of streams see:
    - @ref scb_ctstream_buffer
    - @ref scb_ctstream_file
    - @ref scb_ctstream_interface
    .

    @remark
    By default, when @c caps_newSession is called, the entire Jpeg image is
    read into memory. This is usually desired since it provides best (speed)
    performance, but is not always neccessary. In particular, if
    a @c CTSession is created from a buffer stream, this would duplicate the
    memory buffer. To disable the caching in this case, the function:
    caps_uthSetPrefetchFlag() should be called with the @c enablePrefetch
    parameter set to @c false.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_uthSetPrefetchFlag()
    - caps_createSessionFromDecoder()
    - caps_newSessionWithRaw()
    - caps_newSessionWithColor()
    - caps_getImageType()

    @since 3.8

</member>
        <member name="M:caps_createEncoderFromFormat(CTStream*,CTImageFormat,CTEncoder**)">
    @brief
    Create a CTEncoder from a given CTImageFormat

    @param pStream 
    A pointer to a stream opened with write access.
    If this function is successful, the stream must be alive, and must not be
    manipulated with, during the lifetime of the CTEncoder.

    @param format
    The desired image format that the encoder should output to.
    The following formats are supported:
    @b JPEG

    @param[out] ppEncoder The created encoder.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.8.2 R01


</member>
        <member name="M:caps_createDecoderFromFormat(CTStream*,CTImageFormat,CTDecoder**)">
    @brief
    Create a CTDecoder from a given image format

    @param pStream 
    A pointer to a CTStream object containing an image, opened with read access.
    If this function is successful, the stream must be alive, and must not be
    manipulated with, during the lifetime of the CTDecoder.

    @param format
    The image format of the stream.
    The following formats are supported:
    @b JPEG, @b PNG, @b GIF, @b BMP, @b WBMP, @b TIFF

    @param[out] ppDecoder The created decoder.

    @return
    @c CERR_OK if successful or a specific error code upon failure.

    @sa
    - caps_getImageType()
    .

    @since 3.8.2 R01


</member>
        <member name="M:caps_getImageTypeFromHdrMem(CTBuffer!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pBuffer
    A pointer to a buffer containing the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType()\n
    caps_getImageTypeFromHdrFile()\n
    caps_getImageTypeFromHdrFileHandle()\n

    @since 3.4

</member>
        <member name="M:caps_getImageTypeFromHdrFileHandle(CTFile*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pHandle
    A handle to a file with read permissions.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.
    NOTE: Currently only SRCIMG_FORMAT_UNDEFINED or SRCIMG_FORMAT_JPEG_BASELINE
    are returned.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType() \n
    caps_getImageTypeFromHdrMem()\n
    caps_getImageTypeFromHdrFile()\n

    @since 3.4

</member>
        <member name="M:caps_getImageTypeFromHdrFile(System.Char!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pFilename
    The filesystem path to the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n
    caps_getImageType()\n
    caps_getImageTypeFromHdrMem()\n
    caps_getImageTypeFromHdrFileHandle()\n

    @since 3.4

</member>
        <member name="M:caps_getImageType(CTStream*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file header.

    @param pStream
    A pointer to a stream comtaining an image.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @note This function will restores the stream position to where it started reading,
    so the stream may safely be used in subsequent calls.

    @return
    - @c CERR_OK if function succeds and format is identified
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.\n
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageTypeFromExt()\n

    @since 3.8

</member>
        <member name="M:caps_getImageTypeFromExt(System.Char!System.Runtime.CompilerServices.IsConst*,CTImageFormat*)">
    @brief
    Retrieves the image type from the file extension.

    @param pFilename
    The filesystem path to the file.

    @param[out] pFormat
    Contains the detected image type if the function returns CERR_OK.

    @return
    - @c CERR_OK if function succeds and format is identified.
    - @c CERR_UNSUPPORTED_IMAGE if function succeds and format isn't recognized.
    - An error code, if the function fails (i.e @c CERR_MEMALLOC_FAILED).
    .

    @sa
    caps_getImageType()\n

    @since 3.2

</member>
        <member name="M:caps_getVersion">
@file caps_base.h
@brief This header defines the public interface of the CAPS Base API.
@ingroup caps_baseapi_basicops

    @addtogroup caps_baseapi
    @par Notable conventions
    All functions of the CAPS API return errorcodes, except for
    destruction interfaces which by design cannot fail.\n\n

    @par
    Due to the above convention, if a construction interface fails, it always
    uses the return value to propagate the error back to the caller and the
    constructed object is always passed back to the caller through an output
    argument.

    @par Design By Contract
    CAPS is implemented by the so called "Design by contract" principle.
    All API functions handle invalid user input by returning the error code
    @c CERR_INVALID_PARAMETER. This error is returned as an alternative to
    triggering an assert/breakpoint and should not be treated as "normal"
    errors which can be reported and recovered from. Since no implicit
    execution break is performed by CAPS in unrecoverable error cases it
    is essential that all error codes returned from the API are handled
    properly.

@addtogroup caps_baseapi_basicops
@brief Basic operations provided by the CAPS Imaging Engine module.
@{

    @brief
    Retrieves the release version of the API.

    @return
    The version as a static constant null-terminated string.

    @since 3.0

</member>
        <member name="M:ctdecoder_getImageSize(CTDecoder*,CTSize*)">
    @brief
    Retrieves the image size of the underlying image.

    @param pDecoder Decoder to use for this call.
    @param[out] pSize Pointer to a CTSize where the result is stored.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_interfaceContext(CTDecoder*,CTInterfaceID,System.Void**)">
    @brief
    Returns the interface context related to the interface id.

    The caller is responsible for knowing the exact type returned
    by a call to this function.

    @param pDecoder Decoder to use for this call.
    @param interfaceId Interface id to query for a context.
    @param[out] ppInterfaceContext Pointer to the returned context. The 
    caller does not own the reference, and so must not attempt to free
    it.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not implemented by the
    decoder implementation.
    @c CERR_INVALID_PARAMETER if the particular requested interface is not
    available.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_getRegionDec(CTDecoder*,CTRegionDec**)">
    @brief
    Returns a region decoder.

    This functions creates an instance of a region decoder and returns it to 
    the caller. The caller will be responsible of destroying this object.
    Before calling this function, the decoder must be parsed.
 
    @param pDecoder A pointer to a valid decoder instance.
    @param[out] ppRegionDec The created region decoder.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @sa ctregiondec.h

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_getSeqDecWithScanProc(CTDecoder*,CTScanProc*,CTSeqDec**)">
    @brief
    Returns a sequential decoder.
     
    This functions creates an instance of a sequential decoder and returns
    it to the caller. The caller will be responsible for destroying this object.
    Before calling this function, the decoder must be parsed.
     
    @param pDecoder A pointer to a valid decoder instance.
    @param pScanProc The scanline processor to be used with this decoder.
    @param[out] ppSeqDec A pointer to a valid sequential decoder instance.
     
    Currently only JPEG is supported for this operation

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.

    @sa ctseqdec.h

    @since 5.1

</member>
        <member name="M:ctdecoder_getSeqDec(CTDecoder*,CTImage*,CTSeqDec**)">
    @brief
    Returns a sequential decoder.

    This functions creates an instance of a sequential decoder and returns
    it to the caller. The caller will be responsible for destroying this object.
    Before calling this function, the decoder must be parsed.

    Currently only JPEG is supported for this operation

    @param pDecoder A pointer to a valid decoder instance.
    @param pImage An image on which the image will be decoded.
    @param[out] ppSeqDec A pointer to a valid sequential decoder instance.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not supported.
    @c CERR_DECODER_NOT_PARSED if the decoder has not yet been parsed.
    @c CERR_UNSUPPORTED_COLOR_MODE if the image has an unsupported color mode.

    @sa ctseqdec.h

    @since 5.2

</member>
        <member name="M:ctdecoder_parseHeader(CTDecoder*,CTIterator**)">
    @brief
    Parses the header. 
    
    The iterator returned by this function must be iterated until a 
    CRES_TASK_COMPLETE is returned before most other operations on the decoder
    object can be called.

    @param pDecoder
    A pointer to a valid decoder instance.

    @param[out] ppIterator
    Iterator created by the call to this function. If left as null, the 
    call will complete instantly.

    @return @c CERR_OK if successful or a specific error code upon failure.

    @remarks The iterator must be destroyed by the caller.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_destroy(CTDecoder*)">
    @brief
    Destroys an instance of a CTDecoder.

    @param pDecoder A pointer to a valid decoder instance or NULL.

    @since 3.8.2 R01

</member>
        <member name="M:ctdecoder_createDecoder(CTDecoderType,CTStream*,CTDecoder**)">
    @brief
    Creates an instance of a CTDecoder. The decoder types listed in CTDecoderType are supported.

    @param decoderType Type of decoder implementation
    @param pStream Stream containing the data to decode
    @param[out] Pointer to the created decoder instance

    @sa CTDecoderType

</member>
        <member name="T:CTDecoder">
    @file ctdecoder.h
    @brief This file defines the public interface of CTDecoder class.

    @ingroup ctdecoder

    @addtogroup ctdecoder
    @brief CTDecoder provides an abstraction of decoding image data and
    properties.

    The CTDecoder class itself is responsible only for decoding image metadata,
    such as the header, and creating a CTRegionDec or CTSeqDec which can decode
    pixel data from the image.

    @{

@brief
CTDecoder provides a generic image decoding interface. 

</member>
        <member name="M:ctseqdec_prepare(CTSeqDec*)">
    @brief
    Prepares the decoder

    @param pDecoder A decoder instance to prepare.

    @return CERR_OK or a proper error code.

    @since 5.4

</member>
        <member name="M:ctseqdec_decode(CTSeqDec*,CTIterator**)">
    @brief
    Starts the decoding process, and returns an iterator that can
    be used to perform the decoding.

    @param pDecoder A decoder instance to decode from.
    @param[out] ppIterator A pointer to an iterator to be used for performing
    the decoding.

    @return CERR_OK or a proper error code.

    @since 3.8.2 R01

</member>
        <member name="M:ctseqdec_destroy(CTSeqDec*)">
    @brief
    Destroys a sequential decoder instance.

    @param pDecoder A pointer to the decoder to be destroyed.

    @since 3.8.2 R01

</member>
        <member name="T:CTSeqDec">
@file ctseqdec.h
@brief This header file defines the interface needed to access a CTSeqDec
object.
@ingroup ctseqdecoder

    @addtogroup ctseqdecoder
    @brief The CTSeqDec class defines an interface to access sequantial decoding
    of pixel data.

    While this is normally aquired from a CTDecoder source using the specific
    interface for requesting pixel decoders, this is not necessarily the case.

    @{

</member>
        <member name="M:ctregiondec_getImageSize(CTRegionDec*,CTSize*)">
    @brief
    Retrieves the image size of the underlying image.

    @param pRegionDec Region decoder
    @param[out] pSize Pointer to a CTSize where the result is stored.

    @return 
    @c CERR_OK if successful, or an error code on failure.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_getDecodeResult(CTRegionDec*,CRESULT*)">
    @brief
    Retrieves the result of decoding the image.

    Typically, this call indicates whether the image was correctly decoded or 
    if the image could only be partially decoded.

    @param pRegionDec Region decoder to query.
    @param pDecodeResult Result of the decoding process

    @return CRESULT indicating whether the decoder could be queried for
    decoding state.

    @remarks
    This function is normally called after prepare has completed successfully.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_destroy(CTRegionDec*)">
    @brief
    Destroys the region decoder.
    The decoder used while retrieving the region decoder via ctdecoder_getRegionDec
    must be alive when calling this function.

    @param pRegionDec A pointer to a valid CTRegionDec instance, or NULL.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_decodeRegion(CTRegionDec*,CTRect*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Decodes a region of the image specified by a rectangle.
    Note:
    If the image is scaled the rectangle is given in the scaled coordinates of
    the source image. Also, the rectangle must be within the scaled image.
    The image is scaled as follows: floor(image_dims/downScale)


    @param pRegionDec A pointer to a valid CTRegionDec instance.

    @param pRect A pointer to a valid rectangle object.
           Note: The rectangle should be given in the scaled source image.

    @param downScale A down scaling factor less or equal to 128.
                     It must be a power of two.
    @param pImageChs A pointer to a valid image object.

    @remarks
    Supported color modes: AYUV4444, ARGB8888, RGBA8888, BGRA8888 and RGB565.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctregiondec_prepare(CTRegionDec*,CTIterator**)">
    @brief
    Prepares the region decoder to decode pixel data.

    @param pRegionDec
    Decoder to prepare for decoding.

    @param[out] ppIterator
    Iterator to use for preparing the decoder. If left as null, the operation 
    will complete instantly.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @remarks
    Even if the image is corrupt, this function should return CERR_OK, as long as
    the image can be decoded using ctregiondec_decodeRegion(). If the image is corrupt
    but can be decoded, an appropriate error specification should be given in
    ctregiondec_getDecodeResult().

    @since 3.8.2 R01

</member>
        <member name="T:CTRegionDec">
@file ctregiondec.h
@brief This file defines the interface to a CTRegionDec.
@ingroup ctregiondecoder

    @addtogroup ctregiondecoder
    @brief A region decoder object, CTRegionDec, is responsible for decoding
    pixel data from a generic pixel source.

    This pixel data can be any rectangular subset of the original image, so a
    decoder supporting this interface can be used to "random access" pixels of
    the image.
    
    Normally this pixel source comes from a decoder (and the CTRegionDec is 
    created by using the CTDecoder function for that purpose) but this is not 
    necessarily the case.

    @{

@brief The region decoder object.

</member>
        <member name="M:ctencoder_encodeBitmap(CTEncoder*,CTBitmap*)">
    @brief
    Encodes an image of pixel data.

    @param pEncoder A pointer to a valid encoder instance.
    @param pImage A CTBitmap object representing the image.

    @return CERR_OK, a proper error code.
    @since 5.4

</member>
        <member name="M:ctencoder_encodeImage(CTEncoder*,CTImage*)">
    @brief
    Encodes an image of pixel data.

    @param pEncoder A pointer to a valid encoder instance.
    @param pImage A CTImage object representing the image.

    @return CERR_OK, a proper error code.
    @since 5.3 

</member>
        <member name="M:ctencoder_negotiateTileSpec(CTEncoder*,CTSize,CTTileSpec*)">
    @brief
    Negotiates the tile specification with the encoder.

    @param pEncoder A pointer to a valid encoder instance.
    @param dims Dimensions of the image to be encoded.
    @param[in,out] pTileSpec A pointer to a tile specification to negotiate.

    @return CERR_OK if the encoder could negotiate the tile spec. In this 
    case, the pTileSpec variable with new constraints or accepted as is.
    CERR_NOT_IMPLEMENTED is returned if the negotiate function isn't 
    implemented.

    @remarks The encoder may chose to reject all incoming suggestions
    regardless of how reasonable they would be to fulfill (for instance
    lowering the range of allowed widths). If, however, the encoder returns
    CERR_OK, this tile spec can be expected to appear in beginEncoding, if
    that function is called directly after negotiations have finished.

    If this function is not called, the encoder may choose any tile spec
    in the call to beginEncode.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_interfaceContext(CTEncoder*,CTInterfaceID,System.Void**)">
    @brief
    Returns the interface context related to the interface id.

    This interface is implementation specific and in its simplest form, may
    return a pointer to the underlying context (ie. returns a reference to
    pContext). The caller is responsible for casting the returned pointer 
    to the correct type.

    This operation may be thought of as upcasting an interface.

    @param pEncoder Encoder to use for this call.
    @param interfaceId Interface id to query for a context.
    @param[out] ppInterfaceContext Pointer to the returned context. The 
    caller does not own the reference, and so must not attempt to free
    it.

    @return 
    @c CERR_OK if successful, or an error code on failure.
    @c CERR_NOT_IMPLEMENTED if this operation is not implemented by the
    encoder implementation.
    @c CERR_INVALID_PARAMETER if the particular requested interface is not
    available.

    @remarks This method is optional to implement. If not implemented, it 
    will return an appropriate error code.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_destroy(CTEncoder*)">
@brief
Destroys an instance of a CTEncoder.

@param pEncoder A pointer to a valid encoder instance or NULL.

@since 3.8.2 R01

</member>
        <member name="M:ctencoder_endEncoding(CTEncoder*)">
    @brief
    End encoding.
    
    Finalizes the encoding, freeing resources and writing a footer if
    needed.
    
    @param pEncoder A pointer to a valid encoder instance.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder has not begun to encode, or has
    already stopped.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_encodeTile(CTEncoder*,CTBitmap*)">
    @brief
    Encodes a tile of pixel data.
    
    The tiles must follow the tile specification returned in the begin
    function.
    
    @param pEncoder A pointer to a valid encoder instance.
    @param pTile A CTImageChannels object representing a tile of pixel data.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder is not ready to encode pixel data.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @remarks The tile parameter expects to follow the pTileSpec returned
    by the encoder in ::ctencoder_beginEncoding except for a few cases.
    @li At the end of a scan line, the tiles may violate the minimum width
    specified by the tile specification. Similarly, if the encoder has reached
    the top or bottom of the image, the minimum height value may be ignored.
    This condition is true for height and width granularity as well.
    @li The encoder is free to ignore extra data passed to it, if that data 
    exceeds the image dimensions.
    @li If the encoder needs extra data past the image dimensions, it is free
    to invents its own pixel data for those regions.

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_beginEncoding(CTEncoder*,CTSize,CTTileSpec*)">
    @brief
    Begins the encoding process, preparing the necessary structures.

    This function will also output the header if needed, and return
    a CTTileSpec object with the required specifications of the input
    pixel data.
    
    @param pEncoder A pointer to a valid encoder instance.
    @param dims Dimensions of the image to be encoded.
    @param[out] pTileSpec A pointer to a tile specification.
    
    @return CERR_OK, a proper error or status code. Since the
    encoder encodes to a stream, it could also delay.
    @c CERR_OPERATION_FAILED if the encoder is not ready to begin encoding
    pixel data, or has already started.
    @c CERR_STREAM_DELAYED if the stream delayed the write operation.

    @remarks
    The tile specification does not indicate suggested values for tiles, and
    must be strictly followed with a few exceptions (that are documented in
    ctencoder_encodeTiles).

    @since 3.8.2 R01

</member>
        <member name="M:ctencoder_createEncoder(CTEncoderType,CTStream*,CTEncoder**)">
    @brief
    Creates an instance of a CTEncoder. The encoder types listed in CTEncoderType are supported.

    @param encoderType Type of encoder implementation
    @param pStream Output stream that encoded data will be written to
    @param[out] Pointer to the created encoder instance

    @sa CTEncoderType

</member>
        <member name="F:gDefaultTileSpec">
    @brief
    Default tile specification.

    This variable is used to initialize a tile 
    specification prior to negotiations.

</member>
        <member name="T:CTEncoder">
@file ctencoder.h
@brief This header file defines the public interface for accessing a 
CTEncoder object.
@ingroup ctencoder

    @addtogroup ctencoder
    @brief A CTEncoder object handles encoding of pixel data sent to it as a 
    sequence of tiles.

    It also handles tile specification, in order to support optimal use of
    caching or other needed mechanisms of the underlying encoder implementation.

    @{

    @brief
    CTEncoder provides a generic image encoding interface. 


</member>
        <member name="M:ctimagechannels_getChannel(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTImageBase*)">
    @brief
    Get a channel from the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param channelIndex The index of the channel to return. The index start at 0.
    @param[out] pImage A pointer to CTImageBase which will contain the channel 
                       image information.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getNumChannels(CTBitmap*)">
    @brief
    Get number of channels the CTImageChannels consists of.
    
    @param pImageChs A valid pointer to a CTImageChannels.

    @return The number of channels.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getDims(CTBitmap*,CTSize*)">
    @brief
    Get the image dimension of the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param[out] pDims A pointer where the dimension will be stored.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_getColorMode(CTBitmap*,CTColormode*)">
    @brief
    Get the color mode of the CTImageChannels.
    
    @param pImageChs A valid pointer to a CTImageChannels.
    @param[out] pColorMode A pointer where the color mode will be stored.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_destroy(CTBitmap*)">
    @brief
    Destroys an image channels object.
    
    @param pImageChs Valid pointer to a CTImageChannels.

    @remarks
    If the CTImageChannels where created with ctimagechannels_createFromImages() 
    the pixel data is not destroyed, the ownership remains with the caller.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_createFromImages(CTSize,CTColormode,CTImageBase*,CTBitmap**)">
    @brief
    Create an image channels object from images.
    
    @param dims A CTSize which describes the image dimensions
    @param colorMode The image color mode.
    @param pImages An array of CTImageBase types which the image channels will be 
                   created from. Each CTImageBase represent a channel and 
                   the scanline has to be 32-bit aligned. The routine will only 
                   use as many CTImageBase as the color mode implies and 
                   @c CERR_INVALID_PARAMETER will be returned if there is too 
                   few CTImageBase.
    @param[out] ppImageChs The created image channels object.
 
    @remarks
    Only AYUV4444, ARGB8888 and YUV422P is supported.
    The ownership of the pixel data will remain with the caller.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctimagechannels_create(CTSize,CTColormode,CTBitmap**)">
@file ctimagechannels.h
@brief Defines the public interface of CTImageChannels
@ingroup imagechannels_utility

    @addtogroup imagechannels_utility
    @brief
    Utility functions for creating and managing image buffers, with the image
    data arranged in separate color buffers/channels.

    @{

    @brief
    The image channels type supports images with several channels. 
    
    For example CM_YUV422P is a planar format which consist of three channels;
    one for Y, one for U and one for V. However CM_ARGB8888 and CM_AYUV4444 
    are not planar formats and they consist of one channel which holds the 
    entire image.

    Type CTImageChannels is deprecated and is superseded by CTBitmap.

    @brief
    Create an image channels object.
    
    @param dims A CTSize which describes the image dimensions.
    @param colorMode The image color mode.
    @param[out] ppImageChs The created image channels object.
 
    @remarks
    Only AYUV4444, ARGB8888 and YUV422P is supported.

    @return
    @c CERR_OK if successful or an appropriate error code on failures.

    @since 3.8.2 R01

</member>
        <member name="M:ctbitmap_createCroppedBitmap(CTBitmap*,CTRect,CTBitmap**)">
    @brief Crops a rectangle from bitmap and creates a bitmap from that area.
           Data is still owned by source

    @param pSrc The source bitmap that will be croped.
    @param rect Cropped area
    @param ppBitmap[out] Cropped bitmap

    @return CRESULT indicating result of the operation.
 

</member>
        <member name="M:ctbitmap_convertBitmap(CTBitmap*,CTBitmap*)">
    @brief Converts a bitmap to a different color format.
    The destination bitmap must have the same dimensions as the source bitmap.
    The color format of pBitmapDest specifies the target color format.

    @param pBitmapSrc The source bitmap that will be converted.
    @param pBitmapDest Bitmap where the converted data is stored.

    @return CRESULT indicating result of the operation.
 
    @since 5.4

</member>
        <member name="M:ctbitmap_getPlaneOffset(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Returns a pointer to the plane pixel data
 
    @param pBitmap      Pointer to a valid bitmap
    @param imagePlane Index of a valid image plane
 
    @return Pointer to the beginning of the bitmap byte buffer for the specified
    plane.

    @since 5.3

</member>
        <member name="M:ctbitmap_getPlane(CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief Retrieves an image plane from the ctbitmap.

    @param pBitmap Pointer to a valid bitmap object.
    @param bitmapPlane Index of the bitmap plane to retrieve.
 
    @return zero in all fields if the call fails. Typically, because pBitmap is invalid or
    because imagePlane is larger than the number of available planes.

    @since 5.3

</member>
        <member name="M:ctbitmap_getPlaneCount(CTBitmap*)">
    @brief Returns the number of planes for the specified image.
    
    @param pBitmap Pointer to a valid bitmap object.
 
    @return 0 if pBitmap is invalid, or if the call fails.

    @since 5.3

</member>
        <member name="M:ctbitmap_getColorMode(CTBitmap*)">
    @brief Retrieves the ctbitmap color format.
    
    @param pBitmap Pointer to a valid bitmap object.
 
    @return CM_UNDEFINED if pBitmap is invalid.

    @since 5.3

</member>
        <member name="M:ctbitmap_getScanline(CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief Retrieves scanline of an image plane from the ctbitmap.

    @param pBitmap Pointer to a valid bitmap object.
    @param bitmapPlane Index of the bitmap plane to retrieve.
 
    @return Scanline of plane number plane.


</member>
        <member name="M:ctbitmap_getDims(CTBitmap*)">
    @brief Returns the width and height of a bitmap.
 
    @param pBitmap Pointer to a valid bitmap object.
 
    @return Dimensions of the bitmap or (0,0) if an error occured (typically bad
    input parameter, such as a null pointer).

    @since 5.3

</member>
        <member name="M:ctbitmap_createCopy(CTBitmap*,CTBitmap**)">
    @brief Creates a CTBitmap with the same dimensions and colormode as another bitmap
    and copies the pixel data to the new bitmap.

    @param pIn              Pointer to a valid bitmap.
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @remark Note that the scanlines and internal data layout of the created bitmap
    may differ from the input bitmap.

</member>
        <member name="M:ctbitmap_createFromDataPlanar(System.Byte**,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst*,CTSize,CTColormode,CTBitmap**)">
    @brief Creates a CTBitmap from the pointers given by ppData.

    @param ppData           Pointer to an array of data pointers. ppData[n] 
                            points to the nth plane's pixel data.
    @param pScanline        Pointer to an array of scanlines.
    @param dims             Dimensions of the bitmap representation
    @param format           Color mode of the pixels described by pData
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="M:ctbitmap_createFromData(System.Byte*,CTSize,System.Int32!System.Runtime.CompilerServices.IsLong,CTColormode,CTBitmap**)">
    @brief Creates an image from the pointer given by pData.

    For planar color formats ctbitmap_createFromDataPlanar() should be used 
    instead.
 
    @param pData        Pointer to a byte buffer of pixel data.
    @param dims         Dimensions of the bitmap representation
    @param scanline Scanline of the bitmap representation. If set to zero, a
    suitable scanline will be assigned.    
    @param format       Color mode of the pixels described by pData
    @param[out] ppBitmap    Output bitmap from the function.

    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="M:ctbitmap_createFromImage(CTImage*,CTBitmap**)">
    @brief Creates a ctbitmap from an existing ctimage. Memory is shared between the
    two structures.
    
    @param pImage       Existing image. This image must be kept alive at least as long
                        as the created bitmap.
    @param[out] ppBitmap    Output from the function
 
    @return CRESULT indicating success. Only when CERR_OK is true will ppBitmap be
    written to.

    @deprecated This functionality is deprecated. Use ctbitmap_createFromData()
    or ctbitmap_createFromDataPlanar() instead.

    @since 5.3

</member>
        <member name="M:ctbitmap_destroy(CTBitmap*)">
    @brief Destroy a ctbitmap
    @param pBitmap A bitmap

    @since 5.3

</member>
        <member name="M:ctbitmap_create(CTSize,CTColormode,CTBitmap**)">
    @brief Creates a new ctbitmap with the given dimensions and format.
 
    @param dims Desired dimensions of the bitmap
    @param format Desired color mode of the bitmap
    @param[out] ppBitmap Variable where the bitmap is stored
 
    @return CRESULT indicating result of the operation.

    @since 5.3

</member>
        <member name="T:CTBitmap">
@ingroup ctbitmap
@file ctbitmap.h
@brief Defines a raw bitmap buffer CTBitmap

    @addtogroup ctbitmap
    @brief Raw bitmap buffer

    @{

    @brief Type representing a raw bitmap buffer

    @since 5.3

</member>
        <member name="T:CTImageBase">
@brief
A CTImageBase describes basic information of an image.

</member>
        <member name="M:ctinterfaceid_equals(CTInterfaceID,CTInterfaceID)">
    @brief
    Test two CTInterfaceID objects for equality.

    @param id1
    An interface id.

    @param id2
    Another interface id.

    @return true iff the two interface ids are equal.

    @since 3.8.2 R01

</member>
        <member name="T:CTInterfaceID">
@brief
Id of an interface, used in interface based designs.

</member>
        <member name="M:ctstream_write(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Writes data to the stream.
 
    @param pStream Stream to write to.
    @param bytes Number of bytes to write. Writing zero bytes is a no-op (returning
    no error code).
    @param pData Pointer to data to write to the stream. May be null only when bytes
    is also 0.
    @param pWrittenBytes Number of bytes actually written to the stream.
 
    @return
    @li CERR_OK if all bytes were written to the stream, even if the stream is now
    completely full.
    @li CERR_STREAM_FULL if the stream can no longer accept any more bytes. Written
    bytes is now less than bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support writing.
 
    @note The stream pointer is advanced *pWrittenBytes after writing.
 
    @note Writing to a stream may invalidate internal read cache in the stream.
 
    @note Writing zero bytes from a null pointer is a valid operation which returns
    zero written bytes and a CERR_OK return code.
 
    @since 5.4

</member>
        <member name="M:ctstream_peek(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Peeks at data in the stream without advancing the file pointer. This 
    operation does not transfer ownership of the data to the caller.
 
    @param pStream Stream to peek at.
    @param bytes Number of bytes to peek. Zero bytes is valid input.
    @param ppData A pointer to the peeked data will be returned on this variable
    upon successful completion. Set to null if zero bytes are requested.
    @param pReadBytes Number of bytes in *ppData which are valid. Set even if
    the function fails.
 
    @return
    @li CERR_OK if the full request was satsified.
    @li CERR_STREAM_END_OF_DATA if the stream could not deliver enough bytes to
    satisfy the request. In this case, *pReadBytes != bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support peek or read.

    @note The stream pointer is not advanced by reading from the stream. Advance 
    the stream pointer by calling @ref ctstream_skip.

    @note Large requests may consume lots of memory depending on the stream
    implementation.
 
    @note The returned pointer ppData is not owned by the caller, and must not
    be written to. It is made invalid when another call to a stream function is
    made.

    @since 5.4

</member>
        <member name="M:ctstream_read(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Reads data from the stream. The stream pointer is advanced as expected when
    reading.
 
    @param pStream Stream to read from.
    @param bytes Number of bytes to read. Must be larger than zero.
    @param pData Buffer where the data is stored. Must be able to hold the entire
    request, ie. be at least bytes large, even if the stream would not be able
    to provide that many bytes.
    @param pReadBytes Number of bytes actually read from the stream. Set even if
    the function fails.
 
    @return 
    @li CERR_OK if the full request was satsified.
    @li CERR_STREAM_END_OF_DATA if the stream could not deliver enough bytes to
    satisfy the request. In this case, *pReadBytes != bytes.
    @li CERR_NOT_IMPLEMENTED if the stream does not support peek or read.

    @since 5.4

</member>
        <member name="M:ctstream_copy(CTStream*,CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Copy data from a read enabled source stream to a write enabled destination
    stream.

    @param pSrcStream read enabled stream where the data is going to be copied from.
    @param pDstStream write enabled stream where the data is going to be copied to.

    @param numBytes Number of bytes to copy. Special value 0, can be used
    for copying all of the data in pSrcStream from the current position
    to the end of the stream.

    @param copyChunkSize A performance parameter. This will specify the
    size in bytes of the chunks used to make the copy operation. A large value
    can increase performance but also increase the memory consumption, while a 
    small value can decrease performance.
    
    If this parameter is set to zero, the function will estimate chunk size 
    based on the internal characteristics of the stream, which will give a good
    trade-off between performance and memory consumption.

    @return @c CRESULT
    
    @li @c CERR_OK if no error occurred.
 
    Other proper error codes that depends on the underlying stream or
    memory subsystem.

    @since 3.8

</member>
        <member name="M:ctstream_abort(CTStream*)">
    @brief
    Aborts the current stream operation.

    This function shall be used if all ongoing operations are going to 
    be aborted. An example of use is in the case a reading stream has started
    a request, but a subsequent lock is not necessary. 
    
    It will also clear possible old error states.

    Calling abort will let the stream in a usable state.

    @param pStream A valid instance of a stream object.
 
    @deprecated Function deprecated since 5.4. This function has no replacement
    and should be used with care. Using read/peek/write eliminates the need for
    this function, because those functions do not have state.

    @since 3.8

</member>
        <member name="M:ctstream_tell(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    returns the current stream position ( if available ).

    canSeek must be used to determine if the function can return 
    the current position.

    @param pStream A valid instance of a stream object.
    @param[out] pOffset current global offset position.

    @return @c CRESULT with proper error code.

    @since 3.8

</member>
        <member name="M:ctstream_seek(CTStream*,System.UInt32)">
    @brief
    Seeks into the stream to offset position.
    
    The seek is absolute, but it should not be assumed that
    a just created stream is positioned at offset 0. 
    The tell function should be used to determine the initial 
    stream position.

    @param pStream A valid instance of a stream object.
    @param offset Absolute offset where to seek.

    @since 3.8

</member>
        <member name="M:ctstream_canSeek(CTStream*)">
    @brief
    This function returns true if the underlaying stream supports
    seeking to absolute positions.
    
    If this function returns true,
    it also means that the stream can return the current position
    with the tell function.

    @param pStream A valid instance of a stream object.
    @return @c true if the stream can seek, @c false otherwise.

    @since 3.8

</member>
        <member name="M:ctstream_skip(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Skips @c numBytes from the stream.

    @param pStream A valid instance of a stream object.
    @param numBytes Amount of bytes to skip.

    @since 3.8

</member>
        <member name="M:ctstream_writeFlush(CTStream*)">
    @brief
    Flush all internal buffers to the underlying stream.
    This function shall be used to guarantee that the data is 
    actually written.

    @param pStream A valid instance of a stream object.

    @return @c CRESULT

    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4.
 
    @note Not all streams can flush properly. The safest way to flush a stream
    after writing is to destroy it, which must force the underlying
    implementation to commit data. Using this function is probably a mistake.

    @since 3.8

</member>
        <member name="M:ctstream_writeRelease(CTStream*)">
    @brief
    Release previous locked buffer. This function can delay.

    @param pStream A valid instance of a stream object.

    @return @c CRESULT
    
    @li @c CERR_OK if no error occurred.
 
    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_writeRespond(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Tells the underlying stream, how many bytes are actually written to
    the locked buffer, and can start an synchronous operation if the
    underlying stream supports it.

    @param[in] pStream 
    A valid instance of a stream object.

    @param[in] writtenBytes 
    Amount of bytes written to the locked buffer. This value must be lower than
    or equal to the number of bytes previously locked.

    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_writeLock(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Returns a locked buffer for writing of numBytes in size. 

    @param pStream A valid instance of a stream object.
    @param numBytes Number of bytes to lock.
    @param[out] ppBuffer Pointer to locked buffer.
    @param[out] pLockedBytes Number of bytes actually locked. With some streams 
    with constrained capacity, this value may be less than the actually requested. 

    @return @c CRESULT with proper error code. This function does not block 
    and does not delay. But it can return CERR_STREAM_END_OF_DATA, and in that
    case, pLockedBytes will be less than the required amount.

    @deprecated Function deprecated since 5.4. Please use @ref ctstream_write
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readRelease(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Releases latest locked block of data.

    All locked blocks must be released with this function in order to 
    avoid resource leaks.

    For optimal performance, the user of this API should not keep 
    locked buffers for future use. If it is required to store the locked data
    for future use, it is recommended to copy this buffer to a 
    local buffer.

    @param pStream A valid instance of a stream object.
    @param usedBytes Amount of bytes read from the locked buffer.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readLock(CTStream*,System.Byte**,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Locks an internal stream buffer, that holds the requested data ( if available )
    or an error code.

    This function can block if the requested data has not yet been received
    by the underlaying stream.

    @param pStream A valid instance of a stream object.
    @param[out] ppData A buffer with the data requested. This buffer can 
    only be freed using ctstream_readRelase.
    @param[out] pReadBytes Number of bytes returned in the locked buffer.

    @return  @c CRESULT
    
    @li @c CERR_STREAM_END_OF_DATA if there is not enough data in the stream
    to fulfill the request ( typical case when the stream maps to a file, and
    there is no more data left to read from the file ). pReadBytes will 
    return the amount of data read.

    @li @c CERR_OK if the whole request could be fulfilled. pReadBytes will be
    equal to the amount of bytes requested in the request function.

    Other proper error codes that depends on the underlying stream or
    memory subsystem.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_readRequest(CTStream*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Request a read data buffer.

    Requests a buffer with given amount of bytes from the stream,
    without blocking the caller.

    The requested buffer can be received in the readLock function
    at a later time.

    @param pStream A valid instance of a stream object.
    @param numBytes Amount of requested bytes.
 
    @deprecated Function deprecated since 5.4. Please use @ref ctstream_peek
    instead.

    @since 3.8

</member>
        <member name="M:ctstream_getContext(CTStream*)">
    @brief
    Returns the user data from the underlying stream.

    @param pStream a valid pointer to a stream object.

    @return pointer to the underlying stream user data.

    @since 3.8

</member>
        <member name="M:ctstream_destroy(CTStream*)">
    @brief
    Destroys a stream.

    @param pStream a valid pointer to a stream object, or NULL.

    @since 3.8

</member>
        <member name="T:CTStream">
@ingroup scb_ctstream
@file ctstream.h
@brief Public interface for the stream subsystem.

    @addtogroup scb_ctstream
    @brief Stream handling.

    CTStream provides a generic interface for stream operations. The interface
    can be implemented in different ways, and operate on different underlying
    media (e.g. memory, file, network stream).

    @par Note about usage
    Most functions that take a CTStream object as an input parameter and
    (temporarily) take ownership of a stream, will modify the stream state
    during their execution (e.g. reading from, and writing to, the stream).
    This means that streams can't normally be reused between calls, or objects.
    For instance, when a CAPS session is finished with a stream, that stream
    will not be automatically reset to the beginning.  A reason for this is that
    the streams may not represent a data source where it's possible to do a seek
    operation, such as a network connection. Also, there may be interesting data
    at the end of a stream. Thus resetting the stream would lead to inconsistent
    behavior, and complicate application development.

    @par
    The recommended way to get the same data again, is to recreate the stream
    from the same source. For some applications, where a stream is known to be a
    file, buffer, or some other medium where seek is supported, the stream can,
    alternatively, be reset to the beginnning by calling ctstream_seek() with 
    @c offset=0.

    @par Customizing CTStream
    For implementation of support for other stream types, see: @ref scb_ctstream_interface

    @{
        @defgroup scb_ctstream_buffer Buffer streams
        @defgroup scb_ctstream_file   File streams

    @ingroup types_n_defs
    @brief
    Public object to represent generic streams.

    @sa CIStream.

    @since 3.8

</member>
        <member name="M:caps_destroyIterator(CTIterator*)">
    @brief 
    Destroys an iterator.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @remarks

    This function ignores whether or not the iterator is idle or currently
    associated with an operation.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_abortIterator(CTIterator*)">
    @brief 
    Unconditionally aborts an iterative operation.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @remarks

    Calling this function on an iterator which already is "finished", or has 
    been aborted before, will be ignored without indication of an error.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_getIterationData(CTIterator*,System.UInt32*)">
    @brief 
    Retrieves auxillary data associated with the most recent iteration.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @param out_data
    Pointer to a @c CTuint32 variable which will receive the iteration
    data.

    @remarks

    This is an auxillary function provided for iterators to be used when 
    information of any kind needs to be communicated from the iterator back to 
    the user after performing an iteration. If a particular kind of operation
    will make use of this service, it is always noted in the documentation of
    the function initiating the operation and creating the iterator object.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.1

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="M:caps_getCurIterationCount(CTIterator!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief 
    Retrieves the number of iterations performed on an iterator so far.

    @param it
    Pointer to a @c CTIterator object which has been previously created as start
    of an iterative operation.

    @param count
    Address of @c CTuint32 variable which will receive the number of iterations 
    which, up to the point of this call, has been performed on the iterator.

    @return 
    @c CERR_OK if successful or a specific error code upon failure.

    @since 3.0

    @deprecated This function is deprecated since 5.3.

</member>
        <member name="F:OWNERSHIP_EXTERNAL">
Signals that ownership is NOT transferred to CAPS. Responsibility to 
destroy the object or deallocate heap memory stays with the caller. The
safest place to make such cleanup tasks is directly after destroying the
corresponding session. Before that point the object or memory buffer may
still be in use.

</member>
        <member name="F:OWNERSHIP_CAPS">
Causes CAPS to take ownership over the object or memory buffer in question.
When the item is no longer needed it is destroyed, which may occur anytime
during the life cycle of a session. 
The method used to destroy an object and/or deallocate heap memory is
further described where the option is available. 
IMPORTANT: When heap memory is involved either directly or indirectly 
(indirectly for instance when being part of an object like CTBuffer) it 
will be deallocated using oslmem_free(), which is part of the OS 
integration layer (OSIL). This should be carefully considered when 
transferring ownership to CAPS since there's a risk that memory can be 
allocated with a different API than the one being used in OSIL. Such a 
risk may lead to errors in diagnostic tool reports or leak detectors.

</member>
        <member name="F:EVENT_PLUGINSTATE_CHANGE">
Signals the session that the state of an external plugin has changed and
will need a full rendering process in order to synchronize its behaviour.

</member>
        <member name="F:EVENT_SOURCEDATA_CHANGE">
Signals the session that the source data contents has changed, which
will cause any internal cache or state related to the source data to be
invalidated. This is for instance useful when creating a session with 
caps_newSessionWithRaw(), and then continously updating the contents of the 
source buffer.

</member>
        <member name="F:CAPS_OUTPUT_STRETCH">
Stretches the image data to fit the specified output dimensions. This
option allows the image to be distorted.

</member>
        <member name="F:CAPS_OUTPUT_PRESERVE_AR">
Fits the image data within the output dimensions as well as possible,
preserving aspect ratio. If the image is fit smaller than the bounding
box formed by the output dimensions, the remaining borders will be
padded with the currently set background color.
See caps_setBackgroundColor() for details.

</member>
        <member name="D:IMAGE_FORMAT_SPEC">
    @brief
    Image format specification type. 

    This type can be used in favor of @ref CTImageFormat in order to allow 
    specifications of image formats not included in CAPS' internal codec 
    support.

    @since 3.0

</member>
        <member name="D:CAPS_IMAGE_FORMAT">
    @brief
    Defines the image formats which CAPS internally support. 
    @c IMAGE_FORMAT_RANGE_MIN and @c IMAGE_FORMAT_RANGE_MAX should never be
    used, they are control points for internal formats.

    @deprecated CAPS_IMAGE_FORMAT is deprecated, use CTImageFormat instead.

    @since 3.0

</member>
        <member name="T:cips">
@file caps_types.h
@brief This header defines the public types of the CAPS Base API.
@ingroup types_n_defs

@addtogroup types_n_defs
@{

    @brief
    The central handle type used for all editing sessions.

    A session is the environment surrounding the task of decoding-encoding and
    optionally manipulating a source image with a number of effects.

    @since 3.0

</member>
        <member name="M:oslfile_clone(CTFile*,CTFile**)">
    Opens a file from the local file system.

    @param pFile        CTFile pointer specifying an open file.

    @param[out] ppFile  CTFile pointer to the clone

    @return CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="M:oslfile_remove(System.Char!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Removes a file from the file system.

    @param pFilename    Name of the file to be removed.

    @return CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_size(CTFile*)">
    @brief
    Determines the size of a file.

    @param pFile        CTFile pointer specifying an open file.

    @return The size of the file in bytes. 

</member>
        <member name="M:oslfile_pos(CTFile*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Retrieves the current read/write file position.

    @param pFile        CTFile pointer specifying an open file.

    @param pOutPos      CTuint32 pointer which will receive the position.
        
    @return CERR_OK if successful, otherwise a specific error code.

</member>
        <member name="M:oslfile_seek(CTFile*,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Changes the current read/write position.

    @param pFile        CTFile pointer specifying an open file.

    @param offset       Offset to seek from the position specified by \em mode.

    @param mode         The seek mode, see remarks section for details.

    @remarks
    The @c mode argument can be one of the following values:
    - OSLFILE_SEEK_CUR - The @c offset is from the current position.
    - OSLFILE_SEEK_SET - The @c offset is from the beginning of the file.
    .

    @return CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_eof(CTFile!System.Runtime.CompilerServices.IsConst*)">
    @brief
    Checks whether an end-of-file indicator has been set for a file.

    @param pFile        CTFile pointer specifying an open file.

    @return
    - @c true, if end-of-file indicator is set.
    - @c false, otherwise.
    .

</member>
        <member name="M:oslfile_flush(CTFile*)">
    @brief
    Forces any pending buffered output to be written to a file.

    @param pFile        CTFile pointer specifying an open file.

    @return @c CERR_OK if successful, otherwise an error code.

</member>
        <member name="M:oslfile_write(CTFile*,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Writes a specified amount of data to a file.

    @param pFile        CTFile pointer specifying an open file.

    @param pBuffer      Buffer with data to be written. Cannot be zero and must
                        be of at least \p count size in bytes.
    @param count        Number of bytes to be written.

    @return Number of bytes actually written to the file. Zero is returned if 
    no data can be written or if an error occurred.

</member>
        <member name="M:oslfile_read(CTFile*,System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Reads the specified number of bytes from a file.

    @param pFile        A CTFile pointer specifying an open file.

    @param pBuffer      Buffer to which data will be read. Cannot be zero and
                        must be of at least \p count size in bytes.
    @param count        Number of bytes to read from the file.

    @return Number of bytes actually read from the file. Zero is returned if 
    no data can be read or if an error occurred.

</member>
        <member name="M:oslfile_close(CTFile*)">
    @brief
    Closes a file previously opened with oslfile_open().

    @param pFile        A CTFile pointer specifying an open file.

</member>
        <member name="M:oslfile_open(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,CTFile**)">
    @brief
    Opens a file from the local file system.

    @param pFilename    File system path to the requested file.

    @param flags        The access rights, mode and share policy to use when
                        opening the file. See FILE_OPEN_FLAGS for details.

    @param ppOutFile    Address of a CTFile pointer which will receive the 
                        opened file.

    @remarks
    The file handle returned in pOutFile should be closed with oslfile_close()
    when no longer needed. This file will not create subdirectories when opening
    a file for writing. CERR_FILE_NOT_FOUND is returned if a file can not be
    created because sub directories are missing.
    @n@n
    The file pointer is always positioned at the beginning of the file, even
    when FOF_ACCESS_READWRITE is used.

    @return CERR_OK if successful or a specific error code upon failure.

</member>
        <member name="F:FOF_BEHAVE_NO_REPLACE">
@brief
File system implementation may ignore this.
This flag can only be used together with read and write access. When 
this flag is enabled, files will not be truncated when opened with write
access.

</member>
        <member name="F:FOF_SHARE_FULL">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may be shared by other processes for both reading and
        writing (default).

</member>
        <member name="F:FOF_SHARE_READONLY">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may only be opened by other processes for reading.

</member>
        <member name="F:FOF_SHARE_EXCLUSIVE">
        @deprecated

        Optional support. If the file system does not support this,
        ignore. The file may not be opened by other processes.

</member>
        <member name="F:FOF_MODE_TEXT">
@brief Optional support. If the file system does not support this,
open as binary.

</member>
        <member name="F:FOF_MODE_BINARY">
        @deprecated

        This behaviour is default. The file is opened in binary
        mode (default). This is the only behavior guaranteed to work

</member>
        <member name="F:FOF_ACCESS_READWRITE">
@brief The file is opened with read and write access. 
</member>
        <member name="F:FOF_ACCESS_WRITE">
@brief The file is opened with write access. 
</member>
        <member name="F:FOF_ACCESS_READ">
@brief The file is opened with read-only access (default). 
</member>
        <member name="T:CTFile">
    @file oslfile.h
    @brief Declares the virtual interface (used internally in CAPS), providing
    support for file management.

    It is strongly recommended that an underlying implementation of this
    virtual file interface is based on a buffered file API in order to get the
    best performance from CAPS and other software based on CAPS.

    @addtogroup os_file
    @brief Mapping of basic OS file functionality.

    These function declarations are found in the header file: oslfile.h
    
    @{

@brief The generic file handle type.

</member>
        <member name="F:_static_assert">
@} 
</member>
        <member name="M:scberror_cresultToString(CRESULT)">
    @brief Returns the string representation of an error code.

    @param result Code to convert to a string
    
    @return A pointer to constant memory indicating the desired string
    representation.

    @remarks If the error code is not defined, or internal to Scalado,
    a "CERR_UNKNOWN_ERROR" is returned.

</member>
        <member name="F:SCB_MODULE_STORAGE_BASE">
@brief <b>Error codes related to CTStorage</b></member>
        <member name="F:SCB_MODULE_SPMO_BASE">
@brief  <b>Speedview related error codes:</b></member>
        <member name="F:CERR_HARDWARE_NOT_AVAILABLE">
@brief
Error code when hardware is busy or for some reason not available on the 
current platform. This may be a permanent or temporary condition depending
on the capabilities of the running environment.

</member>
        <member name="F:SCB_MODULE_OSLJPEG_BASE">
@brief  <b>Hardware related error codes:</b></member>
        <member name="F:SCB_MODULE_OSLFILE_BASE">
@brief  <b>OS file system related error codes:</b></member>
        <member name="F:SCB_MODULE_JPEGTOOLS_BASE">
@brief  <b>JpegTools related error codes:</b></member>
        <member name="F:SCB_MODULE_PANORAMA_BASE">
@brief  <b>Autorama related error codes:</b></member>
        <member name="F:CERR_STREAM_REQUEST_MISMATCH">
@brief
This error code is returned when readRequest already have been 
called with a different amount of requested bytes.

</member>
        <member name="F:CERR_STREAM_FULL">
@brief
This error code is returned when a stream is full and it is not
possible to write more data to it.

</member>
        <member name="F:CERR_STREAM_MISSING_REQUEST">
@brief
An operation such as readLock or readRelease has been performed
without making a readRequest.

</member>
        <member name="F:CERR_STREAM_OP_REQUIRE_SEEK">
@brief
This error is returned when some operation needs to seek into the
stream, but the seek function is not available (for example if the stream
is mapped to a network device, it is not always possible to perform seek ).

</member>
        <member name="F:CERR_STREAM_DELAYED">
@brief
This result code tells that the underlying stream has been delayed.

Either than there is no data available currently, or it is not possible
to write to the stream right now ). When a stream delays, it is assumed
that it will be possible to read or write to the stream in a later moment,
this depends on the particular implementation or resource associated to
the stream.

</member>
        <member name="F:SCB_MODULE_CTSTREAM_BASE">
@brief  <b>I/O Stream related error codes module:</b></member>
        <member name="F:SCB_MODULE_CTCACHE_BASE">
@brief  <b>Cache related error codes:</b></member>
        <member name="F:SCB_MODULE_EXIF_BASE">
@brief  <b>Exif related error codes:</b></member>
        <member name="F:SCB_MODULE_IPL_BASE">
@brief  <b>Internal error codes:</b></member>
        <member name="F:SCB_MODULE_GENERAL_BASE">
@brief  <b>General error codes:</b></member>
        <member name="F:SCB_STATUS_CODES_BASE">
@brief  <b>General status codes:</b></member>
        <member name="T:CTIterator">
@endcond 
    @ingroup types_n_defs
    @brief Defines an iterator type.

    Defines an iterator object which is used to handle operations distributed
    as a sequence of iterations rather than a complete, blocking process.

    @since 3.0

    @deprecated The use of iterators is deprecated since 5.3.

</member>
        <member name="D:SCB_RENDER_OPT">
@brief
Directions on how to render an image

</member>
        <member name="T:CTGradientStop">
@brief
Colors and their boundaries for gradient

</member>
        <member name="T:CTGradientType">
@brief
Kinds of color gradient to generate an image

</member>
        <member name="T:CTBlendFunction">
@brief 
Blend function

</member>
        <member name="T:CTImageFormat">
@brief 
Image format

</member>
        <member name="F:CTImage.scanline">
        The width in bytes of one scanline within the image. Cannot be zero.
     
        For a planar pixel format, the scanline specifies the number of bytes needed
        for the pixel buffer for a single row of pixels. That is, the total needed
        size for the image is scanline * height bytes.
     
        For an interleaved image the above holds true, but in this special case, the
        scanline also means the number of bytes for each row of pixels.

</member>
        <member name="T:CTImage">
@endcond 
    @brief 
    Defines an uncompressed raw image through a pixel buffer and associated 
    information.


</member>
        <member name="T:CTBufferFloat">
@endcond 
@cond scb_internal_doc

</member>
        <member name="T:CTBuffer32">
@cond scb_internal_doc

</member>
        <member name="T:CTBuffer">
@brief Defines a buffer with accompaning size.

</member>
        <member name="T:CTColor">
@brief
Defines the color of a single pixel by the channels @a alpha, @a red, @a green
and @a blue. Each channel is in the range 0-255.

</member>
        <member name="T:CTSize">
@endcond 
@brief Defines a two-dimensional size.

</member>
        <member name="D:CTPoint">
@brief Deprecated definition of a point. Equivalent to CTVector.

</member>
        <member name="T:CTVector">
@brief Defines a two-dimensional vector.

</member>
        <member name="T:CTRect">
@brief Defines a rectangle.

</member>
        <member name="T:CTClass">
    @brief
    Returns the class's Id, given its name.

    eg: SCC_CLASS_ID(CTObject) would be replaced by CTObjectId

    @brief
    Returns the interface's Id, given its name.

    eg: SCC_INTERFACE_ID(CTSerializable) would be replaced by CTSerializableId

    @brief
    Returns the variable name of the class, given its name.

    eg: SCC_CLASS_NAME(CTObject) would be replaced by CTObjectClass


    @brief
    This macro declares the necessary parts of a class in order to use it in
    code.

    Currently that is an external declaration of the class id, and a
    typedef for the class structure (which is private in this context).


    @brief
    Declares an interface for public use.

    This is necessary to invoke in the public header file, as it declares the
    interface id and interface structure.


    @brief
    Holds information about the class Id, parent/super
    class, and virtual function table etc.

    Although, the function table may not always be complete, and it does not
    represent the function table of a live object of that class (necessarily).

    The members of this struct are not intended to be accessed directly.


</member>
        <member name="T:CTSRational">
@brief Signed rational representation.

</member>
        <member name="T:CTRational">
@brief Unsigned rational representation.

</member>
        <member name="D:CTuint128">
@brief 128 bit unsigned integer representation.

</member>
        <member name="D:CTuint64">
@brief 64 bit unsigned integer representation.

</member>
        <member name="D:CTint8">
@ingroup types_n_defs
@file scbdefs.h
@brief Defines public symbols, macros and types.

    @addtogroup types_n_defs
    @brief Defines public symbols, macros and types.

    @par Naming conventions
    Type names are always prefixed with @c CT. Following the @c CT prefix is
    always the specifier of the type. If the first letter of the type
    specifier is lower case it signifies that it's primitive (e.g @c CTint) and
    upper case that it's complex (e.g @c CTRect).

    @par Visibility
    Complex types are always public within this header as it by definition
    doesn't require linkage.

    @{

@name Primitive data types

</member>
        <member name="P:Nokia.Graphics.Imaging.BrightnessFilter.Level">
            <summary>
                <para>Image brightness level.</para>
                <para>Range [-1.0, 1.0], where 0.0 results in no adjustment.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BrightnessFilter.#ctor(System.Double)">
            <summary>
Creates and initializes a new BrightnessFilter with a brightness level.
</summary>
            <param name="level">
                <para>The brightness level.</para>
                <para>Range [-1.0, 1.0], where 0.0 results in no adjustment.</para>
            </param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BrightnessFilter.#ctor">
            <summary>
Creates and initializes a new BrightnessFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BrightnessFilter">
            <summary>
Adjusts the brightness in the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.EllipseRadius.Y">
            <summary>
The ellipse's radius along the y-axis.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.EllipseRadius.X">
            <summary>
The ellipse's radius along the x-axis.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EllipseRadius.#ctor(System.Double,System.Double)">
            <summary>
Creates and initializes a new ellipse radius.
</summary>
            <param name="x">
The ellipse's radius along the x-axis.
</param>
            <param name="y">
The ellipse's radius along the y-axis.
</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.EllipseRadius">
            <summary>
Defines the radius of the ellipse by defining its radius in x and y dimension.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RadialGradient.Stops">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.RadialGradient.EllipseRadius">
            <summary>
The radius of the gradient. This is the distance from <see cref="P:Nokia.Graphics.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle, specify a value for only one dimension and set the other to 0.</para></summary>
            <remarks>
                <para>Default is (0.5, 0.5).</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RadialGradient.CenterPoint">
            <summary>
The center point of the gradient, to which a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></summary>
            <remarks>
                <para>Default is (0.5, 0.5).</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RadialGradient.#ctor(Windows.Foundation.Point,Nokia.Graphics.Imaging.EllipseRadius,Nokia.Graphics.Imaging.GradientStop[])">
            <summary>Creates and initializes a new radial gradient, with the specified center point, radius, and stops.</summary>
            <param name="centerPoint">The center point of the gradient, to which a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></param>
            <param name="radius">The radius of the gradient. This is the distance from <see cref="P:Nokia.Graphics.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle, specify a value for only one dimension and set the other to 0.</para></param>
            <param name="stops">The stops that define the gradient.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RadialGradient.#ctor(Windows.Foundation.Point,Nokia.Graphics.Imaging.EllipseRadius)">
            <summary>Creates and initializes a new radial gradient, with the specified center point and radius.</summary>
            <param name="centerPoint">The center point of the gradient, to which a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 0 would map.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para></param>
            <param name="radius">The radius of the gradient. This is the distance from <see cref="P:Nokia.Graphics.Imaging.RadialGradient.CenterPoint" /> that a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 1 would map to.
<para>Expressed in the unit coordinate space of the gradient image area, i.e., the top left corner of the gradient image is at (0.0), and the bottom right corner is at (1, 1).</para><para>To create a circle specify value for only one dimension and set the other one to 0.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RadialGradient.#ctor">
            <summary>Creates and initializes a new radial gradient with default values.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RadialGradient">
            <summary>A radial gradient, changing color from a center point outwards.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoLevelsFilter.#ctor">
            <summary>
Creates and initializes a new AutoLevelsFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoLevelsFilter">
            <summary>
Balances the intensity level of the image, for
example making dark images lighter and vice versa.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.OilyFilter.#ctor">
            <summary>
Creates and initializes a new OilyFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OilyFilter">
            <summary>
Applies an oil-painting-like effect to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LomoFilter.LomoStyle">
            <summary>
Color style.
</summary>
            <remarks>
                <para>Default is LomoStyle::Neutral</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LomoFilter.LomoVignetting">
            <summary>
The vignetting level.
</summary>
            <remarks>
                <para>Default is LomoVignetting::Low</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LomoFilter.Saturation">
            <summary>
                <para>The color saturation of the image.</para>
                <para>Range [0.0, 1.0], where 0.0 implies no saturation.</para>
            </summary>
            <remarks>
                <para>Default is 0.5</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LomoFilter.Brightness">
            <summary>
                <para>The brightness of the image.</para>
                <para>Range [0.0, 1.0], where 0.0 gives a bright image and 1.0 a dark image.</para>
            </summary>
            <remarks>
                <para>Default is 0.5</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LomoFilter.#ctor(System.Double,System.Double,Nokia.Graphics.Imaging.LomoVignetting,Nokia.Graphics.Imaging.LomoStyle)">
            <summary>
Creates and initializes a new LomoFilter with specified settings.
</summary>
            <param name="brightness">
The brightness adjustment.
<para>Range [0.0, 1.0], where 0.0 gives a bright image and 1.0 a dark image.</para></param>
            <param name="saturation">
The color saturation adjustment. 
Range [0.0, 1.0], where 0.0 implies no saturation.
</param>
            <param name="vignetting">
The vignetting level.
</param>
            <param name="style">
The color style.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LomoFilter.#ctor">
            <summary>
Creates and initializes a new LomoFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LomoFilter">
            <summary>
Applies a lomo effect on the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LomoStyle">
            <summary>
Color styles to use with the lomo filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoStyle.Yellow">
            <summary>Yellow</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoStyle.Blue">
            <summary>Blue</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoStyle.Green">
            <summary>Green</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoStyle.Red">
            <summary>Red</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoStyle.Neutral">
            <summary>Neutral</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LomoVignetting">
            <summary>
Vignetting impact levels to use with the lomo filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoVignetting.High">
            <summary>High</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoVignetting.Medium">
            <summary>Medium</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.LomoVignetting.Low">
            <summary>Low</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorizationFilter.Chrominance">
            <summary>
                <para>Strength of chrominance adjustment. </para>
                <para>Range: [-1.0, 2.0].</para>
            </summary>
            <remarks>
Default is 0.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorizationFilter.Luminance">
            <summary>
                <para>Strength of luminance adjustment.</para>
                <para>Range: [-1.0, 2.0].</para>
            </summary>
            <remarks>
Default is 0.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorizationFilter.Color">
            <summary>
The reference color. 
</summary>
            <remarks>
                <para>The alpha-component is ignored.</para>
                <para>Default is (0, 0, 0, 0)</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorizationFilter.#ctor(Windows.UI.Color,System.Double,System.Double)">
            <summary>
Creates and initializes a new ColorizationFilter with the specified values.
</summary>
            <param name="color">
The reference color.
<para>The alpha-component is ignored.</para></param>
            <param name="luminance">
The luminance adjustment.
<para>Range: [-1.0, 2.0]. </para></param>
            <param name="chrominance">
The chrominance adjustment.
<para>Range: [-1.0, 2.0]. </para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorizationFilter.#ctor">
            <summary>
Creates and initializes a new ColorizationFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorizationFilter">
            <summary>
Adjusts color tone and luminance/chrominance levels, 
adds a single color to an image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MirrorFilter.#ctor">
            <summary>
Creates and initializes a new MirrorFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.MirrorFilter">
            <summary>
Mirrors the left half of the image onto the right half.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.StampFilter.Threshold">
            <summary>
                <para>Threshold level. </para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.StampFilter.Smoothness">
            <summary>
                <para>Smoothness level. </para>
                <para>Range [0, 6].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.StampFilter.#ctor(System.Int32,System.Double)">
            <summary>
Creates and initializes a new StampFilter with specified smoothness and threshold values.
</summary>
            <param name="smoothness">
The smoothness level.
<para>Range [0, 6].</para></param>
            <param name="threshold">
The threshold level.
<para>Range [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.StampFilter.#ctor">
            <summary>
Creates and initializes a new StampFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.StampFilter">
            <summary>
Applies a stamp-like effect, resulting in a black and white image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.GetInterpolatedValuesAsStdArray">
            <summary>
Gets a list containing the interpolated y-values representing the curve.
</summary>
            <returns>Array with y-values which defines the curve.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.GetInterpolatedValues">
            <summary>
Gets a list containing the interpolated y-values representing the curve.
</summary>
            <returns>Array with y-values which defines the curve.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.RemovePoint(System.Int32)">
            <summary>
Remove a point from the Curve. 
</summary>
            <param name="x">
The x-value for the point to be removed.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.SetPoint(Windows.Foundation.Point)">
            <summary>
Set a point on the Curve. 
</summary>
            <param name="point">
The point to set.
</param>
            <remarks>
If a point with the same x-value has previously been set, it will be replaced.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.SetPoint(System.Int32,System.Int32)">
            <summary>
Set a point on the Curve. 
</summary>
            <param name="x">
The x-value of the point to set.
</param>
            <param name="y">
The y-value of the point to set.
</param>
            <remarks>
If a point with the same x-value has previously been set, it will be replaced.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.Clear">
            <summary>
Clears all points currently set.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Curve.Points">
            <summary>
The set of points used to generate the interpolated curve. 
When setting points, previously set points will be deleted. 
</summary>
            <remarks>
If not explicitly set, the value for x=0 is 0, and the value for x=255 is 255.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Curve.CurveInterpolation">
            <summary>
The mode of interpolation between points.
</summary>
            <remarks>
Default value is LinearInterpolation
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.#ctor(Nokia.Graphics.Imaging.CurveInterpolation)">
            <summary>
Creates and initializes a new curve with the specified interpolation mode.
</summary>
            <param name="curveInterpolation">
The mode of interpolation between points.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Curve.#ctor">
            <summary>
Creates and initializes a new curve with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Curve">
            <summary>
A curve represented by 256 points created by interpolation between specified control points.
<para>If not explicitly set, the value for x=0 is 0, and the value for x=255 is 255.</para></summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CurveInterpolation">
            <summary>
Curve interpolation modes that are used with Curves.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CurveInterpolation.NaturalCubicSpline">
            <summary>
Use natural cubic spline interpolation between the points.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CurveInterpolation.Linear">
            <summary>
Use linear interpolation between the points.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegRenderer.RenderAsync">
            <summary>
Renders the source to a JPEG image, according to the current settings.
</summary>
            <returns>An asynchronous operation which yields an IBuffer with the JPEG file.</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.RemoveExif">
            <summary>
If true, the JPEG image will have any EXIF metadata removed.
</summary>
            <remarks>
The default is false. Setting this to true can be useful for making the resulting JPEG as small as possible, 
but also means that no metadata is included with the image.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.OutputColorSpacing">
            <summary>
Color space to use in the JPEG image.
</summary>
            <remarks>The default is Yuv420.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.Quality">
            <summary>
                <para>Quality of the JPEG image. </para>
                <para>Range (0.0, 1.0].</para>
            </summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.OutputOption">
            <summary>
Specifies how to handle an aspect ratio difference between the source and the JPEG image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.Size">
            <summary>
Size of the JPEG image, in pixels.
</summary>
            <remarks>If not set, the size of the source will be used. This is the default.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.JpegRenderer.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegRenderer.Dispose">
            <summary>
Destructor for the renderer.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new JPEG renderer, with the source already specified.
</summary>
            <param name="source">The <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> that will provide the image to be rendered.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.JpegRenderer.#ctor">
            <summary>
Creates and initializes a new JPEG renderer.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.JpegRenderer">
            <summary>
Renders an image source to JPEG buffer.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Internal.JpegRenderer">
Renders an image source to jpeg buffer.
</member>
        <member name="M:Nokia.Graphics.Imaging.NegativeFilter.#ctor">
            <summary>
Creates and initializes a new NegativeFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.NegativeFilter">
            <summary>
Converts the image to a negative.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LinearGradient.Stops">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.LinearGradient.EndPoint">
            <summary>The end point of the gradient, where a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 1 would be.</summary>
            <remarks>
                <para>Default is (1.0, 1.0).</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LinearGradient.StartPoint">
            <summary>The start point of the gradient, where a <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> with Offset equal to 0 would be.</summary>
            <remarks>
                <para>Default is (0.0, 0.0).</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinearGradient.#ctor(Windows.Foundation.Point,Windows.Foundation.Point,Nokia.Graphics.Imaging.GradientStop[])">
            <summary>Creates and initializes a new linear gradient, using the specified start point, end point, and stops.</summary>
            <param name="startPoint">The start point of the gradient.</param>
            <param name="endPoint">The end point of the gradient.</param>
            <param name="stops">The stops that define the gradient.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinearGradient.#ctor(Windows.Foundation.Point,Windows.Foundation.Point)">
            <summary>Creates and initializes a new linear gradient, using the specified start point and end point.</summary>
            <param name="startPoint">The start point of the gradient.</param>
            <param name="endPoint">The end point of the gradient.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinearGradient.#ctor">
            <summary>Creates and initializes a new linear gradient with default values.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LinearGradient">
            <summary>A linear gradient.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.Quality">
            <summary>
                <para>Quality of the result.</para>
                <para>Changing quality of the effect affects time and memory consumption of the effect by adjusting the working size. The working size of the effect is dependent on the Source's size, so a lower Quality value might be necessary to avoid an OutOfMemoryException.</para>
                <para>Range [0.0, 1.0]. Default value is 1.</para>
            </summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.AnnotationsSource">
            <summary>
                <para>An image containing the user annotations for the foreground and the background. Must contain at least one pixel in foreground color and one pixel in background color.</para>
                <para>The segmenter will only consider pixels of foreground color or background color, any other color will be treated as unknown.</para>
            </summary>
            <remarks>
                <para>The AnnotationsSource image should have the same aspect ratio as the Source image, however if it does not, it will be stretched to the aspect ratio of the Source image.</para>
                <para>Even if the annotation contains at least one pixel of foreground color, and background color respectively, this is not always enough for a successful segmentation. In this case an exception is thrown when the segmentation is being performed, either while rendering or during a preload operation.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.BackgroundColor">
            <summary>
                <para>The color that represents the background annotations in the AnnotationsSource image.</para>
                <para>Default value is blue (A = 255, R = 0, G = 0, B = 255).</para>
            </summary>
            <remarks>
                <para>Make sure the unspecified portion of the image is a different color than both ForegroundColor and BackgroundColor.</para>
                <para>To avoid overhead do not change this property between calls to Render or PreloadAsync.</para>
                <para>The alpha channel of the color is ignored.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.ForegroundColor">
            <summary>
                <para>The color that represents the foreground annotations in the AnnotationsSource image.</para>
                <para>Default value is red (R = 255, G = 0, B = 0).</para>
            </summary>
            <remarks>
                <para>Make sure the unspecified portion of the image is a different color than both ForegroundColor and BackgroundColor.</para>
                <para>To avoid overhead do not change this property between calls to Render or PreloadAsync.</para>
                <para>The alpha channel of the color is ignored.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Windows.UI.Color,Windows.UI.Color,Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
                <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source, annotations source, foreground color, and background color.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="foregroundColor">The color that represents the foreground annotations on AnnotationsSource.</param>
            <param name="backgroundColor">The color that represents the background annotations on AnnotationsSource.</param>
            <param name="annotationsSource">An image containing the user annotations for foreground and background. Must contain at least one pixel in foreground color, and one pixel in background color.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Windows.UI.Color,Windows.UI.Color)">
            <summary>
                <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source, foreground color, and background color.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="foregroundColor">The color that represents the foreground annotations on AnnotationsSource.</param>
            <param name="backgroundColor">The color that represents the background annotations on AnnotationsSource.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
                <para>Creates and initializes a new InteractiveForegroundSegmenter with the specified source.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.InteractiveForegroundSegmenter">
            <summary>
                <para>Segments the source image into foreground and background guided by user provided annotations.
The output is a black and white mask where white areas represent the foreground and black areas represent the background.</para>
                <para>This class should be used as an effect in the rendering chain, on par with <see cref="T:Nokia.Graphics.Imaging.FilterEffect" /> and <see cref="T:Nokia.Graphics.Imaging.LensBlurEffect" />.</para>
                <para>The segmenter can be used to provide a mask for one of the other filters or effects, such as <see cref="T:Nokia.Graphics.Imaging.BlendFilter" /> or <see cref="T:Nokia.Graphics.Imaging.LensBlurEffect" />.</para>
                <para>User input is required for segmentation in form of an AnnotationsSource image, that should contain pixels of at least three colors. 
Areas painted with ForegroundColor and BackgroundColor are classified as foreground and background areas, 
while pixels of all other colors are classified as undecided and will be segmented into either foreground or background.</para>
                <para>Segmentation is usually an iterative process, where the user keeps improving the AnnotationsSource image until she is happy with the result.</para>
            </summary>
            <remarks>
                <para>To avoid slow processing we strongly suggest the use of PreloadAsync. Much of the processing can be done ahead of time, 
as soon as the Source is ready and the first version of AnnotationsSource exist. 
Subsequent calls to Render will be much faster as long as the properties ForegroundColor, BackgroundColor and Quality don't change.</para>
                <para>Use of the Quality parameter is recommended. Changing quality of the effect affects time and memory consumption of the algorithm by adjusting the working size. 
The working size of the effect is dependent on the Source's size, so a lower Quality property might be necessary to avoid an OutOfMemoryException.</para>
                <para>It is possible that the annotations do not provide enough information for the segmentation to succeed. 
In this case an exception is thrown when the segmentation is being performed, either while rendering or during a preload operation.</para>
            </remarks>
        </member>
        <member name="M:ctsegmenterSuper_grabcut(CTSegmenterSuper*,CTBitmap*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)">
    @brief
    Performs segmentation of the image that the segmenter was created with 
    based on the grab cut approach.
    
    Use @ctsegmenter_prepare() to speed to up the first call.

    @param pSegmenter
    Segmenter object.
    
    @param pSelect
    A bitmap (CM_BGRA8888) scribbled to indicates foreground and background in the 
    image that the segmenter was created with.
    () @cscribbleFGValue indicates foreground pixels.
    () @cscribbleBGValue indicates background pixels.
    () @selectedValue    indicates the selected area in the grabcut sense.
    () Black indicates unclassified pixels.
    The dimensions of the bitmap must be the same as "previewDims" that the segmenter
    was created with.

    @param[in,out] pMask
    The mask (CM_GRAY8) resulting from the segmentation, foreground pixels are white 
    and background pixels are black.
    The dimensions of the bitmap must be the same as "previewDims" that the segmenter
    was created with.

    @param selectedValue The pixel value that should be considered as selected area.
   
    @param selectedValue Max number of grab cut iterations.

    @return CERR_OK on success.

</member>
        <member name="M:ctsegmenterSuper_fillupMask(CTSegmenterSuper*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Fill the cooresponding superpixels marked in mask

    @param pSegmenter
    Segmenter object.

    @param[in,out] pMask
    The mask (CM_GRAY8) resulting from the segmentation, foreground pixels are white 
    and background pixels are black.
    The dimensions of the bitmap must be the same as the image that the segmenter 
    was created with.

    @return CERR_OK on success.

</member>
        <member name="M:ctsegmenterSuper_getResultMask(CTSegmenterSuper*,CTBitmap*)">
    @brief
    Gets the resulting mask in full resolution (size that corresponds to the 
    image that the segmenter was created with).
    This operation may only be called after a succesful @c ctsegmenter_segment.

    @param pSegmenter
    Segmenter object.

    @param[in,out] pMask
    The mask (CM_GRAY8) resulting from the segmentation, foreground pixels are white 
    and background pixels are black.
    The dimensions of the bitmap must be the same as the image that the segmenter 
    was created with.

    @return CERR_OK on success.

</member>
        <member name="M:ctsegmenterSuper_segment(CTSegmenterSuper*,CTBitmap*,CTBitmap*)">
    @brief
    Performs segmentation of the image that the segmenter was created with 
    based on scribbles on foreground and background pixels.
    This operation may be called several times.
    
    Use @ctsegmenter_prepare() to speed to up the first call.
    Use @ctsegmenter_getResultMask() inorder to retrieve the full resolution
    mask after the final segmentation.

    @param pSegmenter
    Segmenter object.
    
    @param pScribble
    A bitmap (CM_BGRA8888) scribbled to indicates foreground and background in the 
    image that the segmenter was created with.
    () @cscribbleFGValue indicates foreground pixels.
    () @cscribbleBGValue indicates background pixels.
    () Black indicates unclassified pixels.
    The dimensions of the bitmap must be the same as "previewDims" that the segmenter
    was created with.

    @param[in,out] pMask
    The mask (CM_GRAY8) resulting from the segmentation, foreground pixels are white 
    and background pixels are black.
    The dimensions of the bitmap must be the same as "previewDims" that the segmenter
    was created with.

    @return CERR_OK on success.


</member>
        <member name="M:ctsegmenterSuper_prepare(CTSegmenterSuper*)">
    @brief
    Prepares a segmenter object inorder to speed up the first call to 
    @ctsegmenter_segment. Typically this operation is invoked on a seperate thread 
    at application start.

    @param pSegmenter
    Segmenter object.

    @return CERR_OK on success.


</member>
        <member name="M:ctsegmenterSuper_destroy(CTSegmenterSuper*)">
    @brief
    Destroys a segmenter object.

    @param pSegmenter
    Segmenter object to destrory.

</member>
        <member name="M:ctsegmenterSuper_create(CTBitmap*,CTSize,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSegmenterSuper**)">
    @brief
    Creates a segmenter object.

    @param pImage
    The image to segment, this is the image that the segmentation performed on.
    This size will decide performance/quality of the segmentation. 
    Supported color format is CM_BGRA8888.

    @param previewDims
    The dimension of the bitmap that gives the scribble input and preview 
    mask (typically size of scribble UI).
    
    @param scribbleFGValue
    Pixel value that indicates foreground scribbles.

    @param scribbleBGValue
    Pixel value that indicates background scribles.

    @param scribbleMask
    Mask that is and'ed with background/foreground value. 
    Example: The mask 0xffffff00 would ignore the alpha channel in the scribble bitmap.

    @param spResolution
    Number of super pixels.

    @param[out] ppSegmenter
    Created segmenter object.

    
    @return CERR_OK on success.


</member>
        <member name="T:CTSegmenterSuper">
@file ctsegmenter_super.h
@brief Defines the interface of @a CTSegmenterSuper
@ingroup ctsegmenter

    @addtogroup ctsegmenter
    @brief Creation of segmenter object.
    
    The CTSegmenterSuper API provides functionality for ...

    <h3>Usage</h3>
    -# Create a segmenter object for an image
    -# Prepare the object. This will perform a super pixel generation
    -# Segment the image by calling the segment function with one traing set for background
       one for forground. This step can be called several times.
    -# Get the full resolution mask
    -# Delete the segmentation object
    .
    
    @{

@brief Type representing a segmenter object

</member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.RenderAsync">
            <summary>
Renders the image source to the <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" />.
</summary>
            <returns>An asynchronous operation representing the rendering operation.</returns>
            <remarks>If the <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> property is unassigned, the result is returned in a new <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" />.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap">
            <summary>
The <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> that will be rendered to.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.OutputOption">
            <summary>
Controls how the image is rendered.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.Dispose">
            <summary>
Destructor for the renderer.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider,Windows.UI.Xaml.Media.Imaging.WriteableBitmap,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Creates and initializes a new <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> renderer with an image source and a target <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" />.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
            <param name="writeableBitmap">The <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> that will be rendered to.</param>
            <param name="outputOption">Controls how the image is rendered.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider,Windows.UI.Xaml.Media.Imaging.WriteableBitmap)">
            <summary>
Creates and initializes a new <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> renderer with an image source and a target <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" />.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
            <param name="writeableBitmap">The <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> that will be rendered to.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> renderer with an image source.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WriteableBitmapRenderer.#ctor">
            <summary>
Creates and initializes a new <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" /> renderer.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WriteableBitmapRenderer">
            <summary>
Renders an image source to a <see cref="P:Nokia.Graphics.Imaging.WriteableBitmapRenderer.WriteableBitmap" />.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorSwapFilter.SwapLuminance">
            <summary>
Controls if the luminance should be included in the color swap.
</summary>
            <remarks>
                <para>If SwapLuminance is set to false only the color components will be swapped,
not the luminance.</para>
                <para>If SwapLuminance is set to true the source color and the range specified
with ColorDistance will be transformed to the exact color specified with
SwapColor. Recommended value for best photo realistic results is to set
SwapLuminance to false.</para>
                <para>Default is false.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorSwapFilter.IsMonoColor">
            <summary>
Specifies if the other colors should be converted to grayscale or be preserved.
</summary>
            <remarks>
Default is false.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorSwapFilter.ColorDistance">
            <summary>
                <para>Specifies the tolerance level of the effect. </para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>If the color distance is
small, only a small variation around the color defined with SourceColor
will be converted to SwapColor. </para>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorSwapFilter.SwapColor">
            <summary>
Specifies which color SourceColor should be converted to.
</summary>
            <remarks>
                <para>The alpha-component is ignored.</para>
                <para>Default is (0, 0, 0).</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorSwapFilter.SourceColor">
            <summary>
Specifies the color that should be converted.
</summary>
            <remarks>
                <para>The alpha-component is ignored.</para>
                <para>Default is (0, 0, 0).</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorSwapFilter.#ctor(Windows.UI.Color,Windows.UI.Color,System.Double,System.Boolean,System.Boolean)">
            <summary>
Creates and initializes a new ColorSwapFilter with specified settings.
</summary>
            <param name="sourceColor">
Specifies the color that should be converted.
<para>The alpha-component is ignored.</para></param>
            <param name="swapColor">
Specifies which color sourceColor should be converted to.
<para>The alpha-component is ignored.</para></param>
            <param name="colorDistance">
Specifies the tolerance level of the effect. 
<para>Range [0.0, 1.0].</para></param>
            <param name="isMonoColor">
Specifies if the other colors should be converted to grayscale or be preserved.
</param>
            <param name="swapLuminance">
Controls if the luminance should be included in the color swap.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorSwapFilter.#ctor">
            <summary>
Creates and initializes a new ColorSwapFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorSwapFilter">
            <summary>
Adjusts the parameters of the Color-swap filter.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.CreateTestSample(Windows.Storage.Streams.IBuffer)">
            <summary>Used for internal testing only.</summary>
            <param name="buffer">Buffer used for internal testing.</param>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CameraPreviewImageSource.MediaCaptureDevice">
            <summary>Used for internal testing only.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CameraPreviewImageSource.AvailablePreviewVideoEncodingProperties">
            <summary>
Collection of  the supported video encoding properties e.g framerate,  subtype, width and height.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CameraPreviewImageSource.VideoDeviceController">
            <summary>
VideoDeviceController
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CameraPreviewImageSource.IsPreviewing">
            <summary>
Is in previewing state.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.StopPreviewAsync">
            <summary>
Stop preview
</summary>
            <returns>An async action, which completes when the stop preview is done.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.StartPreviewAsync(Windows.Media.MediaProperties.VideoEncodingProperties)">
            <summary>
Starts preview using the video encoding properties. Supported subtype is YUY2 and NV12
InitializeAsync must be called before StartPreview is called.
</summary>
            <param name="videoEncodingProperties">Sets the framerate and resolution the preview will be rendered. </param>
            <returns>An async action, which completes when the preview is running.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.StartPreviewAsync">
            <summary>
Starts preview using default settings.
InitializeAsync must be called before StartPreview is called.
</summary>
            <returns>An async action, which completes when the preview is running.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.InitializeAsync(System.String)">
            <summary>
Initializes the CameraPreviewImageSource object, using default settings.
</summary>
            <param name="preferedDeviceId">Name of the camera to use for preview.</param>
            <returns>An async action, which completes when the initialize is done.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.Dispose">
            <summary>
Destructor for the camera preview image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CameraPreviewImageSource.#ctor">
            <summary>
Creates and initializes a new camera preview image source.
</summary>
        </member>
        <member name="E:Nokia.Graphics.Imaging.CameraPreviewImageSource.PreviewFrameAvailable">
            <summary>
The event is fired everytime a new preview frame is available.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CameraPreviewImageSource">
            <summary>
An image source created from the camera stream.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.PreviewFrameAvailableDelegate">
            <summary>
Delegate used for new preview frame notifications.
</summary>
        </member>
        <member name="M:pixconv_MCU_YUV420ToARGB8888(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void!System.Runtime.CompilerServices.IsConst*)">
     Optimized YUV420 to ARGB8888 conversion function.

     @param    pSrc
     @param    pDst
     @param    scanlineWidth
     @param    pUserData

</member>
        <member name="M:pixconv_ditherYUV422RP_FS(CTBitmap*,CTRect,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Transform planar YUV422 rotated to RGB565 and dither using simplified Floyd-Steinberg 

    @param[in] pImageSrc Image channel 
    @param[in] rect position in output image where to copy image.
    @param[out] pImageDest Output image.
    @param[in/out] pDitheringBuffer temporal buffer should be reseted before first call.

</member>
        <member name="M:pixconv_ditherYUV444P_FS(CTBitmap*,CTRect,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Transform planar YUV444 to RGB565 and dither using simplified Floyd-Steinberg 

    @param[in] pImageSrc Image channel 
    @param[in] rect position in output image where to copy image.
    @param[out] pImageDest Output image.
    @param[in/out] pDitheringBuffer temporal buffer should be reseted before first call.

</member>
        <member name="M:pixconv_ditherYUV400P_FS(CTBitmap*,CTRect,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Transform planar YUV400 to RGB565 and dither using simplified Floyd-Steinberg 

    @param[in] pImageSrc Image channel 
    @param[in] rect position in output image where to copy image.
    @param[out] pImageDest Output image.
    @param[in/out] pDitheringBuffer temporal buffer should be reseted before first call.

</member>
        <member name="M:pixconv_ditherYUV422P_FS(CTBitmap*,CTRect,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Transform planar YUV422  to RGB565 and dither using simplified Floyd-Steinberg 

    @param[in] pImageSrc Image channel 
    @param[in] rect position in output image where to copy image.
    @param[out] pImageDest Output image. If offset (rect.x), scanline or data  result in
    an alignment that is not is a multiple of four that will lead
    to lower performance
    @param[in/out] pDitheringBuffer temporal buffer should be reseted before first call.

</member>
        <member name="M:pixconv_ditherYUV420P_FS(CTBitmap*,CTRect,CTImage*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
    @brief
    Transform planar YUV420 to RGB565 and dither using simplified Floyd-Steinberg 

    @param[in] pImageSrc Image channel 
    @param[in] rect position in output image where to copy image.
    @param[out] pImageDest Output image.If offset (rect.x), scanline or data  result in
    an alignment that is not is a multiple of four that will lead
    to lower performance
    @param[in/out] pDitheringBuffer temporal buffer should be reseted before first call.

</member>
        <member name="M:CopyFromCanvas_color16_ayuv4444_rev(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte*)">
Modified CopyFromCanvas for color16 -&gt; ayuv4444.
Each byte contains two pixels, which are arranged
| Byte 0 | Byte 1 | Byte 2 | ... |    byte N     | 
| p0  p1 | p2  p3 | p4  p5 | ... | p(2N) p(2N+1) | 

</member>
        <member name="M:CopyFromCanvas_color256_ayuv4444(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte*)">
CopyFromCanvas for color16 -&gt; ayuv4444.
Each byte contains two pixels, which are arranged
| Byte 0 | Byte 1 | Byte 2 | ... |    byte  N    | 
| p1  p0 | p3  p2 | p5  p4 | ... | p(2N+1) p(2N) | 

</member>
        <member name="M:CopyFromCanvas_rgbe8888_ayuv4444(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong)">
CopyFromCanvas from rgbe8888 -&gt; ayuv4444.
The image has 4 components but the extra component is not alpha data.
This function will copy the RGB data but skip the extra component.
The alpha data in the output image is set to default, i.e. no alpha.

</member>
        <member name="M:CopyFromCanvas_rgbe8888_argb8888(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong)">
CopyFromCanvas from rgbe8888 -&gt; argb8888.
The image has 4 components but the extra component is not alpha data.
This function will copy the RGB data but skip the extra component.
The alpha data in the output image is set to default, i.e. no alpha.

</member>
        <member name="M:CopyFromCanvas_color16_argb8888_rev(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,System.Int32!System.Runtime.CompilerServices.IsLong,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte*)">
Modified CopyFromCanvas for color16 -&gt; argb8888.
Each byte contains two pixels, which are arranged
| Byte 0 | Byte 1 | Byte 2 | ... |    byte N     | 
| p0  p1 | p2  p3 | p4  p5 | ... | p(2N) p(2N+1) | 

</member>
        <member name="M:CopyFromCanvas_color16_argb8888(System.Byte!System.Runtime.CompilerServices.IsConst*,System.Byte*,CTSize*,CTRect*,System.Byte,System.Int32!System.Runtime.CompilerServices.IsLong,System.Byte*)">
CopyFromCanvas for color16 -&gt; argb8888.
Each byte contains two pixels, which are arranged
| Byte 0 | Byte 1 | Byte 2 | ... |    byte N     | 
| p1  p0 | p3  p2 | p5  p4 | ... | p(2N+1) p(2N) | 

</member>
        <member name="M:pixconv_IRGBExpToBGRA8888(CTBitmap*,CTBitmap*,System.Single,System.Single,System.Single)">
    Converts from IRGB to BGRA and scales values according to exponential 
    tables for lens blur effect.
   
    IRGB, intensity channel plus color channels that are sub sampled by 2
    in all dimensions. 

</member>
        <member name="M:pixconv_BGRA8888ToIRGBExp(CTBitmap*,CTBitmap*,System.Single*,System.Single*,System.Single*,System.Single*)">
    Converts from BGRA to IRGB and scales values according to exponential 
    tables for lens blur effect.
   
    IRGB, intensity channel plus color channels that are sub sampled by 2
    in all dimensions. 


</member>
        <member name="P:Nokia.Graphics.Imaging.DelegatingFilter.WrapBorders">
            <summary>Whether to wrap the pixels along the borders of the image if BlockMargins are in use.</summary>
            <remarks>If set to true, neighboring pixels will be fetched from within the source image even at the border. Otherwise, black is used.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.DelegatingFilter.BlockMargins">
            <summary>The margins in terms of neighboring source pixels required when applying the filter to a target pixel.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingFilter.Dispose">
            <summary />
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingFilter.#ctor(Nokia.Graphics.Imaging.ICustomFilter)">
            <summary>
Creates and initializes a new delegating filter which will delegate to the provided <see cref="T:Nokia.Graphics.Imaging.ICustomFilter" />.
</summary>
            <param name="customFilter">An <see cref="T:Nokia.Graphics.Imaging.ICustomFilter" /> implementation.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DelegatingFilter">
            <summary>
Use with an implementation of <see cref="T:Nokia.Graphics.Imaging.ICustomFilter" /> to create a filter that can be used with the <see cref="T:Nokia.Graphics.Imaging.FilterEffect" />.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomFilter.ProcessBlock(Nokia.Graphics.Imaging.CustomFilterBlockParameters)">
            <summary>Called when a rectangular block in the image should be processed.</summary>
            <param name="blockParameters">Information about the block that should be processed.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomFilter.BeginProcessing(Nokia.Graphics.Imaging.ICustomFilterRequest)">
            <summary>Called when the processing of an image is about to begin.</summary>
            <param name="request">Information about the processing operation.</param>
            <returns>Acknowledgement in response, or null if the custom filter cannot perform the requested operation.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomFilter.PrepareAsync">
            <summary>Load/prepare for processing.</summary>
            <remarks>A <see cref="T:Nokia.Graphics.Imaging.DelegatingFilter" /> will call this to allow asynchronous loading and preparation work.</remarks>
            <returns>An async action representing the load operation, or null if none is required.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ICustomFilter">
            <summary>
A custom filter that can be used with a <see cref="T:Nokia.Graphics.Imaging.DelegatingFilter" /> to create a filter that can be used with the <see cref="T:Nokia.Graphics.Imaging.FilterEffect" />.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterResponse.TargetBuffer">
            <summary>The target buffer. Must have a capacity of at least <see cref="P:Nokia.Graphics.Imaging.ICustomFilterRequest.TargetBufferLength" /> bytes.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterResponse.SourceBuffer">
            <summary>The source buffer. Must have a capacity of at least <see cref="P:Nokia.Graphics.Imaging.ICustomFilterRequest.SourceBufferLength" /> bytes.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterResponse.ColorMode">
            <summary>The accepted color mode, either ColorMode::Ayuv4444 or ColorMode::Bgra8888.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ICustomFilterResponse">
            <summary>Response returned by a custom filter to match an <see cref="T:Nokia.Graphics.Imaging.ICustomFilterRequest" />.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterRequest.TargetBufferLength">
            <summary>The required length of the target buffer to return in the <see cref="T:Nokia.Graphics.Imaging.ICustomFilterResponse" />.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterRequest.SourceBufferLength">
            <summary>The required length of the source buffer to return in the <see cref="T:Nokia.Graphics.Imaging.ICustomFilterResponse" />.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ICustomFilterRequest.PreferredColorMode">
            <summary>The color mode preferred by the processing operation. This or an alternate color mode can be returned in the <see cref="T:Nokia.Graphics.Imaging.ICustomFilterResponse" />.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ICustomFilterRequest">
            <summary>Requests the custom filter to prepare for an upcoming image processing operation.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.Height">
            <summary>The height in pixels of the rectangle to process.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.Width">
            <summary>The width in pixels of the rectangle to process. Also the pitch of the target buffer.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.Y">
            <summary>The Y coordinate of the top-left pixel of the block within the entire image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.X">
            <summary>The X coordinate of the top-left pixel of the block within the entire image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.SourcePitch">
            <summary>The width in bytes of an entire row of source pixels, including the block margins.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.CustomFilterBlockParameters.SourceStartIndex">
            <summary>Byte index in the source buffer where the source rectangle starts.</summary>
            <remarks>This excludes the requested block margins. Instead it points to the source pixel corresponding to the top-left pixel of the target block.</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CustomFilterBlockParameters">
            <summary>
Specifies an image block to be processed by an <see cref="T:Nokia.Graphics.Imaging.ICustomFilter" />.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Margins.Bottom">
            <summary>The thickness of the bottom margin.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Margins.Right">
            <summary>The thickness of the right margin.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Margins.Top">
            <summary>The thickness of the top margin.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Margins.Left">
            <summary>The thickness of the left margin.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Margins">
            <summary>The margins on each side of a rectangular object.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.DespeckleFilter.DespeckleLevel">
            <summary>
Despeckle level. 
<remarks>
Default is DespeckleLevel::Minimum.
</remarks></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DespeckleFilter.#ctor(Nokia.Graphics.Imaging.DespeckleLevel)">
            <summary>
Creates and initializes a new DespeckleFilter with a specified level.
</summary>
            <param name="despeckleLevel">
The despeckle level.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DespeckleFilter.#ctor">
            <summary>
Creates and initializes a new DespeckleFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DespeckleFilter">
            <summary>
Applies a despeckle effect, removing noise from the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DespeckleLevel">
            <summary>
The amount of despeckling done by the despeckle filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.DespeckleLevel.Maximum">
            <summary>Maximum</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.DespeckleLevel.High">
            <summary>High</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.DespeckleLevel.Low">
            <summary>Low</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.DespeckleLevel.Minimum">
            <summary>Minimum</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SketchFilter.SketchMode">
            <summary>
Sketch mode, grey or color.
</summary>
            <remarks>
                <para>Default is SketchMode::Gray</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SketchFilter.#ctor(Nokia.Graphics.Imaging.SketchMode)">
            <summary>
Creates and initializes a new SketchFilter with a specified mode.
</summary>
            <param name="sketchMode">
The sketch mode.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SketchFilter.#ctor">
            <summary>
Creates and initializes a new SketchFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SketchFilter">
            <summary>
Produces the look of a sketched image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SketchMode">
            <summary>
Modes for the sketch filter. 
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.SketchMode.Color">
            <summary>Sketch in color.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.SketchMode.Gray">
            <summary>Sketch in grayscale.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageProviderInfo.ImageSize">
            <summary>
Size of the image provided, in pixels.
</summary>
            <remarks>
Default is (0,0).
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageProviderInfo.#ctor">
            <summary>
Creates and initializes a new ImageProviderInfo object with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ImageProviderInfo">
            <summary>
Information about an IImageProvider.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.FoundationFilter.Region">
            <summary>
The region in which the effect is applied, for instance a face.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
            <remarks>
If a region with zero width or height is specified, the effect will be applied to the whole image.
<para>Default is a region with zero width and height</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FoundationFilter.#ctor(Windows.Foundation.Rect)">
            <summary>
Creates and initializes a new FoundationFilter that will be applied to a specific region in the image.
</summary>
            <param name="region">
The region in which the effect is applied, for instance a face.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para><para>If a region with zero width or height is specified, the effect will be applied to the whole image.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FoundationFilter.#ctor">
            <summary>
Creates and initializes a new FoundationFilter that will be applied to the whole image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FoundationFilter">
            <summary>
Applies a foundation effect on a specified region of the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlurRegionShape">
            <summary>
Describes how the blur region is interpreted by the blur filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlurRegionShape.Elliptical">
            <summary>The region is an ellipse fitted into a rectangle.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlurRegionShape.Rectangular">
            <summary>The region is a rectangle.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.FlipFilter.FlipMode">
            <summary>
Flip mode, around horizontal, vertical or both axes.
</summary>
            <remarks>
Default is Flipmode::None
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FlipFilter.#ctor(Nokia.Graphics.Imaging.FlipMode)">
            <summary>
Creates and initializes a new FlipFilter with a specified flip mode.
</summary>
            <param name="flipMode">
The flip mode.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FlipFilter.#ctor">
            <summary>
Creates and initializes a new FlipFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FlipFilter">
            <summary>
Flips the image horizontally and/or vertically.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FlipMode">
            <summary>
Flip modes employed by the flip filter. An image can be flipped around its horizontal or vertical
axis as well as around both axes at once.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Both">
            <summary>Flip the image vertically and horizontally</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Horizontal">
            <summary>Flip the image horizontally</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.Vertical">
            <summary>Flip the image vertically</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.FlipMode.None">
            <summary>Do not flip the image</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IBufferProvider.GetAsync">
            <summary>Get the <see cref="T:Windows.Storage.Streams.IBuffer" />.</summary>
            <returns>An async operation resulting in the <see cref="T:Windows.Storage.Streams.IBuffer" />.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IBufferProvider">
            <summary>
Represents an object that can provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> asynchronously.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferProviderImageSource.Invalidate">
            <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BufferProviderImageSource.ImageFormat">
            <summary>
The format of the compressed image data.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferProviderImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferProviderImageSource.#ctor(Nokia.Graphics.Imaging.IBufferProvider)">
            <summary>
Creates and initializes a new image source from an asynchronous buffer provider.
</summary>
            <param name="bufferProvider">
An <see cref="T:Nokia.Graphics.Imaging.IBufferProvider" /> that will provide a buffer containing the compressed image data.
</param>
            <remarks>
An attempt will be made to 
automatically detect the image format. If the image data is not corrupt the 
source should be able to detect JPEG, GIF, PNG, TIFF, BMP, WBMP. If the 
image format cannot be determined an exception will be thrown.
For optimal performance, or if the image format cannot be determined, use the constructor 
that allows setting the image format explicitly.
<para>If the asynchronous operation fails, the image source will fail to load (when PreloadAsync is called or when it is used in rendering).</para></remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BufferProviderImageSource">
            <summary>
An image source created from a provider of a compressed image buffer.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HdrEffect.NoiseSuppression">
            <summary>
                <para>Controls supression of noise amplification, value should rise with
the noisiness of the input image combined with the strength applied.
Recommended value is between 0.1 and 0.3.</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.5
High values will result in loss of fine details. Combining a low value and high strength may result in noisy images.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HdrEffect.Gamma">
            <summary>
                <para>Controls global contrast enhancement using a power law. 
Values lower than 1.0 makes the image more white and values above 1.0 makes it more black.
Recommended range is between 0.6 and 1.0.</para>
                <para>Gamma must be &gt; 0.</para>
            </summary>
            <remarks>
                <para>Default is 1.0</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HdrEffect.Saturation">
            <summary>
                <para>Controls color saturation using a power law.
Values lower than 1.0 will decrease the saturation, and values above 1.0 will increase the saturation of the image.
Recommended range is between 0.4 and 0.8.</para>
                <para>Saturation must be &gt; 0.</para>
            </summary>
            <remarks>
                <para>Default is 0.75</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HdrEffect.Strength">
            <summary>
                <para>Controls strength of local contrast enhancement.
The higher the value, the stronger effect.
Recommended range is between 0.1 and 0.30.
Having a high value may result in dark noisy images.</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.35</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.HdrEffect.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.HdrEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new HDR effect that uses the provided image source.
</summary>
            <param name="imageSource">An image source for the effect.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.HdrEffect.#ctor">
            <summary>
Creates and initializes a new HDR effect.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.HdrEffect">
            <summary>
Applies local tone mapping to a single image to achieve an HDR-like effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.DelegatingEffect.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.ICustomEffect)">
            <summary>
Creates and initializes a new DelegatingEffect that uses the provided image source and will delegate to the provided <see cref="T:Nokia.Graphics.Imaging.ICustomEffect" />.
</summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="customEffect">An <see cref="T:Nokia.Graphics.Imaging.ICustomEffect" /> implementation.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingEffect.#ctor(Nokia.Graphics.Imaging.ICustomEffect)">
            <summary>
Creates and initializes a new DelegatingEffect which will delegate to the provided <see cref="T:Nokia.Graphics.Imaging.ICustomEffect" />.
</summary>
            <param name="customEffect">An <see cref="T:Nokia.Graphics.Imaging.ICustomEffect" /> implementation.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DelegatingEffect">
            <summary>
Use with an implementation of <see cref="T:Nokia.Graphics.Imaging.ICustomEffect" /> to create an effect that can be used in the rendering pipeline.
</summary>
            <remarks>
This class is primarily provided for implementing your own effect using native C++. For managed code (C#, VB), it is simpler to subclass the helper class CustomEffectBase.
<para>Members of this class are not guaranteed to be thread safe.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomEffect.Process(Windows.Foundation.Rect)">
            <summary>Called when the image should be processed.</summary>
            <param name="rect">The part of the image to process.</param>
            <remarks>
A <see cref="T:Nokia.Graphics.Imaging.DelegatingEffect" /> will call this during rendering.
<para>The implementation is expected to read and write from and to the buffers returned by the latest calls to ProvideSourceBuffer and ProvideTargetBuffer.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomEffect.ProvideTargetBuffer(Windows.Foundation.Size)">
            <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
            <param name="imageSize">The size of the image.</param>
            <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
            <remarks>
A <see cref="T:Nokia.Graphics.Imaging.DelegatingEffect" /> will call this before rendering if the size has changed since the last call.
<para>After the next call to Process, this buffer is expected to contain the processed target pixels.</para><para>The buffer returned may be the same as the source buffer. This allows the effect to edit pixels "in place".</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomEffect.ProvideSourceBuffer(Windows.Foundation.Size)">
            <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
            <param name="imageSize">The size of the image.</param>
            <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
            <remarks>
A <see cref="T:Nokia.Graphics.Imaging.DelegatingEffect" /> will call this before rendering if the size has changed since the last call.
<para>This buffer will be filled with source pixels for the next call to Process.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomEffect.LoadAsync">
            <summary>Load/prepare for rendering.</summary>
            <remarks>A <see cref="T:Nokia.Graphics.Imaging.DelegatingEffect" /> will call this to allow asynchronous loading and preparation work.</remarks>
            <returns>An async action representing the load operation.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ICustomEffect">
            <summary>
A custom effect that can be used with a <see cref="T:Nokia.Graphics.Imaging.DelegatingEffect" />.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.TargetOutputOption">
            <summary>
Controls how the foreground is fitted into the target area.
<para> If set to <see cref="F:Nokia.Graphics.Imaging.OutputOption.Stretch" />, the foreground image will be resized to fit the target area exactly. 
If set to <see cref="F:Nokia.Graphics.Imaging.OutputOption.PreserveAspectRatio" />, the foreground image will be blended into the target area centered and with the original aspect ratio intact. 
If set to <see cref="F:Nokia.Graphics.Imaging.OutputOption.PreserveSize" />, the size portion of the target area will be ignored, and the foregound image will be blended in its original size.</para></summary>
            <remarks>
Default is <see cref="F:Nokia.Graphics.Imaging.OutputOption.Stretch" />.
<para>If the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.TargetArea" /> has not been set, or doesn't have a positive width and height, this property will be ignored.</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.TargetAreaRotation">
            <summary>
The angle of counter clockwise rotation of <see cref="P:Nokia.Graphics.Imaging.BlendFilter.TargetArea" /> around its center, in degrees.
<para>If the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.TargetArea" /> has not been set, or doesn't have a positive width and height, this property will be ignored.</para></summary>
            <remarks>
Default is 0.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.TargetArea">
            <summary>
A target area within the background image into which the foreground is image blended. Expressed in the unit coordinate space of the background image, 
i.e., the top left corner of the background image is at (0, 0), and the bottom right corner is at (1, 1).
<para><see cref="P:Nokia.Graphics.Imaging.BlendFilter.TargetOutputOption" /> controls how the foreground is fitted into the target area. By default, the foreground image is stretched to fit the target area.</para><para>If value equals Windows::Foundation::Rect::Empty, or either Width or Height is smaller than or equal to zero, 
the foreground will be stretched over whole background and aspect ratio will not be preserved.</para></summary>
            <remarks>
Default is Windows::Foundation::Rect::Empty.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.BlendFunction">
            <summary>
Blend function to use when blending the two images.
</summary>
            <remarks>
Default is blend function normal.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.Level">
            <summary>
The factor of interpolation between the result of the blend operation and the original image.
<para>Range [0.0, 1.0], where 0.0 gives a result identical to the source image and 1.0 means the result of the blend operation is fully visible.</para></summary>
            <remarks>
This value is multiplied with the alpha of the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.ForegroundSource" /> (if <see cref="P:Nokia.Graphics.Imaging.BlendFilter.MaskSource" /> is null) or with the "gray" value from the MaskSource if it exists.
<para>Default is 1.0.</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.MaskSource">
            <summary>
An optional mask image that determines per-pixel how much of the result of the blend operation is visible in the final result. If set to null, the alpha channel of the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.ForegroundSource" /> is used instead.
</summary>
            <remarks>
When this property is set to a non-null value, the alpha channel of the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.ForegroundSource" /> is ignored and the red channel of the mask image is used instead.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BlendFilter.ForegroundSource">
            <summary>
The foreground image that will be blended onto the background image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.Dispose">
            <summary>
Destructor for the filter.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.BlendFunction,System.Double)">
            <summary>
Creates and initializes a new BlendFilter with an image source, a mask, a blend function, and a level.
</summary>
            <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
            <param name="maskSource">
A mask image that determines how the <see cref="P:Nokia.Graphics.Imaging.BlendFilter.ForegroundSource" /> image is blended onto the background image.
</param>
            <param name="blendFunction">
Blend function to use when blending the two images.
</param>
            <param name="level">
Amount that the blend operation will affect the final result.
<para>Range [0, 1], where 0 implies no effect and 1 means full effect.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.BlendFunction,System.Double)">
            <summary>
Creates and initializes a new BlendFilter with an image source, a blend function, and a level.
</summary>
            <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
            <param name="blendFunction">
Blend function to use when blending the two images.
</param>
            <param name="level">
Amount that the blend operation will affect the final result.
<para>Range [0, 1], where 0 implies no effect and 1 means full effect.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.BlendFunction)">
            <summary>
Creates and initializes a new BlendFilter with an image source and a blend function.
</summary>
            <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
            <param name="blendFunction">
Blend function to use when blending the two images.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new BlendFilter with an image source.
</summary>
            <param name="foregroundSource">
The foreground image source that will be blended onto the filter effect's image.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BlendFilter.#ctor">
            <summary>
Creates and initializes a new BlendFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlendFilter">
            <summary>
Blends an image source onto the image using a blend function.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BlendFunction">
            <summary>
The blend function to use with the blend filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Difference">
            <summary>Blend mode difference</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Exclusion">
            <summary>Blend mode exclusion</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Hue">
            <summary>Blend mode hue</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Lighten">
            <summary>Blend mode lighten</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Darken">
            <summary>Blend mode darken</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Hardlight">
            <summary>Blend mode hard light</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Screen">
            <summary>Blend mode screen</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Softlight">
            <summary>Blend mode soft light</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Overlay">
            <summary>Blend mode overlay</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Colordodge">
            <summary>Blend mode color dodge</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Colorburn">
            <summary>Blend mode color burn</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Color">
            <summary>Blend mode color</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Add">
            <summary>Blend mode add</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Multiply">
            <summary>Blend mode multiply</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.BlendFunction.Normal">
            <summary>Blend mode normal</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageFusionFilter.InvertAlpha">
            <summary>
Controls how the alpha channel fades the fusion image.
</summary>
            <remarks>
If this is false, 0 - 255 is fading from the image to the frame provided.
If this is true,  0 - 255 is fading from the provided frame to image.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageFusionFilter.MaskImageSource">
            <summary>
A raw image containing the alpha mask. 
</summary>
            <remarks>
                <para>The mask is assumed to be a gray scale image. If the image is 
of a richer color format it will first automatically be converted into grayscale and any alpha channel 
will be ignored.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ImageFusionFilter.FusionImageSource">
            <summary>
An image to be merged with the current image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageFusionFilter.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.IImageProvider,System.Boolean)">
            <summary>
Creates and initializes a new ImageFusionFilter with specified sources and settings.
</summary>
            <param name="fusionImageSource">
Source for the image to be merged with the current image.
</param>
            <param name="maskImageSource">
Source for the image containing the alpha mask. 
<para>The mask is assumed to be a gray scale image. If the image is 
of a richer color format it will first automatically be converted into grayscale and any alpha channel 
will be ignored.</para></param>
            <param name="invertAlpha">
The invert alpha.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ImageFusionFilter.#ctor">
            <summary>
Creates and initializes a new ImageFusionFilter with default settings.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ImageFusionFilter">
            <summary>
Inserts an image on the current image with a separately defined alpha mask.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorBoostFilter.Gain">
            <summary>
                <para>The color boost gain level.</para>
                <para>Range [-1.0, 20.0]. Negative values reduce the colors.</para>
            </summary>
            <remarks>
                <para>Recommended values are in the range [-1.0, 1.0].</para>
                <para>Default value is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorBoostFilter.#ctor(System.Double)">
            <summary>
Creates a new ColorBoostFilter with the specified gain level.
</summary>
            <param name="gain">
The color boost gain level.
<para>Range [-1.0, 20.0]. Negative values reduce the colors.</para><para>Recommended values are in the range [-1.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorBoostFilter.#ctor">
            <summary>
Creates and initializes a new ColorBoostFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorBoostFilter">
            <summary>
Amplifies the colors of the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AlignedImageSource.Dispose">
            <summary />
        </member>
        <member name="T:Nokia.Graphics.Imaging.AlignedImageSource">
            <summary>
An image source created by aligning a set of images using an <see cref="T:Nokia.Graphics.Imaging.ImageAligner" />.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorAdjustFilter.Blue">
            <summary>
                <para>Blue channel adjustment.</para>
                <para>Range [-1.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorAdjustFilter.Green">
            <summary>
                <para>Green channel adjustment.</para>
                <para>Range [-1.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorAdjustFilter.Red">
            <summary>
                <para>Red channel adjustment.</para>
                <para>Range [-1.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorAdjustFilter.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Creates and initializes a new ColorAdjustFilter with specified channel adjustment values.
</summary>
            <param name="red">
Red channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
            <param name="green">
Green channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
            <param name="blue">
Blue channel adjustment.
<para>Range [-1.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorAdjustFilter.#ctor">
            <summary>
Creates and initializes a new ColorAdjustFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorAdjustFilter">
            <summary>
Adjusts the RGB color composition of the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsSharpnessLevel_Convert(System.Int32,CAPS_SHARPNESS_LEVEL*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
            <summary>
Conversion function for integer range describing the sharpness levels for the sharpness filter.
Creates two functions:
    CAPS_SHARPNESS_LEVEL toCapsSharpnessLevel(int value);
    int fromCapsSharpnessLevel(CAPS_SHARPNESS_LEVEL  value);
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SharpnessFilter.Level">
            <summary>
                <para>Image sharpness level.</para>
                <para>Range [0, 7].</para>
            </summary>
            <remarks>
                <para>Default is 4</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SharpnessFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new SharpnessFilter with a specified level.
</summary>
            <param name="level">
Image sharpness level.
<para>Range [0, 7].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SharpnessFilter.#ctor">
            <summary>
Creates and initializes a new SharpnessFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SharpnessFilter">
            <summary>
Enhances the sharpness of the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingImageSource.Invalidate">
            <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DelegatingImageSource.#ctor(Windows.Foundation.Size,Nokia.Graphics.Imaging.ICustomImageSource)">
            <summary>
Create and initialize a DelegatingImageSource which will be coupled to the specified ICustomImageSource.
</summary>
            <param name="size">The size of the image.</param>
            <param name="customImageSource">An <see cref="T:Nokia.Graphics.Imaging.ICustomImageSource" /> implementation.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DelegatingImageSource">
            <summary>
An <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> that couples to a user implementation of <see cref="T:Nokia.Graphics.Imaging.ICustomImageSource" /> object, which can provide an image and manage any buffers needed.
</summary>
            <remarks>
Members of this class are not guaranteed to be thread safe.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomImageSource.Process(Windows.Foundation.Rect)">
            <summary>Called when the image should be generated.</summary>
            <param name="rect">The part of the image to generate.</param>
            <remarks>
A <see cref="T:Nokia.Graphics.Imaging.DelegatingImageSource" /> will call this during rendering.
<para>The implementation is expected to write to the buffer returned by the latest call to ProvideBuffer.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomImageSource.ProvideBuffer(Windows.Foundation.Size)">
            <summary>Provide an <see cref="T:Windows.Storage.Streams.IBuffer" /> sufficiently sized to hold an image of the specified size.</summary>
            <param name="imageSize">The size of the image.</param>
            <returns>An <see cref="T:Windows.Storage.Streams.IBuffer" /> of length 4 * imageSize.Width * imageSize.Height bytes.</returns>
            <remarks>
A <see cref="T:Nokia.Graphics.Imaging.DelegatingImageSource" /> will call this before rendering if the size has changed since the last call.
<para>After the next call to Process, this buffer is expected to contain the image pixels.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ICustomImageSource.LoadAsync">
            <summary>Load/prepare for rendering.</summary>
            <remarks>A <see cref="T:Nokia.Graphics.Imaging.DelegatingImageSource" /> will call this to allow asynchronous loading and preparation work.</remarks>
            <returns>An async action representing the load operation.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ICustomImageSource">
            <summary>
A custom image source that can be used with a <see cref="T:Nokia.Graphics.Imaging.DelegatingImageSource" />.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneFilter.SplitToneRanges">
            <summary>
List of SplitToneRanges.
<remarks>
Any number of ranges can be provided. Overlaps and gaps between ranges will be handled by interpolating between known values.
</remarks></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SplitToneFilter.#ctor(Windows.Foundation.Collections.IVector`1{Nokia.Graphics.Imaging.SplitToneRange^})">
            <summary>
Creates and initializes a new SplitToneFilter with a list of split tone ranges.
</summary>
            <param name="splitToneRanges">
List of SplitToneRanges.
<para>Any number of ranges can be provided. Overlaps and gaps between ranges will be handled by interpolating between known values.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SplitToneFilter.#ctor">
            <summary>
Creates and initializes a new SplitToneFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SplitToneFilter">
            <summary>
Applies a given color to pixels with luminance values within a specified range, while retaining some luminance information.
</summary>
            <remarks>
                <para>Several different intervals may be specified, each with a different color associated to it.</para>
                <para>Typical usage would be to define a shadow luminance range, and a highlight luminance
range, with different colors applied to each range.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.Color">
            <summary>
The RGB color to be set for the luminance.
Range [0, 255], for each color component.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.LuminanceHigh">
            <summary>
                <para>The higher luminance value.</para>
                <para>Range [0, 255]. Must be higher than LuminanceLow.</para>
            </summary>
            <remarks>
Default value is 255.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SplitToneRange.LuminanceLow">
            <summary>
                <para>The lower luminance value.</para>
                <para>Range [0, 255]. Must be lower than LuminanceHigh.</para>
            </summary>
            <remarks>
Default value is 0.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SplitToneRange.#ctor(System.Byte,System.Byte,Windows.UI.Color)">
            <summary>
Creates and initializes a new SplitToneRange with specified luminance and color values.
</summary>
            <param name="luminanceLow">
Defines the lower luminance value.
Range [0, 255]. Must be lower than LuminanceHigh.
</param>
            <param name="luminanceHigh">
Defines the higher luminance value.
Range [0, 255]. Must be higher than LuminanceLow.
</param>
            <param name="color">
Defines the RGB color to be set for the luminance.
Range [0, 255].
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SplitToneRange.#ctor">
            <summary>
Creates and initializes a new SplitToneRange with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SplitToneRange">
            <summary>
Defines a luminance range and the color to be applied by the split tone filter.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ContrastFilter.Level">
            <summary>
                <para>Contrast level. </para>
                <para>Range [-1.0, 1.0], where values below zero decrease the contrast and above zero increase it.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ContrastFilter.#ctor(System.Double)">
            <summary>
Creates and initializes a new ContrastFilter with a contrast level.
</summary>
            <param name="contrastLevel">
The contrast level.
<para>Range [-1.0, 1.0], where values below zero decrease contrast and above zero increase it.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ContrastFilter.#ctor">
            <summary>
Creates and initializes a new ContrastFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ContrastFilter">
            <summary>
Adjusts the contrast in the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RandomAccessStreamImageSource.ImageFormat">
            <summary>
The format of the compressed image data.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RandomAccessStreamImageSource.Stream">
            <summary>
The random access stream containing compressed image data.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RandomAccessStreamImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RandomAccessStreamImageSource.#ctor(Windows.Storage.Streams.IRandomAccessStream,Nokia.Graphics.Imaging.ImageFormat)">
            <summary>
Creates and initializes a new image source with a windows storage random access stream with a known image format.
</summary>
            <param name="stream">The random access stream to create the image source with.</param>
            <param name="imageFormat">The image format of the image in the provided stream.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RandomAccessStreamImageSource.#ctor(Windows.Storage.Streams.IRandomAccessStream)">
            <summary>
Creates and initializes a new image source with a <see cref="T:Windows.Storage.Streams.IRandomAccessStream" />.
</summary>
            <param name="stream">The random access stream to create the image source with.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RandomAccessStreamImageSource">
            <summary>
An image source created from a windows storage random access stream.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.NoiseFilter.Level">
            <summary>
The amount of noise. Default is NoiseLevel::Minimum.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.NoiseFilter.#ctor(Nokia.Graphics.Imaging.NoiseLevel)">
            <summary>
Creates and initializes a new NoiseFilter with a specified level.
</summary>
            <param name="level">
The amount of noise.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.NoiseFilter.#ctor">
            <summary>
Creates and initializes a new NoiseFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.NoiseFilter">
            <summary>
Applies noise to the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.NoiseLevel">
            <summary>
The amount of noise added by the noise filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.NoiseLevel.Maximum">
            <summary>Maximum</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.NoiseLevel.Medium">
            <summary>Medium</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.NoiseLevel.Minimum">
            <summary>Minimum</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SepiaFilter.#ctor">
            <summary>
Creates and initializes a new SepiaFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SepiaFilter">
            <summary>
Applies a sepia tone to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurEffect.Quality">
            <summary>
                <para>Quality of the result.</para>
                <para>Changing quality of the effect affects time and memory consumption of the effect by adjusting the working size. The working size of the effect is dependent on the Source's size, so a lower Quality value might be necessary to avoid an OutOfMemoryException.</para>
                <para>Range [0.0, 1.0]. Default value is 1.</para>
            </summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurEffect.BlendKernelWidth">
            <summary>
                <para>The width of the band between out of focus areas blurred with different kernels that gets blended, thus providing a smooth transition.</para>
                <para>Range [0, 255].</para>
            </summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurEffect.Kernels">
            <summary>
                <para>Kernels used to blur the out of focus areas of the source image.</para>
            </summary>
            <remarks>
                <para>The value must not be null and most contain at least one kernel.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurEffect.KernelMap">
            <summary>
                <para>An image source representing a kernel map, specifying which kernel should be used on each pixel.</para>
                <para>Each pixel either gets blurred with one of the kernels, or is not blurred and considered to be a part of the focus area.</para>
                <para>Kernels are referenced via zero-based indices, e.g. the area that is to be blurred with the first kernel should be referred to by 0, the second kernel by the value of 1 and so forth.
Pixels in the focus area should be marked with the value 255.</para>
            </summary>
            <remarks>
                <para>Note: If the mask contains an index that is not present in the Kernels collection it will be considered as a part of the focus area.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurEffect.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.IImageProvider,Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.ILensBlurKernel^})">
            <summary>
                <para>Creates and initializes a new LensBlurEffect with the specified settings and a kernelMap.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
            <param name="kernels">Kernels that will be used to blur the out of focus areas of the image.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.ILensBlurKernel)">
            <summary>
                <para>Creates and initializes a new LensBlurEffect with the specified settings and a kernelMap.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
            <param name="kernel">A kernel that will be used to blur the out of focus areas of the image.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.ILensBlurKernel)">
            <summary>
                <para>Creates and initializes a new LensBlurEffect with the specified settings and a kernelMap.</para>
            </summary>
            <param name="imageSource">An image source for the effect.</param>
            <param name="kernel">A kernel that will be used to blur the whole image.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
                <para>Creates and initializes a new LensBlurEffect with the specified kernel map and default values.</para>
            </summary>
            <param name="imageSource">An image source to which the effect will be applied.</param>
            <param name="kernelMap">An image source representing a kernel map, specifying which kernel should be used on each pixel.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
                <para>Creates and initializes a new LensBlurEffect with default values.</para>
            </summary>
            <param name="imageSource">An image source to which the effect will be applied.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LensBlurEffect">
            <summary>
                <para>Applies blur to an image in a way similar to how out-of-focus areas are rendered by a lens, an effect also known as bokeh.</para>
            </summary>
            <remarks>
                <para>This is a memory expensive effect. Avoid applying it to the full resolution image, especially on low end devices. 
The Quality parameter can be used to control the working size of the effect and thus the resource consumption.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurPredefinedKernel.Size">
            <summary>
The length of a side of the square of the kernel used.
Range [1, 255].
</summary>
            <remarks>
If the size of the kernel is very small, less than 10, then the shape of the kernel will be ignored and a simple circular kernel will be used instead.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurPredefinedKernel.LensBlurPredefinedKernelShape">
            <summary>
Predefined kernel shape used for blurring by LensBlurEffect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurPredefinedKernel.PointLightStrength">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurPredefinedKernel.#ctor(Nokia.Graphics.Imaging.LensBlurPredefinedKernelShape,System.UInt32)">
            <summary>
Creates and initializes a new LensBlurPredefinedKernel with a predefined shape and a size.
</summary>
            <param name="shape">An predefined shape for the kernel.</param>
            <param name="size">A size of the kernel used.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LensBlurPredefinedKernel">
            <summary>
Defines a predefined kernel shape used for blurring by LensBlurEffect.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LensBlurPredefinedKernelShape">
            <summary>
Predefined shapes for LensBlurEffect.
</summary>
        </member>
        <member name="M:ctbokeh_createDisc2(System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single,CTBitmap**)">
    @brief
    Creates a weighted disc using a gaussian function.

    @param r
    Radius of disc must be greater than 0 and max 1024.

    @param sigma
    Standard deviation, controls how quick the falloff towards zero shall be.

    @return CERR_OK on success.

</member>
        <member name="M:ctbokeh_createDisc(System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap**)">
    @brief
    Creates a a bitmap (CM_GRAY8) and renders a circular shape to it. This can be 
    used as blur kernel.

    @param r
    Radius of disc must be greater than 0 and max 1024.

    @param ppBitmap
    Created bitmap.

    @return CERR_OK on success.

</member>
        <member name="M:ctbokeh_reapplyFocusArea(CTBitmap*,CTBitmap*,System.Int32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Applies the focus area after a blur have been performed.

    @param pFocusBitmap
    Image with the unaltered focus area (foreground) i.e. original image.
    
    @param pAlphaMask
    Alpha Mask that is used to blend pFocusMap into pBluredBitmap.
    
    @param numPixelsToBlur
    Number of pixels for the blur band around the focus area. The purpose of this
    is to make a more natural transition between unfocused area and focused area.
    
    Note 1: The blurred area also extends inside the mask to give a smooth transition
    from the bokeh-effect area to the mask area. 
    Note 2: The magnitude of the numPixelsToBlur compared to minimum size of mask features.

    @param[in,out] pBluredBitmap
    Image that have been blured (background). This bitmap must have the 
    same dimensions as pFocusMask.

    @return CERR_OK on success.

</member>
        <member name="M:ctbokeh_blurEx(CTBitmap**,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*,CTBitmap*)">
    @brief
    Blurs a bitmap with 1 or more kernels.

    Note: The area defined by the focus mask is just prepared, to get the final
    result use ctbokeh_reapplyFocusArea.

    @param pKernelRadiuses
    Array of kernels to use, bitmap dimension must specify a square.
    Note: The kernels must be ordered by increasing size, consecutive kernels
          of same size is allowed.
    
    @param pKernelModels
    The light model to be used for each kernel.
    Should be in the inclusive range 1-10, higher value increses the
    energy of point light thuse giving more visible discs.

    @param pKernelBlendWidth
    The width of the extra area to use for blending with surrounding area for the 
    kernel.

    @param numKernels
    Number of elements in pKernelRadiuses.
    
    @param pKernelMap
    A bitmap where the number of each pixels decides what kernel, light model and
    blend area to to use. 
    - For the focus area use kernel id of 255 (this area is treated specially inorder to give
      sharp edges around the focus area.
    - To not have any blur at all and no special focus area use kernel id 0 and set its kernel to 0.
    
    
    @param[in,out] pBitmap
    Image to apply the bokeh effect to. 
     - This bitmap must have the same dimensions as pKernelMap. 
     - The size of the bitmap must be greater or equal to 128 in both dimensions.
     - The dimensions must be atleast twice the size of the max kernel dimension.

    @return CERR_OK on success.


</member>
        <member name="M:ctbokeh_blur(System.UInt32!System.Runtime.CompilerServices.IsLong*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTBitmap*)">
    @brief
    Blurs a bitmap with 1 or more kernels.

    Note: The area defined by the focus mask is just prepared, to get the final
    result use ctbokeh_reapplyFocusArea.

    @param pKernelRadiuses
    Array of disc radiuses for blur kernels.
    Note: The blur kernels must be ordered by increasing radius.
    
    @param pKernelModels
    The light model to be used for each kernel.

    @param numKernels
    Number of elements in pKernelRadiuses.
    
    @param pKernelMap
    A bitmap where the number of each pixels decides what kernel to 
    blur with. If an area should not be blured (i.e. the focus area)
    assign a blur kernel id of 255.
    
    @param model
    Should be in the inclusive range 1-10, higher value increses the
    energy of point light thuse giving more visible discs.
    
    @param[in,out] pBitmap
    Image to apply the bokeh effect to. This bitmap must have the same 
    dimensions as pKernelMap. The size of the bitmap must be greater or equal
    to 128 in both dimensions.

    @return CERR_OK on success.


</member>
        <member name="D:CTbokehLightModel">
@brief
Light model to use for controlling the strengt of 
point light.

</member>
        <member name="P:Nokia.Graphics.Imaging.PaintFilter.Level">
            <summary>
                <para>Paint effect level. </para>
                <para>Range [1, 4].</para>
            </summary>
            <remarks>
                <para>Default is 1</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.PaintFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new PaintFilter with the specified level.
</summary>
            <param name="level">
Paint effect level. 
<para>Range [1, 4].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.PaintFilter.#ctor">
            <summary>
Creates and initializes a new PaintFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.PaintFilter">
            <summary>
Applies a painting-like effect to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WhiteBalanceFilter.SourceWhitePoint">
            <summary>
The source white point reference color.
</summary>
            <remarks>
Ignored, unless mode is set to Manual.
<para>Default is RGB (0, 0, 0).</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WhiteBalanceFilter.WhitePointCalculationMode">
            <summary>
The white balance mode. 
<para>Default is WhitePointCalculationMode::Cluster.</para></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WhiteBalanceFilter.#ctor(Nokia.Graphics.Imaging.WhitePointCalculationMode,Windows.UI.Color)">
            <summary>
Creates and initializes a new WhiteBalanceFilter with specified white point calculation mode and source whitepoint.
</summary>
            <param name="whitePointCalculationMode">
The white point calculation mode.
</param>
            <param name="sourceWhitePoint">
The source white point reference color.
<para>Ignored, unless mode is set to Manual.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WhiteBalanceFilter.#ctor(Nokia.Graphics.Imaging.WhitePointCalculationMode)">
            <summary>
Creates and initializes a new WhiteBalanceFilter with specified white point calculation mode.
</summary>
            <param name="whitePointCalculationMode">
The white point calculation mode.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WhiteBalanceFilter.#ctor">
            <summary>
Creates and initializes a new WhiteBalanceFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhiteBalanceFilter">
            <summary>
Adjusts the white balance in the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhitePointCalculationMode">
            <summary>
The ways in which the white point can be calculated by the white balance filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhitePointCalculationMode.Manual">
            <summary> Uses a specified white reference color.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhitePointCalculationMode.Maximum">
            <summary> Uses the estimated maximum intensity color.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhitePointCalculationMode.Mean">
            <summary> Uses the estimated mean gray for the color correction.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhitePointCalculationMode.Cluster">
            <summary>Uses the mean value of the 256-bin distribution.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SolarizeFilter.Threshold">
            <summary>
                <para>The threshold level of the solarize effect.</para>
                <para>Range [0.0, 1.0]</para>
            </summary>
            <remarks>
                <para>Default is 0.5</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SolarizeFilter.#ctor(System.Double)">
            <summary>
Creates and initializes a new SolarizeFilter with a specified threshold.
</summary>
            <param name="threshold">
The threshold level of the solarize effect.
Range [0.0, 1.0]
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SolarizeFilter.#ctor">
            <summary>
Creates and initializes a new SolarizeFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SolarizeFilter">
            <summary>
Applies a solarize effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoEnhanceFilter.SourceWhitePoint">
            <summary>
The desired source white point. The luminance of the provided 
color is ignored, only the chrominance information is used.
</summary>
            <remarks>
This property is only used if WhiteBalanceMode is set to Manual.
<para>The alpha component of the color is not used.</para><para>Default is RGB (0, 0, 0).</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoEnhanceFilter.TargetWhitePoint">
            <summary>
The desired target white point. The luminance of the provided 
color is ignored, only the chrominance information is used.
</summary>
            <remarks>
This property is only used if WhiteBalanceMode is set to Automatic or Manual.
<para>The alpha component of the color is not used.</para><para>Default is RGB (255, 255, 255).</para></remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoEnhanceFilter.WhiteBalanceMode">
            <summary>
Sets the white balance mode to use.
</summary>
            <remarks>
                <para>If white balance mode is set to Automatic, a TargetWhitePoint needs to be set.</para>
                <para>If white balance mode is set to Manual, a TargetWhitePoint and a SourceWhitePoint need to be set.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoEnhanceFilter.IsLocalBoostEnhancementEnabled">
            <summary>
Enables or disables automatic local boost.
<remarks>
When enabled, the filter automatically adjusts 
gamma correction and contrast locally to enhance an image with uneven illumination.
</remarks></summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.AutoEnhanceFilter.IsContrastAndBrightnessEnhancementEnabled">
            <summary>
Enables or disables automatic enhancement of contrast and brightness.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean,Windows.UI.Color,Windows.UI.Color)">
            <summary>
Creates a new AutoEnhanceFilter with manual white balance and settings for contrast and brightness, local boost, and source and target white points.
</summary>
            <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
            <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
            <param name="targetWhitePoint">
The target white point.
<para>The alpha component of the color is not used.</para></param>
            <param name="sourceWhitePoint">
The source white point.
<para>The alpha component of the color is not used.</para></param>
            <remarks>
WhiteBalanceMode will be set to Manual when using this constructor.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean,Windows.UI.Color)">
            <summary>
Creates a new AutoEnhanceFilter with automatic white balance and settings for contrast and brightness, local boost, and target white point.
</summary>
            <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
            <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
            <param name="isWhiteBalanceEnhancementEnabled">
Enables or disables white balance enhancement.
</param>
            <param name="targetWhitePoint">
The target white point.
<para>The alpha component of the color is not used.</para></param>
            <remarks>
WhiteBalanceMode will be set to Automatic when using this constructor.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceFilter.#ctor(System.Boolean,System.Boolean)">
            <summary>
Creates a new AutoEnhanceFilter with disabled white balance and settings for local boost. 
</summary>
            <param name="isContrastAndBrightnessEnhancementEnabled">
Enables or disables contrast and brightness enhancement.
</param>
            <param name="isLocalBoostEnhancementEnabled">
Enables or disables local boost enhancement.
</param>
            <param name="isWhiteBalanceEnhancementEnabled">
Enables or disables white balance enhancement.
</param>
            <remarks>
WhiteBalanceMode will be set to Off when using this constructor.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.AutoEnhanceFilter.#ctor">
            <summary>
Creates a new AutoEnhanceFilter with disabled white balance and with automatic local boost, contrast, and brightness enabled.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.AutoEnhanceFilter">
            <summary>
Automatically enhances white balance, brightness and contrast, and/or applies local boost to the image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhiteBalanceMode">
            <summary>
The white balance modes used with the AutoEnhanceFilter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Manual">
            <summary>Uses manually set source and target white points.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Automatic">
            <summary>Automatically calculates the white point in the source image, uses a manually set target white point.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteBalanceMode.Off">
            <summary>Does not apply white balance filter.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SpotlightFilter.TransitionSize">
            <summary>
                <para>The size of the transition region given as a fraction of the radius.</para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SpotlightFilter.Radius">
            <summary>
                <para>The radius of the spotlight circle in pixels. Current coordinates.</para>
                <para>Range [0, 64511].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SpotlightFilter.Position">
            <summary>
The position of the center of spotlight circle.
</summary>
            <remarks>
                <para>Default is (0,0)</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SpotlightFilter.#ctor(Windows.Foundation.Point,System.Int32,System.Double)">
            <summary>
Creates a new SpotlightFilter.
</summary>
            <param name="position">
The position of the center of spotlight circle.
</param>
            <param name="radius">
The radius of the spotlight circle in pixels. Current coordinates.
<para>Range [0, 64511].</para></param>
            <param name="transitionSize">
The size of the transition region given as a fraction of the radius.
<para>Range [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.SpotlightFilter.#ctor">
            <summary>
Creates a new SpotlightFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SpotlightFilter">
            <summary>
Applies a spotlight effect to the image.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^},System.Int32,Nokia.Graphics.Imaging.GifLoopingMode,System.Int32)">
            <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
            <param name="imageSource">The image sources that will be rendered as an animation.</param>
            <param name="duration">The duration that each frame will be displayed in milliseconds.</param>
            <param name="loopingMode">The animation looping behaviour.</param>
            <param name="numberOfAnimationLoops">The number of loops the animation should run. Zero is forever.</param>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.FrameDescriptors">
            <summary>
List of frame descriptors. Each entry in the list describes the frame for the corresponding entry in the sources list.
<para>If a list of frame descriptors is not set, the position of each frame defaults to (0, 0), and the duration used is the value set in <see cref="P:Nokia.Graphics.Imaging.GifRenderer.Duration" />.</para><para>If <see cref="P:Nokia.Graphics.Imaging.GifRenderer.Sources" /> is not set, this property is ignored</para></summary>
            <remarks>
If the frame descriptor list is shorter than the list of sources, the sources that do not have a corresponding entry will get a position of (0, 0), and the duration used is the value set in <see cref="P:Nokia.Graphics.Imaging.GifRenderer.Duration" />.
If the frame descriptor list is longer than the sources list, the extra entries are ignored.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^},Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.FrameDescriptor^})">
            <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
            <param name="imageSources">The image sources that will be rendered as an animation.</param>
            <param name="frameDescriptors">Each frame descriptor will set frame properties for the corresponding entry in the image source list.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.RenderAsync">
            <summary>
Renders the source(s) to a GIF image using the current settings.
</summary>
            <returns>An asynchronous operation which yields an IBuffer with the GIF image.</returns>
            <remarks>If render size is not set and there are sources with uneven width or height, the operation will throw an exception.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.NumberOfAnimationLoops">
            <summary>
The number of times the animation should loop.
</summary>
            <remarks>
Setting the property to zero will cause the animation to loop indefinitely.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.Duration">
            <summary>
The duration each frame is displayed, in milliseconds.
</summary>
            <remarks>
Must be greater then 10 ms.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.Size">
            <summary>
The output size to use. Width and height must be even. 
</summary>
            <remarks>
If this is zero, the current size of the processed image will be used. 
If the size is not zero then all the sources will be stretched to this size.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.Sources">
            <summary>
Images that will be used to create an animated GIF image.
<para>A maximum of 40 sources may be provided. If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para></summary>
            <remarks>
If this property is set to a non-null value, <see cref="P:Nokia.Graphics.Imaging.GifRenderer.Source" /> is ignored.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.GifRenderer.Source">
            <summary>
The <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> that will be used as source when rendering a single frame GIF image.
<para>If render size is not set, width and height of the image must be even, or the render operation will throw an exception.</para></summary>
            <remarks>
This property will be ignored if <see cref="P:Nokia.Graphics.Imaging.GifRenderer.Sources" /> are set.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.Dispose">
            <summary>
Destructor for the renderer.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^},System.Int32,System.Int32)">
            <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
            <param name="imageSources">The image sources that will be rendered as an animation.
<para>A maximum of 40 sources may be provided. If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para></param>
            <param name="duration">The that each frame will be displayed, in milliseconds.</param>
            <param name="numberOfAnimationLoops">The number of loops the animation should run. Zero is forever.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor(Windows.Foundation.Collections.IVectorView`1{Nokia.Graphics.Imaging.IImageProvider^})">
            <summary>
Creates and initializes a new gif renderer with specified image sources.
</summary>
            <param name="imageSources">The image sources that will be rendered as an animation.
<para>A maximum of 40 sources may be provided. If render size is not set, both width and height of the images must be even, or the render operation will throw an exception.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new gif renderer with the specified image sources.
</summary>
            <param name="imageSource">The image source that will be rendered as a GIF.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GifRenderer.#ctor">
            <summary>
Creates and initializes a new gif renderer.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GifRenderer">
            <summary>
Renders an image source as a GIF image, or a list of image sources as an animated GIF image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GifLoopingMode">
            <summary>
Behavior of Gif animation.
</summary>
        </member>
        <member name="F:BackAndForth">
            <summary>
Animation will bounce and back and forward.
</summary>
        </member>
        <member name="F:Wrap">
            <summary>
Animation will start over from begining
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LocalBoostAutomaticFilter.Level">
            <summary>
                <para>Intensity of the filter.</para>
                <para>Range [0, 14].</para>
            </summary>
            <remarks>
                <para>Default value is 8</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LocalBoostAutomaticFilter.#ctor(System.Int32)">
            <summary>
Creates and initializes a new LocalBoostAutomaticFilter with the specified level.
</summary>
            <param name="level">
Intensity of the filter.
<para>Range [0, 14].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LocalBoostAutomaticFilter.#ctor">
            <summary>
Creates and initializes a new LocalBoostAutomaticFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LocalBoostAutomaticFilter">
            <summary>
Automatically boost and enhance images with unequal illumination.
</summary>
            <remarks>The image is analyzed and segmented into a dark part and a light part.
The two parts are processed separately and are finally blended together to produce a
modified image.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.RenderAsync">
            <summary>
Renders the image source to the bitmap.
</summary>
            <returns>An asynchronous operation representing the rendering operation.</returns>
            <remarks>If the Bitmap property is unassigned, the result is returned in a new bitmap.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapRenderer.ColorMode">
            <summary>
The output ColorMode used when rendering.
</summary>
            <remarks>
Default value is Bgra8888, or, if a bitmap has been specified in the constructor, the colormode of that bitmap. 
Note that if a bitmap has been specified, this value is ignored.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapRenderer.Size">
            <summary>
The output size to use if no bitmap has been specified.
</summary>
            <remarks>
If this is zero, the current size of the processed image will be used. Note: If a bitmap has been specified, this value is ignored.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapRenderer.Bitmap">
            <summary>
The bitmap that will be rendered to.
</summary>
            <remarks>If this is null, a new bitmap will be created when calling RenderAsync.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapRenderer.OutputOption">
            <summary>
Controls how the image is rendered.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapRenderer.Source">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.Dispose">
            <summary>
Destructor for the renderer.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.Bitmap,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Creates and initializes a new bitmap renderer with an image source and a target bitmap.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
            <param name="bitmap">The bitmap that will be rendered to.</param>
            <param name="outputOption">Controls how the image is rendered.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.Bitmap)">
            <summary>
Creates and initializes a new bitmap renderer with an image source and a target bitmap.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
            <param name="bitmap">The bitmap that will be rendered to.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider,Nokia.Graphics.Imaging.ColorMode)">
            <summary>
Creates and initializes a new bitmap renderer with an image source and a <see cref="P:Nokia.Graphics.Imaging.BitmapRenderer.ColorMode" />.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
            <param name="colorMode">The ColorMode that will be used when rendering</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new bitmap renderer with an image source.
</summary>
            <param name="imageSource">The image source that will be rendered.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapRenderer.#ctor">
            <summary>
Creates and initializes a new bitmap renderer.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BitmapRenderer">
            <summary>
Renders an image source to a bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MilkyFilter.#ctor">
            <summary>
Creates and initializes a new MilkyFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.MilkyFilter">
            <summary>
Applies a milky surface to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorImageSource.Color">
            <summary>
The color to give the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorImageSource.CanSetSize">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.ColorImageSource.Size">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ColorImageSource.#ctor(Windows.Foundation.Size,Windows.UI.Color)">
            <summary>
Creates and initializes a new image source with a specific size and color.
</summary>
            <param name="size">The size of the image.</param>
            <param name="color">The color to give the image.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorImageSource">
            <summary>An image source that provides an image based on a constant color.</summary>
            <remarks>
When rendering the ColorImageSource keep in mind that some renderers (like WriteableBitmapRenderer) use the alpha information. 
Unless this alpha information is desired, e.g. for transparency and compositing, set the color's alpha component to 255.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.GetBitmap">
            <summary>Return the Bitmap^. NOTE: Will throw if currently updating.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.UpdateAndGetBitmapAsync(std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Nokia.Graphics.Imaging.RenderRequest,Concurrency.cancellation_token)">
            <summary>Update this bitmap using the given image provider.</summary>
            <param name="source">The source image provider. If nullptr is passed, the resulting bitmap will be nullptr as well.</param>
            <param name="parentRenderRequest">The parent render request. Used for locking purposes if rendering is required in order to update the bitmap.</param>
            <param name="cancellationToken">A cancellation_token for propagating cancellation.</param>
            <returns>A task, that when completed results in the generated Bitmap^.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.UpdateAsync(std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Nokia.Graphics.Imaging.RenderRequest,Concurrency.cancellation_token)">
            <summary>Update this bitmap using the given image provider.</summary>
            <param name="source">The source image provider. If nullptr is passed, the resulting bitmap will be nullptr as well.</param>
            <param name="parentRenderRequest">The parent render request. Used for locking purposes if rendering is required in order to update the bitmap.</param>
            <param name="cancellationToken">A cancellation_token for propagating cancellation.</param>
            <returns>A task. When completed this means the AutoBitmap has received its value and can be used.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.#ctor(Nokia.Graphics.Imaging.Bitmap,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Create an AutoBitmap that will contain an updatable image of a source image provider.
<para>The bitmap is supplied by the user, and the size and color mode of the bitmap are used. If resizing is necessary, the supplied output option determines if aspect ratio is preserved.</para></summary>
            <param name="bitmap">User-supplied bitmap to render into.</param>
            <param name="outputOption">How to handle aspect ratio.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.#ctor(Nokia.Graphics.Imaging.Internal.AutoBitmapUsage,Windows.Foundation.Size,Nokia.Graphics.Imaging.ColorMode,Nokia.Graphics.Imaging.OutputOption)">
            <summary>
Create an AutoBitmap that will contain an updatable image of a source image provider.
<para>Both the size and color mode are supplied by the user. If resizing is necessary, the supplied output option determines if aspect ratio is preserved.</para></summary>
            <param name="usage">Describes what the user will do with the bitmap. If ReadOnly is passed, the AutoBitmap can possibly avoid a render/copy operation.</param>
            <param name="size">User-supplied size.</param>
            <param name="colorMode">User-supplied color mode.</param>
            <param name="outputOption">How to handle aspect ratio.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.#ctor(Nokia.Graphics.Imaging.Internal.AutoBitmapUsage,Nokia.Graphics.Imaging.ColorMode)">
            <summary>
Create an AutoBitmap that will contain an updatable image of a source image provider.
<para>The size will be taken from the source, and the color mode is supplied by the user.</para></summary>
            <param name="usage">Describes what the user will do with the bitmap. If ReadOnly is passed, the AutoBitmap can possibly avoid a render/copy operation.</param>
            <param name="colorMode">User-supplied color mode.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.AutoBitmap.#ctor(Nokia.Graphics.Imaging.Internal.AutoBitmapUsage)">
            <summary>
Create an AutoBitmap that will contain an updatable image of a source image provider.
<para>The size and color mode will be taken from the source. If the source has no inherent color mode, Bgra8888 is used.</para></summary>
            <param name="usage">Describes what the user will do with the bitmap. If ReadOnly is passed, the AutoBitmap can possibly avoid a render/copy operation.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Internal.AutoBitmap">
            <summary>
Helper that can be used in place of a Bitmap^, when the contents are sourced from an ImageProvider.
<para>
Ensures that the source performs the work needed to output a bitmap, and can in some cases
"borrow" a bitmap directly from the source without making a copy.
</para></summary>
            <remarks>
For "borrowing" to occur, AutoBitmapUsage::ReadOnly must be used, the size and colormode must match, 
and the source must make the bitmap available without actually rendering.
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Internal.AutoBitmapUsage">
            <summary>Indicates the usage of the generated bitmap. This can be used to enable certain optimizations.</summary>
        </member>
        <member name="F:ReadOnly">
            <summary>
The user will only read from the bitmap. This can avoid a copy and reduce memory consumption.
<para>NOTE: No runtime checking is done to prevent the user from writing.</para></summary>
        </member>
        <member name="F:ReadWrite">
            <summary>
The user will both read from and write into the bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsTonemapper.Apply">
            <summary>Apply the tonemapping effect, modifying the bitmap in-place.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsTonemapper.#ctor(CTTMOGradSettings,Nokia.Graphics.Imaging.Bitmap)">
            <summary>Create an LDR tonemapper using just one bitmap.</summary>
            <param name="settings">A CTTMOGradSettings structure.</param>
            <param name="bitmap">The bitmap to apply tonemapping to. This bitmap is locked and may change during the lifetime of this object.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CapsTonemapper">
            <summary>
Class wrapper for the CTTMO tone mapper. 
Offers automatic lifetime management, exception safety etc.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IMediaCapture.VideoDeviceController">
            <summary>
Internal framework property.
</summary>
            <remarks>
This is an internal framework property and should never be called explicitly.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.SupportsVideoPreview">
            <summary>
Internal framework method.
</summary>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>A value for internal use.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.StopPreviewAsync">
            <summary>
Internal framework method.
</summary>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>An asynchronous action for internal use.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.StartPreviewToCustomSinkAsync(Windows.Media.MediaProperties.MediaEncodingProfile,Windows.Media.IMediaExtension)">
            <summary>
Internal framework method.
</summary>
            <param name="encodingProfile">This parameter is passed internally.</param>
            <param name="customMediaSink">This parameter is passed internally.</param>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>An asynchronous action for internal use.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.StartPreviewAsync">
            <summary>
Internal framework method.
</summary>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>An asynchronous action for internal use.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.InitializeAsync(Windows.Media.Capture.MediaCaptureInitializationSettings)">
            <summary>
Internal framework method.
</summary>
            <param name="mediaCaptureInitializationSettings">This parameter is passed internally.</param>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>An asynchronous action for internal use.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IMediaCapture.InitializeAsync">
            <summary>
Internal framework method.
</summary>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>An asynchronous action for internal use.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IMediaCapture">
            <summary>
Internal framework Interface.
</summary>
            <remarks>
This is an internal framework interface and should never be used externally.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ReframingFilter.PivotPoint">
            <summary>
The point around which rotation is done. Expressed in the unit coordinate space of the reframing area,
i.e., the top left corner of the reframing area is at (0.0), and the bottom right corner is at (1, 1).
<para>Default is (0.5, 0.5), the center of the reframing area.</para></summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ReframingFilter.Angle">
            <summary>
Rotation of the reframing area clockwise around its top-left corner in degrees.
<remarks><para>Default is 0.</para></remarks></summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ReframingFilter.ReframingArea">
            <summary>
Rectangle describing the position and size of the reframing area.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters.</para></summary>
            <remarks>
If the reframing area has a width or height of 0, this filter will not be applied.
<para>When reframing without rotation, width and height must be in the range [0, 16383].</para><para>When reframing with rotation, width and height must be in the range [0, X], where X is in the range [5792, 16383] depending on the reframing area and the source image size.
An exception will be thrown during rendering if this limit is exceeded.</para><para>The ReframingFilter supports reframing to areas larger than the source or outside of source's bounds.
Areas outside the original image are rendered as transparent black pixels, ARGB(0, 0, 0, 0).</para><para>Default is a 0-size reframing area.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ReframingFilter.#ctor(Windows.Foundation.Rect,System.Double,Windows.Foundation.Point)">
            <summary>
Creates and initializes a new ReframingFilter with specified reframing area, angle of rotation, and pivot point.
</summary>
            <param name="reframingArea">
The position and size of the reframing area.
If the reframing area has a width or height of 0, this filter will not be applied.
<para>When reframing without rotation, width and height must be in the range [0, 16383].</para><para>When reframing with rotation, width and height must be in the range [0, X], where X is in the range [5792, 16383] depending on the reframing area and the source image size.
An exception will be thrown during rendering if this limit is exceeded.</para><para>The ReframingFilter supports reframing to areas larger than the source or outside of source's bounds.
Areas outside the original image are rendered as transparent black pixels, ARGB(0, 0, 0, 0).</para></param>
            <param name="angle">
Rotation of the reframing area clockwise around the pivot point in degrees.
</param>
            <param name="pivotPoint">
The point around which rotation is done. Expressed in the unit coordinate space of the reframing area,
i.e., the top left corner of the reframing area is at (0.0), and the bottom right corner is at (1, 1).
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ReframingFilter.#ctor(Windows.Foundation.Rect,System.Double)">
            <summary>
Creates and initializes a new ReframingFilter with a default pivot point and specified reframing area and angle of rotation.
</summary>
            <param name="reframingArea">
The position and size of the reframing area.
If the reframing area has a width or height of 0, this filter will not be applied.
<para>When reframing without rotation, width and height must be in the range [0, 16383].</para><para>When reframing with rotation, width and height must be in the range [0, X], where X is in the range [5792, 16383] depending on the reframing area and the source image size.
An exception will be thrown during rendering if this limit is exceeded.</para><para>The ReframingFilter supports reframing to areas larger than the source or outside of source's bounds.
Areas outside the original image are rendered as transparent black pixels, ARGB(0, 0, 0, 0).</para></param>
            <param name="angle">
Rotation of the reframing area clockwise around the pivot point in degrees.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.ReframingFilter.#ctor">
            <summary>
Creates and initializes a new ReframingFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ReframingFilter">
            <summary>
Reframes the image to comprise a rectangle of any size inside or outside the current image.
Reframing is done by specifying a reframing area by position and size, an angle of clockwise rotation, 
and a pivot point around which the reframing area is rotated.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RotationResizeMode">
            <summary>
Image resizing behaviors when rotating. The image can be resized to fit within
the original image dimensions during rotation, or it could go over the dimension border.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.FitOutside">
            <summary>Resize the rotated image so that the original image dimensions fit inside the rotated image.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.FitInside">
            <summary>Resize the rotated image so that it fits inside the original image dimensions.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.RotationResizeMode.Ignore">
            <summary>Do not resize while rotating</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurCustomKernel.Shape">
            <summary>
Image representation of the kernel used for blurring.
</summary>
            <remarks>
A square sized kernel is needed, if the input image is not square it will be resized internally (while preserving the aspect ratio).
If the Size property is 0 (default) then the actual size of the image source will be used. If any dimension is larger than 255, a square with a side length of 255 will be used.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurCustomKernel.Size">
            <summary>
The length of a side of the square of the kernel used.
Range [0, 250]. 
</summary>
            <remarks>
If the value is 0 then the actual size of the image source will be used. If it is too big it will be resized to 250x250 while preserving aspect ratio.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LensBlurCustomKernel.PointLightStrength">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurCustomKernel.#ctor(Nokia.Graphics.Imaging.IImageProvider,System.UInt32)">
            <summary>
Creates and initializes a new LensBlurCustomKernel with a custom shape and a size. 
</summary>
            <param name="shape">Image representation of the kernel used for blurring.</param>
            <param name="size">The length of a side of the square of the kernel used.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LensBlurCustomKernel.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new LensBlurCustomKernel with a custom shape. 
</summary>
            <param name="shape">Image representation of the kernel used for blurring.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LensBlurCustomKernel">
            <summary>
Defines a custom kernel used for blurring by LensBlurEffect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ILensBlurKernel.Size">
            <summary>
The length of a side of the square of the kernel used.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.ILensBlurKernel.PointLightStrength">
            <summary>
The amount of energy associated with the kernel. Higher values provide more visible shapes.
Range [1, 10].
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ILensBlurKernel">
            <summary>
Defines a kernel used for bluring by LensBlurEffect.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MagicPenFilter.#ctor">
            <summary>
Creates and initializes a new MagicPenFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.MagicPenFilter">
            <summary>
Applies a mix of edge distinction and color manipulation to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.EmbossFilter.Level">
            <summary>
                <para>The level of the emboss effect.</para>
                <para>Range: [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EmbossFilter.#ctor(System.Double)">
            <summary>
Creates and initializes a new EmbossFilter with a specified level.
</summary>
            <param name="level">
The level of the emboss effect.
<para>Range: [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.EmbossFilter.#ctor">
            <summary>
Creates and initializes a new EmbossFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.EmbossFilter">
            <summary>
Applies an emboss effect in grayscale.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.SdkInfo.Version">
            <summary>
The current version of the Imaging SDK.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.SdkInfo">
            <summary>
Provides general information about the Imaging SDK.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Version.ToLongVersionString">
            <summary>
Gets the value of the major component of the version number for the current Version object.
</summary>
            <remarks>
Format: "Major.Minor.Build.Revision"
</remarks>
            <returns>A long string representation of the version number.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Version.ToShortVersionString">
            <summary>
Converts the value of the current Version object to its equivalent short version string representation.
</summary>
            <remarks>
Format: "Major.Minor"
</remarks>
            <returns>A short string representation of the version number.</returns>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Version.Revision">
            <summary>
Gets the value of the revision component of the version number for the current Version object.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Version.Build">
            <summary>
Gets the value of the build component of the version number for the current Version object.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Version.Minor">
            <summary>
Gets the value of the minor component of the version number for the current Version object.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Version.Major">
            <summary>
Gets the value of the major component of the version number for the current Version object.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Version.#ctor(System.String)">
            <summary>
Creates a new Version object.
</summary>
            <param name="version">
A version string in the form of "Major.Minor.Build.Revision".
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
Creates a new Version object.
</summary>
            <param name="major">
The value of the major component of the version number.
</param>
            <param name="minor">
The value of the minor component of the version number.
</param>
            <param name="build">
The value of the build component of the version number.
</param>
            <param name="revision">
The value of the revision component of the version number.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Version.#ctor">
            <summary>
Creates a new Version object.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Version">
            <summary>
Represents a version number.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.DiagnosticsReport.Text">
            <summary>A textual representation of the diagnostic properties.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.DiagnosticsReport.Properties">
            <summary>The diagnostic properties.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DiagnosticsReport.EndProbeAsync(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>End the probing session for an object, and create a report.</summary>
            <returns>An asynchronous result with the report.</returns>
            <remarks>An empty report will be generated if a matching call to BeginProbe has not been made for the specified object prior to calling this method.</remarks>
            <param name="imageProvider">The image provider.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DiagnosticsReport.BeginProbe(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>Start a probing session for an object.</summary>
            <remarks>After calling this method, use <see cref="M:Nokia.Graphics.Imaging.DiagnosticsReport.EndProbeAsync(Nokia.Graphics.Imaging.IImageProvider)" /> to generate a report for the object.</remarks>
            <param name="imageProvider">The image provider.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DiagnosticsReport.CreateAsync">
            <summary>Create a diagnostics report.</summary>
            <returns>An asynchronous result with the report.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DiagnosticsReport">
            <summary>A report containing diagnostic properties from Nokia.Graphics.Imaging.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WatercolorFilter.ColorIntensity">
            <summary>
                <para>Specifies color intensity. </para>
                <para>Range [0.0, 1.0]. </para>
            </summary>
            <remarks>
                <para>Default is 0.5.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WatercolorFilter.LightIntensity">
            <summary>
                <para>Specifies light intensity. </para>
                <para>Range [0.0, 1.0].</para>
            </summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WatercolorFilter.#ctor(System.Double,System.Double)">
            <summary>
Creates and initializes a new WatercolorFilter with specified intensities.
</summary>
            <param name="lightIntensity">
The light intensity. 
<para>Range [0.0, 1.0].</para></param>
            <param name="colorIntensity">
The color intensity.
<para>Range [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WatercolorFilter.#ctor">
            <summary>
Creates and initializes a new WatercolorFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WatercolorFilter">
            <summary>
Applies a watercolor effect to the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WarpFilter.Regions">
            <summary>
List of rectangles where warp is applied. 
</summary>
            <remarks>
Rectangles that are outside of the current image size will be cropped to the valid area.
There must be at least one rectangle in the list, if used.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WarpFilter.Rotation">
            <summary>
Rotation of the effect.
</summary>
            <remarks>
                <para>Has no effect if no regions are specified.</para>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WarpFilter.Level">
            <summary>
                <para>Amount of effect applied.</para>
                <para>Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.</para>
            </summary>
            <remarks>
                <para>Default is 0.5.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WarpFilter.WarpEffect">
            <summary>
The warp effect to apply. Default is WarpEffect::Upnose.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WarpFilter.#ctor(Nokia.Graphics.Imaging.WarpEffect,System.Double,Nokia.Graphics.Imaging.Rotation,Windows.Foundation.Collections.IVector`1{Windows.Foundation.Rect})">
            <summary>
Creates and initializes a new WarpFilter.
</summary>
            <param name="effect">
The warp effect to apply. 
</param>
            <param name="level">
Amount of effect applied.
Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.
Default is 0.5.
</param>
            <param name="rotation">
Rotation of the effect.
</param>
            <param name="regions">
Array of rectangles where warp is applied. 
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WarpFilter.#ctor(Nokia.Graphics.Imaging.WarpEffect,System.Double)">
            <summary>
Creates and initializes a new WarpFilter with specified warp effect and level.
</summary>
            <param name="effect">
The warp effect to apply. 
</param>
            <param name="level">
Amount of effect applied.
Range [0.0, 1.0], where 0.0 means no effect and 1.0 means full effect.
Default is 0.5.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WarpFilter.#ctor">
            <summary>
Creates and initializes a new WarpFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WarpFilter">
            <summary>
Applies a warp effect to an image or parts of an image.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WarpEffect">
            <summary>
Effects for the warp filter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Insect">
            <summary>Insect</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.HappyFool">
            <summary>HappyFool</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.LongFaced">
            <summary>LongFaced</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Sharpchin">
            <summary>Sharpchin</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Square">
            <summary>Square</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Gobbler">
            <summary>Gobbler</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.AlienHybrid">
            <summary>AlienHybrid</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.BigNose">
            <summary>BigNose</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Alien">
            <summary>Alien</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Professor">
            <summary>Professor</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.BigFace">
            <summary>BigFace</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Grit">
            <summary>Grit</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.WideSmile">
            <summary>WideSmile</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.SmallNose">
            <summary>SmallNose</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Twister">
            <summary>Twister</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WarpEffect.Upnose">
            <summary>Upnose</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Rotation">
            <summary>
Stepwise rotation. Can be done 0, 90, 180, and 270 degrees clockwise.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.Rotate270">
            <summary>Rotates the image 270 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.Rotate180">
            <summary>Rotates the image 180 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.Rotate90">
            <summary>Rotates the image 90 degrees clockwise.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.Rotation.Rotate0">
            <summary>Rotates the image zero degrees clockwise.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Internal.RendererBase">
            <summary>Base class for renderers.</summary>
            <remarks>
Can be wrapped into an IImageConsumer derived ref class, using WrapObject. Note there is no
corresponding UnwrapObject() overload, as we don't need to pass renderers *into* the API so far.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LocalBoostFilter.SensitivityLevel">
            <summary>
Specifies how much of the processed image will be blended into the original image.
</summary>
            <remarks>
                <para>If sensitivityLevel equals 0, the result will be 100% of the original 
image and 0% of the processed image.</para>
                <para>If sensitivityLevel equals 1, the result will be 0% of the original 
image and 100% of the processed image.</para>
                <para>Range: [0.0, 1.0]</para>
                <para>Default value: 1.0</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LocalBoostFilter.LightContrast">
            <summary>
Contrast amplification of the light part.
</summary>
            <remarks>
                <para>Range: [0.5, 1.0)</para>
                <para>Default value: 0.5</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LocalBoostFilter.DarkContrast">
            <summary>
                <para>Contrast amplification of the dark part.</para>
                <para>Range [0.5, 1.0)</para>
            </summary>
            <remarks>
                <para>Default value: 0.625</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.LocalBoostFilter.Gamma">
            <summary>
                <para>Gamma correction for the dark part of the image.</para>
                <para>Range [0.1, 5.0)</para>
            </summary>
            <remarks>
                <para>Default value: 1.9</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LocalBoostFilter.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Creates and initializes a new LocalBoostFilter with specified settings.
</summary>
            <param name="gamma">
Gamma correction for the dark part of the image.
<para>Range [0.1, 5.0)</para></param>
            <param name="darkContrast">
Contrast amplification of the dark part.
<para>Range [0.5, 1.0)</para></param>
            <param name="lightContrast">
Contrast amplification of the light part.
<para>Range [0.5, 1.0)</para></param>
            <param name="sensitivityLevel">
Specifies how much of the processed image will be blended into the original image.
<para>Range: [0.0, 1.0]</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LocalBoostFilter.#ctor">
            <summary>
Creates and initializes a new LocalBoostFilter with default settings.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LocalBoostFilter">
            <summary>
Manually boost and enhance images with unequal illumination.
</summary>
            <remarks>The image is analyzed and segmented into a dark part and a light part.
The two parts are processed separately and are finally blended together to produce a
modified image.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.GrayscaleNegativeFilter.#ctor">
            <summary>
Creates and initializes a new GrayscaleNegativeFilter.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GrayscaleNegativeFilter">
            <summary>
Converts the image to a grayscale negative.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.FrameDescriptor.Duration">
            <summary>
Controls how long time the frame is visibled in milliseconds.
</summary>
            <remarks>
Has to be greater or equal to 10 ms.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.FrameDescriptor.Position">
            <summary>
Sets the position of the frame, expressed in the output dimensions of the GIF image.
Has to be greater or equal to zero.
If the Size has been set on the GifRenderer all the images will be resized to the specified size and position will be applied after the resizing.
<para>The default is (0, 0).</para></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FrameDescriptor.#ctor(System.Int32,Windows.Foundation.Point)">
            <summary>
Creates and initializes a new FrameDescriptor with frame duration and position.
</summary>
            <param name="duration">The duration the frame will be visible.</param>
            <param name="position">The position in the main frame.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FrameDescriptor.#ctor">
            <summary>
Creates and initializes a new FrameDescriptor.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FrameDescriptor">
            <summary>
Provides configuration for reach frame in Gif file.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.MonoColorFilter.ColorDistance">
            <summary>
                <para>Specifies the tolerance level of the effect. </para>
                <para>Range [0.0, 1.0].</para>
            </summary>
            <remarks>
                <para>If the color distance is
small, only a small variation around the color defined with preserveColor
will be preserved.</para>
                <para>Default is 0.0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.MonoColorFilter.PreserveColor">
            <summary>
The color that will be preserved.
</summary>
            <remarks>
Default is (0,0,0)
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MonoColorFilter.#ctor(Windows.UI.Color,System.Double)">
            <summary>
Creates and initializes a new MonoColorFilter with specified settings for the color to be preserved.
</summary>
            <param name="preserveColor">
The color that will be preserved.
</param>
            <param name="colorDistance">
Specifies the tolerance level of the effect. 
<para>Range [0.0, 1.0].</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.MonoColorFilter.#ctor">
            <summary>
Creates and initializes a new MonoColorFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.MonoColorFilter">
            <summary>
Preserves one color tone while other colors
are converted to grayscale.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.WhiteboardEnhancementFilter.WhiteboardEnhancementMode">
            <summary>
Specifies if the whiteboard effect should be hard or soft.
</summary>
            <remarks>
Default is Hard.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WhiteboardEnhancementFilter.#ctor(Nokia.Graphics.Imaging.WhiteboardEnhancementMode)">
            <summary>
Creates and initializes a new WhiteboardEnhancementFilter with a specified mode.
</summary>
            <param name="whiteboardEnhancementMode">
Specifies if the whiteboard effect should be hard or soft.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.WhiteboardEnhancementFilter.#ctor">
            <summary>
Creates and initializes a new WhiteboardEnhancementFilter with default values.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhiteboardEnhancementFilter">
            <summary>
Enhances text and drawings in an image of a whiteboard.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.WhiteboardEnhancementMode">
            <summary>
The whiteboard enhancement modes used with the WhiteBoardEnhancementFilter.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteboardEnhancementMode.Soft">
            <summary>Preserve colors better.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.WhiteboardEnhancementMode.Hard">
            <summary>Enhances the contrast.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.CropFilter.CropArea">
            <summary>
Rectangle describing the crop area. 
</summary>
            <remarks>
                <para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters. 
The crop area can only be within the image area, otherwise ArgumentException will be thrown when applying the filter.</para>
                <para>The crop area has to be within the image area, range x: [0, min(16383, image width)] y: [0, min(16383, image height)].</para>
                <para>If the crop area has a width or height of 0, this filter will not be applied.</para>
                <para>Default is a 0-size crop area.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CropFilter.#ctor(Windows.Foundation.Rect)">
            <summary>
Creates and initializes a new CropFilter with a specified crop area.
</summary>
            <param name="cropArea">
The crop area.
<para>The coordinates are relative to the current coordinate system, which may be affected by preceding filters. 
The crop area can only be within the image area, otherwise ArgumentException will be thrown when applying the filter.</para><para>The crop area has to be within the image area, range x: [0, min(16383, image width)] y: [0, min(16383, image height)].</para><para>If the crop area has a width or height of 0, this filter will not be applied.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CropFilter.#ctor">
            <summary>
Creates and initializes a new CropFilter with a default crop area.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CropFilter">
            <summary>
Crops the image to a specified region.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapImageSource.Invalidate">
            <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapImageSource.Bitmap">
            <summary>
The bitmap to use as source.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapImageSource.CanSetSize">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.BitmapImageSource.Size">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BitmapImageSource.#ctor(Nokia.Graphics.Imaging.IReadableBitmap)">
            <summary>
Creates and initializes a new image source with a bitmap. The bitmap is not copied.
</summary>
            <param name="bitmap">An input bitmap to use as source.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BitmapImageSource">
            <summary>
An image source created from a bitmap.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IImageSize.CanSetSize">
            <summary>Indicates whether the <see cref="P:Nokia.Graphics.Imaging.IImageSize.Size" /> property can be set.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IImageSize.Size">
            <summary>The inherent size of the image.</summary>
            <remarks> 
This image provider has special characteristics that allows it to return its inherent size without a call to <see cref="M:Nokia.Graphics.Imaging.IImageProvider.GetInfoAsync" /> (which is otherwise required).
Note that when using this image provider in an effect graph, the effective size may be different. 
<para>
Setting the size may be unsupported, in which case the setter will throw a NotSupportedException. Examine the <see cref="P:Nokia.Graphics.Imaging.IImageSize.CanSetSize" /> property first to check for support.
</para></remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IImageSize">
            <summary>An interface for querying image size directly, with optional support for also changing it.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IGradient.Stops">
            <summary>List of <see cref="T:Nokia.Graphics.Imaging.GradientStop" /> defining the color changes within the gradient.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IGradient">
            <summary>A gradient.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.GradientStop.Color">
            <summary>The color for this stop.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.GradientStop.Offset">
            <summary>The offset for this stop.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.GradientStop">
            <summary>Represents a stop in a gradient.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.TemperatureAndTintFilter.Tint">
            <summary>
                <para>Color tint adjustment.</para>
                <para>Range [-1.0, 1.0] where 0 implies an unmodified color tint. </para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.TemperatureAndTintFilter.Temperature">
            <summary>
                <para>Color temperature adjustment.</para>
                <para>Range [-1.0, 1.0] where 0 implies an unmodified color temperature.</para>
            </summary>
            <remarks>
                <para>Default is 0.</para>
            </remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.TemperatureAndTintFilter.#ctor(System.Double,System.Double)">
            <summary>
Creates and initializes a new TemperatureAndTintFilter with specified temperature and tint.
</summary>
            <param name="temperature">
The temperature adjustment value.
<para>Range [-1.0, 1.0] where 0 implies an unmodified color temperature.</para></param>
            <param name="tint">
The tint adjustment.
<para>Range [-1.0, 1.0] where 0 implies an unmodified color tint.</para></param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.TemperatureAndTintFilter.#ctor">
            <summary>
Creates and initializes a new TemperatureAndTintFilter with default values.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.TemperatureAndTintFilter.Lock(Nokia.Graphics.Imaging.RenderRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.TemperatureAndTintFilter.PrepareAsync">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.TemperatureAndTintFilter.Apply(Nokia.Graphics.Imaging.IFilterEffect)">
            <inheritdoc />
        </member>
        <member name="T:Nokia.Graphics.Imaging.TemperatureAndTintFilter">
            <summary>
Adjusts the color temperature and tint of the image.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.FilterEffect.Source">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.FilterEffect.Filters">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterEffect.#ctor(Nokia.Graphics.Imaging.IImageProvider)">
            <summary>
Creates and initializes a new filter effect with an image source.
</summary>
            <param name="imageSource">
The image provider that will be used as source.
</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.FilterEffect.#ctor">
            <summary>
Creates and initializes a new filter effect.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.FilterEffect">
            <summary>
Applies filters of type IFilter to the image.
</summary>
            <remarks>
Members of this class are not guaranteed to be thread safe.
<para>Some filters can set a region of interest, as a rectangle specified in relative coordinates. The source image defines the initial coordinate system. Each filter that specifies a new region does so in the current coordinate system, and will affect the coordinate system used by the next filter in turn.</para><para>Applying a filter with the FilterEffect uses only constant memory, as the full source is never decoded.</para></remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker.GetLinkTarget(Nokia.Graphics.Imaging.ImageProviderLink)">
            <summary>Get the target image provider for the specified link.</summary>
            <remarks>Note that link objects must only be used with their originating ImageProviderLinkTracker. The user is responsible for keeping them associated, as no internal checking is done.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker.SetLinkTarget(Nokia.Graphics.Imaging.ImageProviderLink,std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;)">
            <summary>Set the target image provider for the specified link.</summary>
            <remarks>Note that link objects must only be used with their originating ImageProviderLinkTracker. The user is responsible for keeping them associated, as no internal checking is done.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker.CreateLink(std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;)">
            <summary>Create a link. May throw COR_E_INDEXOUTOFRANGE if MaximumImageProviderLinkCount is exceeded.</summary>
            <remarks>Note that link objects must only be used with their originating ImageProviderLinkTracker. The user is responsible for keeping them associated, as no internal checking is done.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker.InvalidatePrepare">
            <summary>When called, invalidates the prepare/load causing it to be performed again when necessary.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker.Lock(Nokia.Graphics.Imaging.RenderRequest)">
            <summary>Infrastructure. Don't call from filter code. Called automatically if FILTER_PARTIAL_WITH_ONLOADASYNC is used.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Internal.StandaloneLinkTracker">
            <summary>Standalone ImageProvider link tracker.</summary>
        </member>
        <member name="M:Nokia.Graphics.CreateIBufferFromCapsBuffer(Nokia.Graphics.Imaging.CapsBuffer*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Helper function to create an IBuffer from a CTBuffer.
</summary>
            <param name="buffer">The CTBuffer used to create the IBuffer.</param>
            <returns>The created buffer instance.</returns>
            <remarks>Only use this for data backed on the NATIVE heap. Managed data must be access via LockableMemoryBuffer and BufferLock.</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IFilterEffect.Filters">
            <summary>
Sets the filters that will be applied to the image.
</summary>
            <remarks>
A shallow copy of the list is made when getting and setting. This means that while the only way to manipulate the 
list of filters itself is via the property, changes to the settings of the filters in the list that is set or gotten through this 
property will affect rendering.
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IFilterEffect">
            <summary>
Applies filters of type IFilter to an image.
</summary>
            <remarks>
This interface is provided in order to facilitate the creation of test doubles. It is not possible for a 
user of the SDK to create an implementation of IFilterEffect that will work with the filters provided in the SDK.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IImageConsumer.Source">
            <summary>
The <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> that will be used as source.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IImageConsumer">
            <summary>
A consumer of images.
</summary>
            <remarks>Typically connects to an <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> to consume the image provided.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IFilter.Lock(Nokia.Graphics.Imaging.RenderRequest)">
            <summary>
Internal framework method.
</summary>
            <param name="renderRequest">This parameter is passed internally.</param>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>
The returned value is for internal use.
</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IFilter.Apply(Nokia.Graphics.Imaging.IFilterEffect)">
            <summary>
Internal framework method.
</summary>
            <param name="filterEffect">This parameter is passed internally.</param>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IFilter.PrepareAsync">
            <summary>
Internal framework method.
</summary>
            <remarks>
This is an internal framework method and should never be called explicitly.
</remarks>
            <returns>
The returned value is for internal use.
</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IFilter">
            <summary>
An image filter for use with an IFilterEffect.
</summary>
            <remarks>
This interface is provided in order to facilitate the creation of test doubles. It is not possible for a 
user of the SDK to create an implementation of IFilter that will work with the filter effect provided in the SDK.
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OutputColorSpacing">
            <summary>
Color spacing for the output image.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.OutputColorSpacing.Yuv422">
            <summary>YUV422</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.OutputColorSpacing.Yuv420">
            <summary>YUV420</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.Invalidate">
            <summary>
Requests a reloading of the image source during the next load or render operation.
Note: Calling invalidate during a load or render operation will have no effect.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BufferImageSource.ImageFormat">
            <summary>
The format of the compressed image data.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.BufferImageSource.Buffer">
            <summary>
The buffer containing the compressed image data.
</summary>
            <remarks>
Setting this to a <see cref="T:Windows.Storage.Streams.IBuffer" /> different from the one passed into the constructor means the image format will be auto-detected.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.Lock(Nokia.Graphics.Imaging.RenderRequest)">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.PreloadAsync">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.GetInfoAsync">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.GetBitmapAsync(Nokia.Graphics.Imaging.Bitmap,Nokia.Graphics.Imaging.OutputOption)">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.Dispose">
            <summary>
Destructor for the image source.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.#ctor(Windows.Storage.Streams.IBuffer,Nokia.Graphics.Imaging.ImageFormat)">
            <summary>
Creates and initializes a new image source with a compressed image buffer with a known image format. 
The buffer is not copied.
</summary>
            <param name="buffer">Buffer containing the compressed image data.</param>
            <param name="imageFormat">The image format of the image in the provided buffer.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.BufferImageSource.#ctor(Windows.Storage.Streams.IBuffer)">
            <summary>
Creates and initializes a new image source with a compressed image buffer. The buffer is not copied.
</summary>
            <remarks>
An attempt will be made to 
automatically detect the image format. If the image data is not corrupt the 
source should be able to detect JPEG, GIF, PNG, TIFF, BMP, WBMP. If the 
image format cannot be determined an exception will be thrown.
For optimal performance, or if the image format cannot be determined, use the constructor 
that allows setting the image format explicitly.
</remarks>
            <param name="buffer">Buffer containing the compressed image data.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BufferImageSource">
            <summary>
An image source created from a compressed image buffer.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderSession.Add(Nokia.Graphics.Imaging.RenderSession*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Add a RenderSession as a dependency, taking over ownership of it.
</member>
        <member name="T:Nokia.Graphics.Imaging.RenderSession">
            <summary>
Represents a "render session".
Used to keep references to various objects that need to stay alive during rendering.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.BitmapLock">
            <summary>Locks a Bitmap for access as a CTBitmap.</summary>
            <remarks>
This enables safe access of the data, when the Bitmap is backed by IBuffers of managed origin.
</remarks>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Bitmap.Buffers">
            <summary>
The buffers underlying this Bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.ConvertFrom(Nokia.Graphics.Imaging.Bitmap)">
            <summary>
Color conversion of the image data from the passed bitmap.
</summary>
            <param name="sourceBitmap">The input bitmap.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.CopyDataFrom(Nokia.Graphics.Imaging.IReadableBitmap)">
            <summary>
Copies the image data from the passed bitmap.
</summary>
            <param name="sourceBitmap">The bitmap to copy the data from.</param>
        </member>
        <member name="P:Nokia.Graphics.Imaging.Bitmap.ColorMode">
            <inheritdoc />
        </member>
        <member name="P:Nokia.Graphics.Imaging.Bitmap.Dimensions">
            <inheritdoc />
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.Dispose">
            <summary>
Destructor for the bitmap.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.#ctor(Nokia.Graphics.Imaging.Bitmap,Windows.Foundation.Rect)">
            <summary>
Creates a Bitmap that points to the same image data as another Bitmap, cropped to a smaller rectangle.
</summary>
            <remarks>
Data provided in the source bitmap is not copied, only a reference to it is kept.
</remarks>
            <param name="sourceBitmap"> a Bitmap </param>
            <param name="cropArea"> Crop area rectangle. Must fit within dimensions of sourceBitmap. </param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Nokia.Graphics.Imaging.ColorMode,System.UInt32[],Windows.Storage.Streams.IBuffer[])">
            <summary>
Creates a bitmap referencing the data in the provided IBuffers. Suitable for planar and semi-planar color modes.
</summary>
            <remarks>
Data provided in the constructor is not copied, only a reference to it is kept.
</remarks>
            <param name="size">The size in pixels of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
            <param name="scanlineByteSizes">The size in bytes of the scanline of each of the color planes of the bitmap to be created.</param>
            <param name="colorPlanes">The color planes that the bitmap will reference, provided in IBuffers.</param>
            <remarks>
Some restrictions apply when it comes to size of a Bitmap with a certain ColorModes:
Some color modes are not supported when creating a bitmap. Unsupported color modes: Float16, Float32, Gray16, Gray32, U, Uv, V, Vu, Y, Yuv444P
- ColorMode::Yuv420P: The image must have an even width and even height
- ColorMode::Yuv420Sp: The image must have an even width and even height
- ColorMode::Yvu420Sp: The image must have an even width and even height
- ColorMode::Yvu422Sp: The image must have an even width
- ColorMode::Yuv422_Y1UY2V: The image must have an even width
- ColorMode::Yuv422P: The image must have an even width
- ColorMode::Yuv422Sp: The image must have an even width
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Nokia.Graphics.Imaging.ColorMode,System.UInt32,Windows.Storage.Streams.IBuffer)">
            <summary>
Creates a Bitmap referencing the data in the provided IBuffer. Use only with interleaved, non-planar color modes.
</summary>
            <remarks>
Data provided in the constructor is not copied, only a reference to it is kept.
</remarks>
            <param name="size">The size in pixels of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
            <param name="scanlineByteSize">The size in bytes of the scanline of the bitmap to be created.</param>
            <param name="pixels">The pixel data that the bitmap will reference, provided in an IBuffer.</param>
            <remarks>
Some color modes are not supported when creating a bitmap. Unsupported color modes: Float16, Float32, Gray16, Gray32, U, Uv, V, Vu, Y, Yuv444P
Some restrictions apply when it comes to size of a Bitmap with a certain ColorModes:
- ColorMode::Yuv420P: The image must have an even width and even height
- ColorMode::Yuv420Sp: The image must have an even width and even height
- ColorMode::Yvu420Sp: The image must have an even width and even height
- ColorMode::Yvu422Sp: The image must have an even width
- ColorMode::Yuv422_Y1UY2V: The image must have an even width
- ColorMode::Yuv422P: The image must have an even width
- ColorMode::Yuv422Sp: The image must have an even width
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Bitmap.#ctor(Windows.Foundation.Size,Nokia.Graphics.Imaging.ColorMode)">
            <summary>
Creates an empty Bitmap where data can be rendered to.
</summary>
            <param name="size">The size in pixels of the bitmap to be created.</param>
            <param name="colorMode">The color mode of the bitmap to be created.</param>
            <remarks>
Some color modes are not supported when creating a bitmap. Unsupported color modes: Float16, Float32, Gray16, Gray32, U, Uv, V, Vu, Y, Yuv444P
Some restrictions apply when it comes to size of a Bitmap with a certain ColorModes:
- ColorMode::Yuv420P: The image must have an even width and even height
- ColorMode::Yuv420Sp: The image must have an even width and even height
- ColorMode::Yvu420Sp: The image must have an even width and even height
- ColorMode::Yvu422Sp: The image must have an even width
- ColorMode::Yuv422_Y1UY2V: The image must have an even width
- ColorMode::Yuv422P: The image must have an even width
- ColorMode::Yuv422Sp: The image must have an even width
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Bitmap">
            <summary>
Contains pixel data for an image. 
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IReadableBitmap.ColorMode">
            <summary>
The color mode of the bitmap.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.IReadableBitmap.Dimensions">
            <summary>
The dimensions of the bitmap.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IReadableBitmap">
            <summary>
A readable bitmap.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.PixelBufferInfo.Pitch">
            <summary>Distance, in bytes, between consecutive rows in the buffer.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.PixelBufferInfo.ColorMode">
            <summary>The color mode of the pixel data.</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.PixelBufferInfo.Buffer">
            <summary>A buffer containing the pixel data.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.PixelBufferInfo">
            <summary>Describes a buffer containing two-dimensional pixel data.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ColorMode">
            <summary>
Color formats
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Float32">
            <summary>
32 bit float32 per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Float16">
            <summary>
16 bit float16 per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Vu">
            <summary>
Represent a single VU channel, VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Uv">
            <summary>
Represent a single UV channel, UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.V">
            <summary>
Represents the V channel (chroma) in a planar format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.U">
            <summary>
Represents the U channel (chroma) in a planar format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Y">
            <summary>
Represents the Y channel (luma) in a planar format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv422_Y1UY2V">
            <summary>
Y, U, Y, V, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv444P">
            <summary>
Planar YUV444. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv420P">
            <summary>
Planar YUV420. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yvu422Sp">
            <summary>
Semi-planar YVU422. YYY..., VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv422Sp">
            <summary>
Semi-planar YUV422. YYY..., UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yvu420Sp">
            <summary>
Semi-planar YVU420. YYY..., VUVUVU...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv420Sp">
            <summary>
Semi-planar YUV420. YYY..., UVUVUV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Yuv422P">
            <summary>
Planar YUV422. YYY..., UUU..., VVV...
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Gray32">
            <summary>
32 bit grayscale, 32 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Gray16">
            <summary>
16 bit grayscale, 16 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Gray8">
            <summary>
8 bit grayscale, 8 bit per pixel.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Pbgra8888">
            <summary>
4 bytes per pixel, interleaved, with premultiplied alpha.
</summary>
            <remarks>
This is a display format, do not use for further image processing. The color components are (B*A, G*A, R*A, A).
</remarks>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Bgra8888">
            <summary>
4 bytes per pixel, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Argb8888">
            <summary>
4 bytes per pixel, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Rgb565D">
            <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved, with dithering to minimize gradient errors.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Rgb565">
            <summary>
5 bits red, 6 bits green, 5 bits blue, interleaved.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ColorMode.Ayuv4444">
            <summary>
Standard interleaved AYUV.
</summary>
        </member>
        <member name="P:Nokia.Graphics.Imaging.RenderRequest.IsCompleted">
            <summary>Completion status.</summary>
            <returns>True if the rendering associated with this request has finished.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderRequest.SetCompleted">
            <summary>Marks the rendering completed. This will unlock any dependent objects.</summary>
            <remarks>Disposing the object via IDisposable.Dispose (in .NET) or destruction (in C++/CX) automatically implies a call to this method.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderRequest.IsDescendantOf(Nokia.Graphics.Imaging.RenderRequest)">
            <summary>Checks if the specified RenderRequest is an ancestor of this one.</summary>
            <param name="parentRenderRequest">The presumptive parent.</param>
            <returns>True if this RenderRequest is a descendant.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderRequest.#ctor(std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.RendererBase&gt;,Nokia.Graphics.Imaging.RenderRequest)">
            <summary>Creates and initializes a new RenderRequest, as a child of the specified parent RenderRequest.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderRequest.Dispose">
            <summary>When this object is disposed/destroyed, the render operation is over, and participating objects will unlock.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.RenderRequest.#ctor">
            <summary>Creates and initializes a new RenderRequest.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.RenderRequest">
            <summary>
Represents a user-initiated rendering request. 
</summary>
            <remarks>
Created by a renderer and used to lock all dependencies of type <see cref="T:Nokia.Graphics.Imaging.IImageProvider" /> during rendering.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsStream.GetBufferLock">
            <summary>Get the internal BufferLock on the contents of the IBuffer^.</summary>
            <remarks>The buffer lock.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsStream.GetBuffer">
            <summary>Get the IBuffer^ originally passed in to create this object.</summary>
            <remarks>The IBuffer^.</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsStream.GetCTStream">
            <summary>Get the internal CTStream.</summary>
            <returns>CTStream pointer. Note: this pointer is only valid for the lifetime of this object.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsStream.#ctor(Windows.Storage.Streams.IBuffer)">
            <summary>Create a stream wrapping the contents of a specified IBuffer^.</summary>
            <remarks>
A BufferLock will be taken on the IBuffer for the lifetime of this object.
If the IBuffer is backed by .NET data, this is pinned with a GCHandle.
</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CapsStream">
            <summary>Class wrapper for CTStream. Offers automatic lifetime management, exception safety etc.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.IsExifBuffer(Windows.Storage.Streams.IBuffer)">
Creates an Exif instance based on the exif data contained in the provided buffer.
buffer: the provided buffer to use when creating the Exif instance; must not be null
returns the created Exif instance or an empty instance if valid exif data was not found.
</member>
        <member name="M:Nokia.Graphics.Imaging.Exif.GetThumbnailAsync">
            <summary>
Asynchronously gets the thumbnail, or null if not found.
<returns>Returns an IBuffer containing the thumbnail JPEG data.</returns></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.SetTagDateTimeDigitizedRaw(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set DateTime Digitized tag.
</summary>
            <param name="data">New DateTime Digitized tag.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.SetTagDateTimeOriginalRaw(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set DateTime Original tag.
</summary>
            <param name="data">New DateTime Original tag.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.GetTagOrientation">
            <summary>
Retrieves the Orientation tag
<return>Returns an integer describing the orientation.</return></summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.SetTagOrientation(System.Int32)">
            <summary>
Change the Orientation tag
</summary>
            <param name="orientation">The new orientation.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.DeleteExifIFD(System.Int32)">
            <summary>
Delete a specific IFD from the Exif.
</summary>
            <param name="IFD">The IFD to delete.</param>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Exif.Dispose">
            <summary>
Destructor for the exif.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.Exif">
            <summary>
The Exif class describes and allows manipulation of exif data.
</summary>
        </member>
        <member name="M:Nokia.Graphics.BufferLock.Create(Windows.Storage.Streams.IBuffer[],std.vector&lt;System.Byte**,std.allocator&lt;System.Byte**&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Create a number of BufferLocks, locking the same number of IBuffers for CTBuffer/pointer access.</summary>
            <returns>A vector of unique_ptrs to the BufferLocks.</returns>
            <remarks>This is a convenience function, which also fills the rawPointers vector with pointers. The returned unique_ptrs still govern the lifetimes of the BufferLocks. Be careful not to use the pointers after the locks have been destroyed!</remarks>
        </member>
        <member name="M:Nokia.Graphics.BufferLock.GetSize">
            <summary>Return the size of the accessible data.</summary>
        </member>
        <member name="M:Nokia.Graphics.BufferLock.GetData">
            <summary>Return a pointer to the accessible data. NOTE: only valid for the lifetime of this object. Do not copy the pointer.</summary>
        </member>
        <member name="M:Nokia.Graphics.BufferLock.GetCTBuffer">
            <summary>Return a pointer to the accessible CTBuffer. NOTE: only valid for the lifetime of this object. Do not copy the pointer.</summary>
        </member>
        <member name="T:Nokia.Graphics.BufferLock">
            <summary>Locks an IBuffer for access as a CTBuffer.</summary>
            <remarks>
This enables safe access of the data, if the concrete implementation is a LockableMemoryBuffer.
</remarks>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.GetSize">
            <summary>Get the size of the memory block.</summary>
            <returns>The size of the memory block in bytes.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.GetPointer">
            <summary>Get a pointer to the memory block.</summary>
            <returns>Raw pointer. Note: this pointer is only valid for the lifetime of this object.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.GetCTBuffer">
            <summary>Get the internal CTBuffer*.</summary>
            <returns>CTBuffer pointer. Note: this pointer is only valid for the lifetime of this object.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.#ctor(CTBuffer**)">
            <summary>Adopt and manage the lifetime of an existing CTBuffer*. The original pointer will be set to nullptr.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.#ctor(System.UInt32)">
            <summary>Create an empty buffer of specified size in bytes.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CapsBuffer.#ctor">
            <summary>Create an empty buffer of size zero.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.CapsBuffer">
            <summary>Class wrapper for CTBuffer. Offers automatic lifetime management, exception safety etc.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.ImageProviderWithSizeBase.GetSizeAvailability">
            <summary>Indicate when it is safe to get the final size, after the image provider has been invalidated.</summary>
        </member>
        <member name="F:AfterRender">
            <summary>
When the image provider is changed, the result is available only after a render is performed.
</summary>
        </member>
        <member name="F:AfterLoad">
            <summary>
When the image provider is changed, the result is available only after a load is performed.
</summary>
        </member>
        <member name="F:Immediately">
            <summary>
When the image provider is changed, the result is available immediately.
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.Internal.LoadAsyncBase.LoadAsync(Concurrency.cancellation_token!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Cause this object to load state if it is currently invalid.</summary>
            <returns>True if the object did load its state, or false if it was already up to date.</returns>
        </member>
        <member name="F:InvalidateLoadAfterEveryRender">
            <summary>
Automatically invalidate the load after it has been "consumed" by a render operation.
Use when the loaded state should never be reused by subsequent renders.
</summary>
            <remarks>
This option includes the effects of InvalidateLoadOnRenderSizeChange.
</remarks>
        </member>
        <member name="F:InvalidateLoadOnRenderSizeChange">
            <summary>
Automatically invalidate the load if the target render size changes. 
Use when the loaded state depends on the output size of the render. 
Note that the loaded state is still reused by renders using the same output size.
</summary>
        </member>
        <member name="F:Default">
            <summary>
No options are enabled, defaults used. 
</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.GetLinkTarget(Nokia.Graphics.Imaging.ImageProviderLink)">
            <summary>Get the target image provider for the specified link.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.SetLinkTarget(Nokia.Graphics.Imaging.ImageProviderLink,std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;)">
            <summary>Set the target image provider for the specified link.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.DeleteLinks">
            <summary>Delete all links. Note: all existing links become invalid.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.QueryChangedLinks">
            <summary>Return a bit mask of the links that have changed since the last call to this method.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.GetLinkCount">
            <summary>Return the number of existing links.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.CreateLink(std.shared_ptr&lt;Nokia.Graphics.Imaging.Internal.ImageProviderBase&gt;)">
            <summary>Create a link. May throw COR_E_INDEXOUTOFRANGE if MaximumImageProviderLinkCount is exceeded.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.QueryVersion">
            <inheritdocs />
        </member>
        <member name="M:Nokia.Graphics.Imaging.LinkTrackingBase.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.LinkTrackingBase">
            <summary>Base class that is versioned, and can track changes in linked image providers.</summary>
        </member>
        <member name="M:Nokia.Utility.VersionedBase.IncrementVersion">
            <summary>Adds one to the current version of this object.</summary>
            <remarks>This change will be picked up by any image provider that links to this one.</remarks>
        </member>
        <member name="M:Nokia.Utility.VersionedBase.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="M:Nokia.Utility.VersionedBase.QueryVersion">
            <summary>Query and return the current version of this object. May be overloaded to chain queries to linked imageproviders.</summary>
            <returns>Version of this object.</returns>
        </member>
        <member name="T:Nokia.Utility.VersionedBase">
            <summary>Base class for an object carrying a version, and that can be tracked with LinkTrackingBase.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.TimedDiagnostic.GetStatistics">
            <summary>Return the statistics collected for this diagnostic.</summary>
            <returns>Collected statistics.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.TimedDiagnostic.#ctor">
            <summary>Creates and initializes a new timed diagnostic.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.TimedDiagnostic.Statistics.MaxMillis">
            <summary>The number of milliseconds elapsed during the longest running occurrence.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.TimedDiagnostic.Statistics.MinMillis">
            <summary>The number of milliseconds elapsed during the shortest running occurrence.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.TimedDiagnostic.Statistics.TotalMillis">
            <summary>The number of milliseconds elapsed over all occurrences.</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.TimedDiagnostic.Statistics.Count">
            <summary>Number of measured occurrences.</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.TimedDiagnostic.Statistics">
            <summary>Statistics for the TimedDiagnostic.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DiagnosticTimer.Stop">
            <summary>Stop the timer. Will call the reporter function with the elapsed milliseconds since <see cref="M:Nokia.Graphics.Imaging.DiagnosticTimer.Start" /> was last called.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.DiagnosticTimer.#ctor(Nokia.Graphics.Imaging.TimedDiagnostic*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>Creates a new diagnostic timer that will call the reporter function when stopped.</summary>
            <param name="reporter">The function to call when stopped.</param>
        </member>
        <member name="T:Nokia.Graphics.Imaging.DiagnosticTimer">
            <summary>A timer that can be used for diagnostic purposes.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CountedDiagnostic.GetCount">
            <summary>Return the number of occurrences.</summary>
            <returns>The number of occurrences.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CountedDiagnostic.Increment">
            <summary>Increase the count.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.CountedDiagnostic.#ctor">
            <summary>Creates and initializes a new counted diagnostic.</summary>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IImageProvider.Lock(Nokia.Graphics.Imaging.RenderRequest)">
            <summary>Lock the image provider for the purpose of rendering.</summary>
            <remarks>The lock will propagate to any dependent IImageProviders that this provider references. Calling this multiple times with the same RenderRequest will also return true. Caution: do not call this <b>at all</b> unless implementing your own renderer.</remarks>
            <param name="renderRequest">The render request to lock with.</param>
            <returns>True if the RenderRequest owns the lock. False if the lock was already taken.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IImageProvider.GetInfoAsync">
            <summary>Asynchronously get information about this image provider.</summary>
            <returns>An async result with an ImageProviderInfo containing the information.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IImageProvider.GetBitmapAsync(Nokia.Graphics.Imaging.Bitmap,Nokia.Graphics.Imaging.OutputOption)">
            <summary>Create a Bitmap with the contents of the image provider.</summary>
            <param name="bitmap">An input bitmap to fill. If null, a bitmap will be created and returned.</param>
            <param name="outputOption">Specifies how to adjust if the source image has different aspect ratio from the bitmap passed into this method.</param>
            <returns>An async result with the bitmap.</returns>
        </member>
        <member name="M:Nokia.Graphics.Imaging.IImageProvider.PreloadAsync">
            <summary>Perform any loading (expensive operations typically involving I/O) needed to render or get info from this image provider.</summary>
            <remarks>Calling this method is optional, and can be used judiciously to improve parallelism. If not called by the user, the equivalent loading operation happens if and when it is required.</remarks>
            <returns>An async action, which completes when the loading is done.</returns>
        </member>
        <member name="T:Nokia.Graphics.Imaging.IImageProvider">
            <summary>
A provider of images.
</summary>
            <remarks>Typically connected to an <see cref="T:Nokia.Graphics.Imaging.IImageConsumer" />, but can be used to query information about or return a bitmap of the image. Supports asynchronous loading.</remarks>
        </member>
        <member name="T:Nokia.Graphics.Imaging.OutputOption">
            <summary>
Behavior when rendering to a target with different aspect ratio than the source.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.OutputOption.PreserveSize">
            <summary>
Preserve the size of the input image by adjusting the output size.
This option is not supported by renderers.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.OutputOption.Stretch">
            <summary>
Stretch the input image to fit the output size.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.OutputOption.PreserveAspectRatio">
            <summary>
Preserve the aspect ration of the input image. Excess areas will be black.
</summary>
        </member>
        <member name="T:Nokia.Graphics.Imaging.ImageFormat">
            <summary>
Supported image formats.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Tiff">
            <summary>
The image is in TIFF format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Wbmp">
            <summary>
The image is in WBMP format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Bmp">
            <summary>
The image is in BMP format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Gif">
            <summary>
The image is in GIF format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Png">
            <summary>
The image is in PNG format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Jpeg">
            <summary>
The image is in JPEG format.
</summary>
        </member>
        <member name="F:Nokia.Graphics.Imaging.ImageFormat.Undefined">
            <summary>
The image format is undefined (or should be auto-detected).
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'M:caps_doNextIteration(CTIterator*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_estimateIterationCount(CTIterator*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithFileHandle(CTFile!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSourceImageFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithBuffer(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Int32!System.Runtime.CompilerServices.IsLong,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithColor(CTColor,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_newSessionWithGradient(CTGradient*,CTSize,cips**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setBackgroundColor(cips*,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_canUndo(cips*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBitmap(cips*,CTBitmap*,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToEncoder(cips*,CTEncoder*,CTSize,CAPS_OUTPUT_OPTION)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_render(cips*,CTStream*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFile(cips*,System.Char!System.Runtime.CompilerServices.IsConst*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToFileHandle(cips*,CTFile*,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_renderToBuffer(cips*,CTBuffer*,System.UInt32!System.Runtime.CompilerServices.IsLong,CTSize,CAPS_OUTPUT_OPTION,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceRenderResult(cips*)'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_FORMAT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORMODE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_COLORSPACING'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HASALPHA'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_BPP'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_PALETTE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_HUFFMANTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_QUANTTBLS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISPROGRESSIVE'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISINTERLACED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFNOOFFRAMES'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_GIFTOTALDELAYTIME'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISJPS'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ISSTEREO'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAGLYPHIC'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_ANAG_LEFT_RED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_INTERLEAVED'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_RIGHT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_X'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_Y'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_H'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_LEFT_W'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_HEIGHT'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_JPS_HALF_WIDTH'. -->
        <!-- Discarding badly formed XML document comment for member 'F:IIF_ISMPO'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSourceImageInfo(cips*,CTImageInfo**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setJpegQuality(cips*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getBufferData(CTBuffer!System.Runtime.CompilerServices.IsConst*,System.Byte**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_doEllipticCrop(cips*,CTRect)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_uthSetRenderBlockSize(cips*,CTSize)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_initImageWithPlane(CTPlane,CTImage*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctbitmaputil_extendByMirroring(CTBitmap*,CTBitmap*,CTVector)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctfocalstack_multiplySpotlight(CTBitmap*,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,CTBitmap*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setLocalBoost(cips*,System.Single*,System.Single*,System.Single*,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getAutoEnhance(cips*,AutoEnhanceParameters*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginClipartFromRaw(cips*,CTImage*,OWNERSHIP_POLICY,CTVector,System.Single,System.Single,caps_clipart**)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setRotationAndTranslate(cips*,System.Single,CAPS_ROTATION_SCALE_MODE,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong,System.Int32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_applyChromaKeyEx(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setSpotlightOrientation(caps_spotlight*,CTVector,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_getSpotlightOrientation(caps_spotlight*,CTVector*,System.UInt32!System.Runtime.CompilerServices.IsLong*,System.Single*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setMonoColor(cips*,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_beginColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setColorSwap(cips*,CTColor,CTColor,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:caps_setVignetting(cips*,CTRect,System.Single,CTColor)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctpanoramaaligner_match(CTPanoramaAligner!System.Runtime.CompilerServices.IsConst*,CTBitmap*,System.Single*,System.Single,System.Single*,System.Int32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:ctwarpgrid_scale(CTWarpGrid*,CTWarpGrid*,System.Single)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:exif_newSessionWithFile(System.Char!System.Runtime.CompilerServices.IsConst*,ctExifSession**)'. -->
    </members>
</doc>